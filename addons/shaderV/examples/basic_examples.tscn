[gd_scene load_steps=692 format=2]

[ext_resource path="res://addons/shaderV/shaderV_icon.png" type="Texture" id=1]
[ext_resource path="res://addons/shaderV/uv/tilingNoffset.gd" type="Script" id=2]
[ext_resource path="res://addons/shaderV/uv/pixelate.gd" type="Script" id=3]
[ext_resource path="res://addons/shaderV/uv/lensDistortion.gd" type="Script" id=4]
[ext_resource path="res://addons/shaderV/uv/flipUV.gd" type="Script" id=5]
[ext_resource path="res://addons/shaderV/uv/distortionUV.gd" type="Script" id=6]
[ext_resource path="res://addons/shaderV/uv/scaleUV.gd" type="Script" id=7]
[ext_resource path="res://addons/shaderV/uv/sphericalUV.gd" type="Script" id=8]
[ext_resource path="res://addons/shaderV/uv/rotate.gd" type="Script" id=9]
[ext_resource path="res://addons/shaderV/uv/tileUV.gd" type="Script" id=10]
[ext_resource path="res://addons/shaderV/uv/transformUV.gd" type="Script" id=11]
[ext_resource path="res://addons/shaderV/uv/twirl.gd" type="Script" id=12]
[ext_resource path="res://addons/shaderV/uv/animated/distortionUVAnimated.gd" type="Script" id=13]
[ext_resource path="res://addons/shaderV/uv/animated/doodleUV.gd" type="Script" id=14]
[ext_resource path="res://addons/shaderV/uv/animated/tilingNoffsetAnimated.gd" type="Script" id=15]
[ext_resource path="res://addons/shaderV/tools/sinTime.gd" type="Script" id=16]
[ext_resource path="res://addons/shaderV/uv/animated/rotateAnimated.gd" type="Script" id=17]
[ext_resource path="res://addons/shaderV/tools/random/hash1d.gd" type="Script" id=18]
[ext_resource path="res://addons/shaderV/uv/animated/swirlUV.gd" type="Script" id=19]
[ext_resource path="res://addons/shaderV/tools/random/hash2d.gd" type="Script" id=20]
[ext_resource path="res://addons/shaderV/tools/random/hash2dvector.gd" type="Script" id=21]
[ext_resource path="res://addons/shaderV/tools/random/randomFloat.gd" type="Script" id=22]
[ext_resource path="res://addons/shaderV/tools/random/randomGoldNoiseFloat.gd" type="Script" id=24]
[ext_resource path="res://addons/shaderV/tools/vec2Compose.gd" type="Script" id=25]
[ext_resource path="res://addons/shaderV/tools/remap.gd" type="Script" id=26]
[ext_resource path="res://addons/shaderV/rgba/blur/blur9sample.gd" type="Script" id=27]
[ext_resource path="res://addons/shaderV/rgba/blur/blurCustom.gd" type="Script" id=28]
[ext_resource path="res://addons/shaderV/rgba/blur/zoomBlur.gd" type="Script" id=29]
[ext_resource path="res://addons/shaderV/rgba/glow/innerGlow.gd" type="Script" id=30]
[ext_resource path="res://addons/shaderV/rgba/glow/glowEmpty.gd" type="Script" id=31]
[ext_resource path="res://addons/shaderV/rgba/glow/innerGlowEmpty.gd" type="Script" id=32]
[ext_resource path="res://addons/shaderV/rgba/glow/outerGlow.gd" type="Script" id=33]
[ext_resource path="res://addons/shaderV/rgba/glow/outerGlowEmpty.gd" type="Script" id=34]
[ext_resource path="res://addons/shaderV/rgba/generate_shapes/chekerboardPattern.gd" type="Script" id=35]
[ext_resource path="res://addons/shaderV/rgba/generate_shapes/generateCircle2.gd" type="Script" id=36]
[ext_resource path="res://addons/shaderV/rgba/generate_shapes/generateCircle.gd" type="Script" id=37]
[ext_resource path="res://addons/shaderV/rgba/generate_shapes/generateRegularNgon.gd" type="Script" id=39]
[ext_resource path="res://addons/shaderV/rgba/generate_shapes/generateSpiral.gd" type="Script" id=40]
[ext_resource path="res://addons/shaderV/rgba/generate_shapes/scanLinesSharp.gd" type="Script" id=41]
[ext_resource path="res://addons/shaderV/rgba/generate_shapes/stripesRandom.gd" type="Script" id=42]
[ext_resource path="res://addons/shaderV/rgba/noise/generic2d.gd" type="Script" id=43]
[ext_resource path="res://addons/shaderV/rgba/noise/perlin2d.gd" type="Script" id=44]
[ext_resource path="res://addons/shaderV/rgba/noise/perlin3d.gd" type="Script" id=45]
[ext_resource path="res://addons/shaderV/rgba/noise/perlinPeriodic3d.gd" type="Script" id=46]
[ext_resource path="res://addons/shaderV/rgba/noise/perlin4d.gd" type="Script" id=47]
[ext_resource path="res://addons/shaderV/rgba/noise/simplex2d.gd" type="Script" id=48]
[ext_resource path="res://addons/shaderV/rgba/noise/simplex3d.gd" type="Script" id=49]
[ext_resource path="res://addons/shaderV/rgba/noise/simplex4d.gd" type="Script" id=50]
[ext_resource path="res://addons/shaderV/rgba/noise/worley2d.gd" type="Script" id=51]
[ext_resource path="res://addons/shaderV/rgba/noise/worley2x2.gd" type="Script" id=52]
[ext_resource path="res://addons/shaderV/rgba/noise/worley2x2x2.gd" type="Script" id=53]
[ext_resource path="res://addons/shaderV/rgba/noise/worley3d.gd" type="Script" id=54]
[ext_resource path="res://addons/shaderV/rgba/BCSAdjustment.gd" type="Script" id=55]
[ext_resource path="res://addons/shaderV/rgba/blackNwhite.gd" type="Script" id=56]
[ext_resource path="res://addons/shaderV/examples/godot_logo.png" type="Texture" id=57]
[ext_resource path="res://addons/shaderV/rgba/blendAwithB.gd" type="Script" id=58]
[ext_resource path="res://addons/shaderV/rgba/bloom.gd" type="Script" id=59]
[ext_resource path="res://addons/shaderV/rgba/chromaticAberration.gd" type="Script" id=60]
[ext_resource path="res://addons/shaderV/rgba/clamp.gd" type="Script" id=61]
[ext_resource path="res://addons/shaderV/rgba/colorCorrectionAdjustment.gd" type="Script" id=62]
[ext_resource path="res://addons/shaderV/rgba/emboss.gd" type="Script" id=63]
[ext_resource path="res://addons/shaderV/rgba/fireFX.gd" type="Script" id=64]
[ext_resource path="res://addons/shaderV/rgba/gradient4corners.gd" type="Script" id=65]
[ext_resource path="res://addons/shaderV/rgba/gradientMapping.gd" type="Script" id=66]
[ext_resource path="res://addons/shaderV/rgba/grayscale.gd" type="Script" id=67]
[ext_resource path="res://addons/shaderV/rgba/hue.gd" type="Script" id=68]
[ext_resource path="res://addons/shaderV/rgba/inverseColor.gd" type="Script" id=69]
[ext_resource path="res://addons/shaderV/rgba/maskAlpha.gd" type="Script" id=70]
[ext_resource path="res://addons/shaderV/rgba/posterize.gd" type="Script" id=71]
[ext_resource path="res://addons/shaderV/rgba/shiftHSV.gd" type="Script" id=72]
[ext_resource path="res://addons/shaderV/rgba/shineFX.gd" type="Script" id=73]
[ext_resource path="res://addons/shaderV/rgba/tintRGBA.gd" type="Script" id=74]
[ext_resource path="res://addons/shaderV/rgba/tonemap.gd" type="Script" id=75]
[ext_resource path="res://addons/shaderV/rgba/turnCGA4Palette.gd" type="Script" id=76]
[ext_resource path="res://addons/shaderV/rgba/turnGBPalette.gd" type="Script" id=77]
[ext_resource path="res://addons/shaderV/tools/TimeScaled.gd" type="Script" id=78]
[ext_resource path="res://addons/shaderV/rgba/noise/fractal/generic2d_fractal.gd" type="Script" id=79]
[ext_resource path="res://addons/shaderV/rgba/noise/fractal/perlin2d_fractal.gd" type="Script" id=80]
[ext_resource path="res://addons/shaderV/rgba/noise/fractal/worley2d_fractal.gd" type="Script" id=81]
[ext_resource path="res://addons/shaderV/rgba/noise/fractal/simplex2d_fractal.gd" type="Script" id=82]
[ext_resource path="res://addons/shaderV/rgba/noise/fractal/worley3d_fractal.gd" type="Script" id=83]
[ext_resource path="res://addons/shaderV/rgba/noise/fractal/perlin3d_fractal.gd" type="Script" id=84]
[ext_resource path="res://addons/shaderV/rgba/noise/fractal/simplex3d_fractal.gd" type="Script" id=85]
[ext_resource path="res://addons/shaderV/rgba/noise/fractal/perlin4d_fractal.gd" type="Script" id=86]
[ext_resource path="res://addons/shaderV/rgba/noise/fractal/simplex4d_fractal.gd" type="Script" id=87]
[ext_resource path="res://addons/shaderV/rgba/normalFromHeightmap.gd" type="Script" id=88]
[ext_resource path="res://addons/shaderV/tools/transformCoordinates/cartesianToPolar.gd" type="Script" id=89]
[ext_resource path="res://addons/shaderV/tools/transformCoordinates/sphericalToCartesian.gd" type="Script" id=90]
[ext_resource path="res://addons/shaderV/tools/transformCoordinates/cartesianToSpherical.gd" type="Script" id=91]
[ext_resource path="res://addons/shaderV/tools/transformCoordinates/polarToCartesian.gd" type="Script" id=92]
[ext_resource path="res://addons/shaderV/rgba/generate_shapes/gridShape.gd" type="Script" id=93]
[ext_resource path="res://addons/shaderV/rgba/sobelEdge.gd" type="Script" id=94]

[sub_resource type="VisualShaderNodeCustom" id=1]
default_input_values = [ 1, 0, 2, 0, 3, 0, 4, 0 ]
script = ExtResource( 6 )

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 5.0

[sub_resource type="VisualShaderNodeScalarConstant" id=5]
constant = 0.1

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 5.0

[sub_resource type="VisualShader" id=7]
code = "shader_type canvas_item;


// DistortionUV

vec2 d1stort1onUVFunc(vec2 _uv_d1st, float _d1stX_d1st, float _d1stY_d1st, float _waveX_d1st, float _waveY_d1st){
	_uv_d1st.x += sin(_uv_d1st.y * _waveX_d1st) * _d1stX_d1st;
	_uv_d1st.y += sin(_uv_d1st.x * _waveY_d1st) * _d1stY_d1st;
	return _uv_d1st;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:5
	float n_out5p0 = 5.000000;

// Scalar:7
	float n_out7p0 = 5.000000;

// Scalar:6
	float n_out6p0 = 0.100000;

// DistortionUV:2
	vec3 n_out2p0;
	{
		n_out2p0.xy = d1stort1onUVFunc(n_out3p0.xy, n_out6p0, n_out6p0, n_out5p0, n_out7p0);
	}

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out2p0.xy);
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -468, 10 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 440, 140 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 60, 140 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -140, 80 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 240, 140 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -180, 160 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -180, 280 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -185, 233 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 4, 0, 4, 0, 0, 0, 4, 1, 0, 1, 5, 0, 2, 1, 6, 0, 2, 3, 7, 0, 2, 2, 6, 0, 2, 4 )

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=10]
source = 2

[sub_resource type="VisualShaderNodeCustom" id=11]
default_input_values = [ 1, false, 2, false ]
script = ExtResource( 5 )

[sub_resource type="VisualShaderNodeBooleanConstant" id=12]
constant = true

[sub_resource type="VisualShaderNodeBooleanConstant" id=13]
constant = true

[sub_resource type="VisualShader" id=14]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Boolean:8
	bool n_out8p0 = true;

// Boolean:9
	bool n_out9p0 = true;

// FlipUV:7
	vec3 n_out7p0;
	{
		n_out7p0 = vec3(mix(n_out3p0.x, 1.0 - n_out3p0.x, float(n_out8p0)), mix(n_out3p0.y, 1.0 - n_out3p0.y, float(n_out9p0)), 0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out7p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -413, -123 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 500, -20 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -100, -40 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 300, -20 )
nodes/fragment/7/node = SubResource( 11 )
nodes/fragment/7/position = Vector2( 100, -20 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( -100, 40 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( -100, 100 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 7, 0, 5, 0, 3, 0, 7, 0, 8, 0, 7, 1, 9, 0, 7, 2 )

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )

[sub_resource type="VisualShaderNodeCustom" id=16]
default_input_values = [ 1, 1.0 ]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeScalarConstant" id=17]
constant = 1.1

[sub_resource type="VisualShader" id=18]
code = "shader_type canvas_item;


// LensDistortionUV

vec2 lensD1st0rti0nFunc(vec2 _uv_d1s_1en5, float _fctr_d1s_1en5){
	vec2 _p0s_d1s_1en5 = _uv_d1s_1en5 - 0.5;
	float _d1st_d1s_1en5 = length(_p0s_d1s_1en5);
	if (_fctr_d1s_1en5 > 0.0) // fisheye / barrel
		_uv_d1s_1en5 = vec2(0.5)+normalize(_p0s_d1s_1en5)*tan(_d1st_d1s_1en5*_fctr_d1s_1en5)*0.70711/tan(0.70711*_fctr_d1s_1en5);
	else if (_fctr_d1s_1en5 < 0.0) // antifisheye / pincushion
		_uv_d1s_1en5 = vec2(0.5)+normalize(_p0s_d1s_1en5)*atan(_d1st_d1s_1en5*-_fctr_d1s_1en5*10.0)*0.5/atan(-_fctr_d1s_1en5*0.5*10.0);
	return _uv_d1s_1en5;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:8
	float n_out8p0 = 1.100000;

// LensDistortionUV:7
	vec3 n_out7p0;
	{
		n_out7p0.xy = lensD1st0rti0nFunc(n_out3p0.xy, n_out8p0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out7p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -133.592, -165 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( 0, -20 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 400, 0 )
nodes/fragment/7/node = SubResource( 16 )
nodes/fragment/7/position = Vector2( 200, 40 )
nodes/fragment/8/node = SubResource( 17 )
nodes/fragment/8/position = Vector2( -20, 80 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 8, 0, 7, 1, 3, 0, 7, 0, 7, 0, 5, 0 )

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )

[sub_resource type="VisualShaderNodeCustom" id=20]
default_input_values = [ 1, Vector3( 64, 64, 0 ) ]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeVec3Constant" id=21]
constant = Vector3( 8, 8, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=22]

[sub_resource type="VisualShader" id=23]
code = "shader_type canvas_item;


// PixelateUV

vec2 pixelateFunc(vec2 _uv_p1xelate, vec2 _effect_factor_p1xelate){
	return round(_uv_p1xelate * _effect_factor_p1xelate) / _effect_factor_p1xelate;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Vector:8
	vec3 n_out8p0 = vec3(8.000000, 8.000000, 0.000000);

// PixelateUV:7
	vec3 n_out7p0;
	{
		n_out7p0.xy = pixelateFunc(n_out3p0.xy, n_out8p0.xy);
	}

// Scalar:9
	float n_out9p0 = 0.000000;

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = textureLod(TEXTURE, n_out7p0.xy, n_out9p0);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -105.592, 119 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 520, -20 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -80, -100 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 340, -20 )
nodes/fragment/7/node = SubResource( 20 )
nodes/fragment/7/position = Vector2( 140, -20 )
nodes/fragment/8/node = SubResource( 21 )
nodes/fragment/8/position = Vector2( -240, 40 )
nodes/fragment/9/node = SubResource( 22 )
nodes/fragment/9/position = Vector2( 120, 100 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 8, 0, 7, 1, 3, 0, 7, 0, 7, 0, 5, 0, 9, 0, 5, 1 )

[sub_resource type="ShaderMaterial" id=24]
shader = SubResource( 23 )

[sub_resource type="VisualShaderNodeCustom" id=25]
default_input_values = [ 1, 0.0, 2, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 9 )

[sub_resource type="VisualShaderNodeScalarConstant" id=26]
constant = 0.4

[sub_resource type="VisualShaderNodeVec3Constant" id=27]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShader" id=28]
code = "shader_type canvas_item;


// RotateUV

vec3 r0tateUVFunc(vec3 _uv_r0tate, vec2 _pivot_r0tate, float _r0tation_r0tate){
	//_r0tation_r0tate = radians(_r0tationDeg_r0tate);
	vec2 _r0tAngle = vec2(cos(_r0tation_r0tate), sin(_r0tation_r0tate));
	_uv_r0tate.xy -= _pivot_r0tate;
	_uv_r0tate.xy = vec2((_uv_r0tate.x*_r0tAngle.x-_uv_r0tate.y*_r0tAngle.y),(_uv_r0tate.x*_r0tAngle.y+_uv_r0tate.y*_r0tAngle.x));
	_uv_r0tate.xy += _pivot_r0tate;
	return _uv_r0tate;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:8
	float n_out8p0 = 0.400000;

// Vector:9
	vec3 n_out9p0 = vec3(0.500000, 0.500000, 0.000000);

// RotateUV:7
	vec3 n_out7p0;
	{
		n_out7p0 = r0tateUVFunc(n_out3p0, n_out9p0.xy, n_out8p0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out7p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -390, -60 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -100, -40 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 400, 0 )
nodes/fragment/7/node = SubResource( 25 )
nodes/fragment/7/position = Vector2( 140, 0 )
nodes/fragment/8/node = SubResource( 26 )
nodes/fragment/8/position = Vector2( -120, 40 )
nodes/fragment/9/node = SubResource( 27 )
nodes/fragment/9/position = Vector2( -240, 120 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 3, 0, 7, 0, 7, 0, 5, 0, 8, 0, 7, 1, 9, 0, 7, 2 )

[sub_resource type="ShaderMaterial" id=29]
shader = SubResource( 28 )

[sub_resource type="VisualShaderNodeVec3Constant" id=30]
constant = Vector3( 2, 3, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=31]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeCustom" id=32]
default_input_values = [ 1, Vector3( 1, 1, 0 ), 2, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 7 )

[sub_resource type="VisualShader" id=33]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Vector:10
	vec3 n_out10p0 = vec3(2.000000, 3.000000, 0.000000);

// Vector:11
	vec3 n_out11p0 = vec3(0.500000, 0.500000, 0.000000);

// ScaleUV:9
	vec3 n_out9p0;
	{
		n_out9p0.xy = (n_out3p0.xy - n_out11p0.xy) * n_out10p0.xy + n_out11p0.xy;
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out9p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -380, -159 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -100, -60 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 400, 0 )
nodes/fragment/9/node = SubResource( 32 )
nodes/fragment/9/position = Vector2( 180, 0 )
nodes/fragment/10/node = SubResource( 30 )
nodes/fragment/10/position = Vector2( -220, 40 )
nodes/fragment/11/node = SubResource( 31 )
nodes/fragment/11/position = Vector2( -220, 140 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 9, 0, 5, 0, 3, 0, 9, 0, 10, 0, 9, 1, 11, 0, 9, 2 )

[sub_resource type="ShaderMaterial" id=34]
shader = SubResource( 33 )

[sub_resource type="VisualShaderNodeCustom" id=35]
default_input_values = [ 1, Vector3( 1, 1, 0 ), 2, Vector3( 0, 0, 0 ), 3, Vector3( 0.5, 0.5, 0 ), 4, Vector3( 0, 0, 0 ) ]
script = ExtResource( 8 )

[sub_resource type="VisualShaderNodeVec3Constant" id=36]
constant = Vector3( 1, 1, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=37]

[sub_resource type="VisualShaderNodeVec3Constant" id=38]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=39]

[sub_resource type="VisualShader" id=40]
code = "shader_type canvas_item;


// SphericalUV

vec2 sphericalFunc(vec2 _uv_shprc1, vec2 _p0s_shprc1, vec2 _rad_shprc1, vec2 _sp1n_shprc1, vec2 _l0c_p0s_shprc1){
	vec2 _temp_p = (_uv_shprc1 - _p0s_shprc1) * 2.0;
	float _temp_rad = length((_temp_p - _l0c_p0s_shprc1) * _rad_shprc1) + 0.0001;
	float _temp_f = (1.0 - sqrt(1.0 - _temp_rad)) / _temp_rad;
	return mod(vec2((_temp_p.x * 0.5 * _temp_f + _sp1n_shprc1.x) + 0.5,
					(_temp_p.y * 0.5 * _temp_f + _sp1n_shprc1.y) + 0.5), vec2(1.0));
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Vector:13
	vec3 n_out13p0 = vec3(1.000000, 1.000000, 0.000000);

// Vector:14
	vec3 n_out14p0 = vec3(0.000000, 0.000000, 0.000000);

// Vector:15
	vec3 n_out15p0 = vec3(0.500000, 0.500000, 0.000000);

// Vector:16
	vec3 n_out16p0 = vec3(0.000000, 0.000000, 0.000000);

// SphericalUV:12
	vec3 n_out12p0;
	{
		n_out12p0.xy = sphericalFunc(n_out3p0.xy, n_out15p0.xy, n_out13p0.xy, n_out14p0.xy, n_out16p0.xy);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out12p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -68, -84 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -20, -180 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 400, 0 )
nodes/fragment/12/node = SubResource( 35 )
nodes/fragment/12/position = Vector2( 200, 0 )
nodes/fragment/13/node = SubResource( 36 )
nodes/fragment/13/position = Vector2( -200, -100 )
nodes/fragment/14/node = SubResource( 37 )
nodes/fragment/14/position = Vector2( -200, 0 )
nodes/fragment/15/node = SubResource( 38 )
nodes/fragment/15/position = Vector2( -200, 100 )
nodes/fragment/16/node = SubResource( 39 )
nodes/fragment/16/position = Vector2( -200, 200 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 12, 0, 5, 0, 3, 0, 12, 0, 13, 0, 12, 1, 14, 0, 12, 2, 15, 0, 12, 3, 16, 0, 12, 4 )

[sub_resource type="ShaderMaterial" id=41]
shader = SubResource( 40 )

[sub_resource type="VisualShaderNodeCustom" id=42]
default_input_values = [ 1, 2.0, 2, 2.0, 3, 0.0 ]
script = ExtResource( 10 )

[sub_resource type="VisualShaderNodeScalarConstant" id=43]

[sub_resource type="VisualShaderNodeScalarConstant" id=44]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=45]
constant = 2.0

[sub_resource type="VisualShader" id=46]
code = "shader_type canvas_item;


// TileUV

vec2 t1leMapUV(vec2 _uv_t1le_t1mp, float _w1dth_t1mp, float _he1ght_t1mp, float _t1le_nmbr_t1mp){
	_t1le_nmbr_t1mp = min(max(floor(_t1le_nmbr_t1mp), 0.0), _w1dth_t1mp * _he1ght_t1mp - 1.0);
	vec2 tcrcp = vec2(1.0) / vec2(_w1dth_t1mp, _he1ght_t1mp);
	float ty =floor(_t1le_nmbr_t1mp * tcrcp.x);
	float tx = _t1le_nmbr_t1mp - _w1dth_t1mp * ty;
	return (_uv_t1le_t1mp + vec2(tx, ty)) * tcrcp;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:15
	float n_out15p0 = 2.000000;

// Scalar:16
	float n_out16p0 = 2.000000;

// Scalar:14
	float n_out14p0 = 0.000000;

// TileUV:13
	vec3 n_out13p0;
	{
		n_out13p0.xy = t1leMapUV(n_out3p0.xy, n_out15p0, n_out16p0, n_out14p0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out13p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -308, -151 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -20, -100 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 400, 0 )
nodes/fragment/13/node = SubResource( 42 )
nodes/fragment/13/position = Vector2( 200, 0 )
nodes/fragment/14/node = SubResource( 43 )
nodes/fragment/14/position = Vector2( -40, 160 )
nodes/fragment/15/node = SubResource( 44 )
nodes/fragment/15/position = Vector2( -40, 0 )
nodes/fragment/16/node = SubResource( 45 )
nodes/fragment/16/position = Vector2( -40, 80 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 13, 0, 5, 0, 3, 0, 13, 0, 14, 0, 13, 3, 15, 0, 13, 1, 16, 0, 13, 2 )

[sub_resource type="ShaderMaterial" id=47]
shader = SubResource( 46 )

[sub_resource type="VisualShaderNodeCustom" id=48]
default_input_values = [ 1, Vector3( 0, 0, 0 ) ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarConstant" id=49]
constant = 0.2

[sub_resource type="VisualShader" id=50]
code = "shader_type canvas_item;


// TilingAndOffsetUV

vec2 ti1ingN0ffsetFunc(vec2 _uv_tN0, vec2 _offset_tN0){
	return vec2(mod(_uv_tN0.x + _offset_tN0.x, 1.0), mod(_uv_tN0.y + _offset_tN0.y, 1.0));
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:18
	float n_out18p0 = 0.200000;

// TilingAndOffsetUV:17
	vec3 n_out17p0;
	{
		n_out17p0 = vec3(ti1ingN0ffsetFunc(n_out3p0.xy, vec3(n_out18p0).xy), 0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out17p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -308, -151 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -20, -40 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 400, 0 )
nodes/fragment/17/node = SubResource( 48 )
nodes/fragment/17/position = Vector2( 180, 0 )
nodes/fragment/18/node = SubResource( 49 )
nodes/fragment/18/position = Vector2( -40, 80 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 17, 0, 5, 0, 3, 0, 17, 0, 18, 0, 17, 1 )

[sub_resource type="ShaderMaterial" id=51]
shader = SubResource( 50 )

[sub_resource type="VisualShaderNodeScalarConstant" id=52]
constant = 0.2

[sub_resource type="VisualShaderNodeCustom" id=53]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, Vector3( 1, 1, 0 ), 3, Vector3( 0.5, 0.5, 0 ), 4, 0, 5, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 11 )

[sub_resource type="VisualShaderNodeVec3Constant" id=54]
constant = Vector3( 0.1, 0.1, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=55]
constant = Vector3( 2, 2, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=56]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=57]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShader" id=58]
code = "shader_type canvas_item;


// TransformUV

vec2 transformUVFunc(vec2 _uv_transform, vec2 _scale_uv_, vec2 _pivot_scale_uv_, vec2 _offset_uv_, float _rotate_uv, vec2 _pivot_rotate_uv_){
	_uv_transform -= _offset_uv_; // offset
	_uv_transform = (_uv_transform - _pivot_scale_uv_) * _scale_uv_ + _pivot_scale_uv_; // zoom
	vec2 _rot_uv_angl = vec2(cos(_rotate_uv), sin(_rotate_uv));
	mat2 _rot_matrix = mat2(vec2(_rot_uv_angl.x, - _rot_uv_angl.y), vec2(_rot_uv_angl.y, _rot_uv_angl.x));
	_uv_transform = (_uv_transform - _pivot_rotate_uv_) * _rot_matrix + _pivot_rotate_uv_; // rotate
	return _uv_transform;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Vector:19
	vec3 n_out19p0 = vec3(0.100000, 0.100000, 0.000000);

// Vector:20
	vec3 n_out20p0 = vec3(2.000000, 2.000000, 0.000000);

// Vector:22
	vec3 n_out22p0 = vec3(0.500000, 0.500000, 0.000000);

// Scalar:15
	float n_out15p0 = 0.200000;

// Vector:21
	vec3 n_out21p0 = vec3(0.500000, 0.500000, 0.000000);

// TransformUV:18
	vec3 n_out18p0;
	{
		n_out18p0.xy = transformUVFunc(n_out3p0.xy, n_out20p0.xy, n_out22p0.xy, n_out19p0.xy, n_out15p0, n_out21p0.xy);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out18p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -645, -238 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, -20 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -120, -240 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 340, -20 )
nodes/fragment/15/node = SubResource( 52 )
nodes/fragment/15/position = Vector2( -300, 140 )
nodes/fragment/18/node = SubResource( 53 )
nodes/fragment/18/position = Vector2( 120, -20 )
nodes/fragment/19/node = SubResource( 54 )
nodes/fragment/19/position = Vector2( -300, -160 )
nodes/fragment/20/node = SubResource( 55 )
nodes/fragment/20/position = Vector2( -300, -60 )
nodes/fragment/21/node = SubResource( 56 )
nodes/fragment/21/position = Vector2( -300, 220 )
nodes/fragment/22/node = SubResource( 57 )
nodes/fragment/22/position = Vector2( -300, 40 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 18, 0, 5, 0, 3, 0, 18, 0, 19, 0, 18, 1, 20, 0, 18, 2, 22, 0, 18, 3, 15, 0, 18, 4, 21, 0, 18, 5 )

[sub_resource type="ShaderMaterial" id=59]
shader = SubResource( 58 )

[sub_resource type="VisualShaderNodeCustom" id=60]
default_input_values = [ 1, 1.0, 2, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 12 )

[sub_resource type="VisualShaderNodeVec3Constant" id=61]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=62]
constant = 1.0

[sub_resource type="VisualShader" id=63]
code = "shader_type canvas_item;


// TwirlUV

vec3 twirlUVFunc(vec2 _uv_twirlUVFunc, vec2 _pivot_twirlUVFunc, float _amount_twirlUVFunc){
	_uv_twirlUVFunc -= _pivot_twirlUVFunc;
	float _angle_twirlUVFunc = atan(_uv_twirlUVFunc.y, _uv_twirlUVFunc.x);
	float _radiusTemp_twirlUVFunc = length(_uv_twirlUVFunc);
	_angle_twirlUVFunc += _radiusTemp_twirlUVFunc * _amount_twirlUVFunc;
	return vec3(_radiusTemp_twirlUVFunc * vec2(cos(_angle_twirlUVFunc), sin(_angle_twirlUVFunc)) + 0.5, 0.0);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:25
	float n_out25p0 = 1.000000;

// Vector:24
	vec3 n_out24p0 = vec3(0.500000, 0.500000, 0.000000);

// TwirlUV:23
	vec3 n_out23p0;
	{
		n_out23p0 = twirlUVFunc(n_out3p0.xy, n_out24p0.xy, n_out25p0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out23p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -493, -240 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 520, -20 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -100, -100 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 320, -20 )
nodes/fragment/23/node = SubResource( 60 )
nodes/fragment/23/position = Vector2( 100, -20 )
nodes/fragment/24/node = SubResource( 61 )
nodes/fragment/24/position = Vector2( -280, 60 )
nodes/fragment/25/node = SubResource( 62 )
nodes/fragment/25/position = Vector2( -140, -20 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 23, 0, 5, 0, 3, 0, 23, 0, 24, 0, 23, 2, 25, 0, 23, 1 )

[sub_resource type="ShaderMaterial" id=64]
shader = SubResource( 63 )

[sub_resource type="VisualShaderNodeCustom" id=65]
default_input_values = [ 1, 0, 2, 0, 3, 0, 4, 0, 5, 1, 6, 0 ]
script = ExtResource( 13 )

[sub_resource type="VisualShaderNodeInput" id=66]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=67]
constant = 5.0

[sub_resource type="VisualShaderNodeScalarConstant" id=68]
constant = -0.2

[sub_resource type="VisualShaderNodeScalarConstant" id=69]
constant = 0.01

[sub_resource type="VisualShaderNodeScalarConstant" id=70]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=71]
constant = 5.0

[sub_resource type="VisualShader" id=72]
code = "shader_type canvas_item;


// DistortionUVAnimated

vec2 d1stort1onUVAnimatedFunc(vec2 _uv_d1st, float _d1stX_d1st, float _d1stY_d1st, float _waveX_d1st, float _waveY_d1st, float _spd_d1st, float _t1me_d1st){
	_uv_d1st.x += sin(_uv_d1st.y * _waveX_d1st + _t1me_d1st * _spd_d1st) * _d1stX_d1st;
	_uv_d1st.y += sin(_uv_d1st.x * _waveY_d1st + _t1me_d1st * _spd_d1st) * _d1stY_d1st;
	return _uv_d1st;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:26
	float n_out26p0 = 5.000000;

// Scalar:30
	float n_out30p0 = 5.000000;

// Scalar:27
	float n_out27p0 = -0.200000;

// Scalar:28
	float n_out28p0 = 0.010000;

// Scalar:29
	float n_out29p0 = 1.000000;

// Input:25
	float n_out25p0 = TIME;

// DistortionUVAnimated:24
	vec3 n_out24p0;
	{
		n_out24p0.xy = d1stort1onUVAnimatedFunc(n_out3p0.xy, n_out27p0, n_out28p0, n_out26p0, n_out30p0, n_out29p0, n_out25p0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out24p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -539, -125 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 520, -20 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -140, -200 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 320, -20 )
nodes/fragment/24/node = SubResource( 65 )
nodes/fragment/24/position = Vector2( 60, -20 )
nodes/fragment/25/node = SubResource( 66 )
nodes/fragment/25/position = Vector2( -160, 280 )
nodes/fragment/26/node = SubResource( 67 )
nodes/fragment/26/position = Vector2( -180, -120 )
nodes/fragment/27/node = SubResource( 68 )
nodes/fragment/27/position = Vector2( -180, 40 )
nodes/fragment/28/node = SubResource( 69 )
nodes/fragment/28/position = Vector2( -180, 120 )
nodes/fragment/29/node = SubResource( 70 )
nodes/fragment/29/position = Vector2( -180, 200 )
nodes/fragment/30/node = SubResource( 71 )
nodes/fragment/30/position = Vector2( -180, -40 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 24, 0, 5, 0, 3, 0, 24, 0, 25, 0, 24, 6, 26, 0, 24, 1, 29, 0, 24, 5, 28, 0, 24, 4, 27, 0, 24, 3, 30, 0, 24, 2 )

[sub_resource type="ShaderMaterial" id=73]
shader = SubResource( 72 )

[sub_resource type="VisualShaderNodeScalarConstant" id=74]
constant = 0.7

[sub_resource type="VisualShaderNodeScalarConstant" id=75]
constant = 0.065

[sub_resource type="VisualShaderNodeCustom" id=76]
default_input_values = [ 1, 0.5, 2, 4.0, 3, 0.7, 4, 0.065, 5, 0 ]
script = ExtResource( 14 )

[sub_resource type="VisualShaderNodeInput" id=77]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=78]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=79]
constant = 4.0

[sub_resource type="VisualShader" id=80]
code = "shader_type canvas_item;


// DoodleUV

float hash2D00dle(vec2 _p_hash_d00dle) {
	return fract(1e4 * sin(17.0 * _p_hash_d00dle.x + _p_hash_d00dle.y * 0.1) * (0.1 + abs(sin(_p_hash_d00dle.y * 13.0 + _p_hash_d00dle.x))));
}

float noiseD00dle(vec2 _seed_noise_d00dle){
	vec2 i = floor(_seed_noise_d00dle);
	vec2 f = fract(_seed_noise_d00dle);
	float _a = hash2D00dle(i);
	float _b = hash2D00dle(i + vec2(1.0, 0.0));
	float _c = hash2D00dle(i + vec2(0.0, 1.0));
	float _d = hash2D00dle(i + vec2(1.0, 1.0));
	vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(_a, _b, u.x) + (_c - _a) * u.y * (1.0 - u.x) + (_d - _b) * u.x * u.y;
}

vec2 d00dleUVFunc(vec2 _uv_d00dle, float _max_offset_d00dle, float _time_d00dle, float _frame_time_d00dle, int _frame_count_d00dle, float _scale_d00dle){
	float timeValueD00dle = mod(floor(_time_d00dle / _frame_time_d00dle), float(_frame_count_d00dle)) + 1.0;
	return _uv_d00dle + vec2(noiseD00dle((_uv_d00dle + timeValueD00dle) * _scale_d00dle) * 2.0 - 1.0) * _max_offset_d00dle;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:8
	float n_out8p0 = 0.500000;

// Scalar:9
	float n_out9p0 = 4.000000;

// Scalar:10
	float n_out10p0 = 0.700000;

// Scalar:11
	float n_out11p0 = 0.065000;

// Input:7
	float n_out7p0 = TIME;

// DoodleUV:12
	vec3 n_out12p0;
	{
		n_out12p0.xy = d00dleUVFunc(n_out3p0.xy, n_out11p0, n_out7p0, n_out8p0, int(n_out9p0), n_out10p0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out12p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -562, -94 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -100, -160 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 340, 0 )
nodes/fragment/7/node = SubResource( 77 )
nodes/fragment/7/position = Vector2( -100, 240 )
nodes/fragment/8/node = SubResource( 78 )
nodes/fragment/8/position = Vector2( -120, -80 )
nodes/fragment/9/node = SubResource( 79 )
nodes/fragment/9/position = Vector2( -120, 0 )
nodes/fragment/10/node = SubResource( 74 )
nodes/fragment/10/position = Vector2( -120, 80 )
nodes/fragment/11/node = SubResource( 75 )
nodes/fragment/11/position = Vector2( -120, 160 )
nodes/fragment/12/node = SubResource( 76 )
nodes/fragment/12/position = Vector2( 140, 0 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 3, 0, 12, 0, 8, 0, 12, 1, 9, 0, 12, 2, 10, 0, 12, 3, 11, 0, 12, 4, 7, 0, 12, 5, 12, 0, 5, 0 )

[sub_resource type="ShaderMaterial" id=81]
shader = SubResource( 80 )

[sub_resource type="VisualShaderNodeVec3Constant" id=82]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeCustom" id=83]
default_input_values = [ 1, 0.5, 2, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 17 )

[sub_resource type="VisualShaderNodeScalarConstant" id=84]
constant = 0.5

[sub_resource type="VisualShader" id=85]
code = "shader_type canvas_item;


// RotateUVAnimated

vec2 r0tateUVAnimatedFunc(vec2 _uv_r0tate, vec2 _pivot_r0tate, float _r0tation_r0tate, float _r0tSpeed_r0tate, float _t1me_r0tate){
	_r0tation_r0tate += _t1me_r0tate * _r0tSpeed_r0tate;
	//_r0tation_r0tate = radians(_r0tationDeg_r0tate);
	vec2 _r0tAngle = vec2(cos(_r0tation_r0tate), sin(_r0tation_r0tate));
	_uv_r0tate -= _pivot_r0tate;
	_uv_r0tate = vec2((_uv_r0tate.x*_r0tAngle.x-_uv_r0tate.y*_r0tAngle.y),(_uv_r0tate.x*_r0tAngle.y+_uv_r0tate.y*_r0tAngle.x));
	_uv_r0tate += _pivot_r0tate;
	return _uv_r0tate;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:9
	float n_out9p0 = 0.500000;

// Vector:10
	vec3 n_out10p0 = vec3(0.500000, 0.500000, 0.000000);

// Input:7
	float n_out7p0 = TIME;

// RotateUVAnimated:8
	vec3 n_out8p0;
	{
		n_out8p0 = vec3(r0tateUVAnimatedFunc(n_out3p0.xy, n_out10p0.xy, 0.0, n_out9p0, n_out7p0), 0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out8p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -557, -173 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -100, -100 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 340, 0 )
nodes/fragment/7/node = SubResource( 77 )
nodes/fragment/7/position = Vector2( -100, 160 )
nodes/fragment/8/node = SubResource( 83 )
nodes/fragment/8/position = Vector2( 100, 0 )
nodes/fragment/9/node = SubResource( 84 )
nodes/fragment/9/position = Vector2( -120, -20 )
nodes/fragment/10/node = SubResource( 82 )
nodes/fragment/10/position = Vector2( -260, 60 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 8, 0, 5, 0, 3, 0, 8, 0, 7, 0, 8, 3, 9, 0, 8, 1, 10, 0, 8, 2 )

[sub_resource type="ShaderMaterial" id=86]
shader = SubResource( 85 )

[sub_resource type="VisualShaderNodeScalarConstant" id=87]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id=88]
default_input_values = [ 0, 1.0, 1, 1.0 ]
script = ExtResource( 16 )

[sub_resource type="VisualShaderNodeScalarConstant" id=89]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id=90]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeCustom" id=91]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 0.0, 3, 0.0 ]
script = ExtResource( 19 )

[sub_resource type="VisualShader" id=92]
code = "shader_type canvas_item;


// SwirlUV

vec2 swirlUVFunc(vec2 _uv_sw1rl, float _t1me_sw1rl, vec2 _p1vot_sw1rl, float _amount_sw1rl){
	float _rotation_index_sw1rl = _amount_sw1rl * length(_uv_sw1rl - _p1vot_sw1rl) * _t1me_sw1rl;
	_uv_sw1rl -= _p1vot_sw1rl;
	_uv_sw1rl *= mat2(vec2(cos(_rotation_index_sw1rl), - sin(_rotation_index_sw1rl)),
										vec2(sin(_rotation_index_sw1rl), cos(_rotation_index_sw1rl)));
	_uv_sw1rl += _p1vot_sw1rl;
	return _uv_sw1rl;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Vector:13
	vec3 n_out13p0 = vec3(0.500000, 0.500000, 0.000000);

// Scalar:10
	float n_out10p0 = 1.000000;

// Scalar:12
	float n_out12p0 = 10.000000;

// SinTIME:11
	float n_in11p0 = 1.00000;
	float n_out11p0;
	{
		n_out11p0 = n_out12p0 * sin(n_in11p0 * TIME);
	}

// SwirlUV:9
	vec3 n_out9p0;
	{
		n_out9p0.xy = swirlUVFunc(n_out3p0.xy, n_out11p0, n_out13p0.xy, n_out10p0);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out9p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -557, -173 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -40, -120 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 340, 0 )
nodes/fragment/9/node = SubResource( 91 )
nodes/fragment/9/position = Vector2( 140, 0 )
nodes/fragment/10/node = SubResource( 87 )
nodes/fragment/10/position = Vector2( -80, 60 )
nodes/fragment/11/node = SubResource( 88 )
nodes/fragment/11/position = Vector2( -80, 140 )
nodes/fragment/12/node = SubResource( 89 )
nodes/fragment/12/position = Vector2( -280, 180 )
nodes/fragment/13/node = SubResource( 90 )
nodes/fragment/13/position = Vector2( -220, -40 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 3, 0, 9, 0, 9, 0, 5, 0, 10, 0, 9, 2, 11, 0, 9, 3, 12, 0, 11, 1, 13, 0, 9, 1 )

[sub_resource type="ShaderMaterial" id=93]
shader = SubResource( 92 )

[sub_resource type="VisualShaderNodeCustom" id=94]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 0.0 ]
script = ExtResource( 15 )

[sub_resource type="VisualShaderNodeInput" id=95]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=96]
constant = 0.5

[sub_resource type="VisualShader" id=97]
code = "shader_type canvas_item;


// TilingAndOffsetUVAnimated

vec2 tilingNoffsetAnimatedFunc(vec2 _uv_tN0A, float _t1me_tN0A, vec2 _offset_tN0A){
	return vec2(mod((_uv_tN0A.x + _offset_tN0A.x * _t1me_tN0A), 1.0), mod((_uv_tN0A.y + _offset_tN0A.y * _t1me_tN0A), 1.0));
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:15
	float n_out15p0 = 0.500000;

// Input:14
	float n_out14p0 = TIME;

// TilingAndOffsetUVAnimated:13
	vec3 n_out13p0;
	{
		n_out13p0.xy = n_out13p0.xy + tilingNoffsetAnimatedFunc(n_out3p0.xy, n_out14p0, vec3(n_out15p0).xy);
	}

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out13p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -557, -173 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -120, -40 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 340, 0 )
nodes/fragment/13/node = SubResource( 94 )
nodes/fragment/13/position = Vector2( 60, 0 )
nodes/fragment/14/node = SubResource( 95 )
nodes/fragment/14/position = Vector2( -140, 120 )
nodes/fragment/15/node = SubResource( 96 )
nodes/fragment/15/position = Vector2( -160, 40 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 3, 0, 13, 0, 13, 0, 5, 0, 15, 0, 13, 1, 14, 0, 13, 2 )

[sub_resource type="ShaderMaterial" id=98]
shader = SubResource( 97 )

[sub_resource type="VisualShaderNodeCustom" id=99]
script = ExtResource( 18 )

[sub_resource type="VisualShader" id=100]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// HashRandom1d:17
	float n_out17p0;
	{
		n_out17p0 = fract(sin(dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333))) * 1e4);
	}

// Output:0
	COLOR.rgb = vec3(n_out17p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -140, -83 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( 60, 0 )
nodes/fragment/17/node = SubResource( 99 )
nodes/fragment/17/position = Vector2( 280, 0 )
nodes/fragment/connections = PoolIntArray( 3, 0, 17, 0, 17, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=101]
shader = SubResource( 100 )

[sub_resource type="VisualShaderNodeCustom" id=102]
script = ExtResource( 20 )

[sub_resource type="VisualShader" id=103]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// HashRandom2d:18
	float n_out18p0;
	{
		n_out18p0 = fract(1e4 * sin(17.0 * n_out3p0.x + n_out3p0.y * 0.1) * (0.1 + abs(sin(n_out3p0.y * 13.0 + n_out3p0.x))));
	}

// Output:0
	COLOR.rgb = vec3(n_out18p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -140, -83 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 480, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( 0, 0 )
nodes/fragment/18/node = SubResource( 102 )
nodes/fragment/18/position = Vector2( 220, 0 )
nodes/fragment/connections = PoolIntArray( 3, 0, 18, 0, 18, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=104]
shader = SubResource( 103 )

[sub_resource type="VisualShaderNodeCustom" id=105]
script = ExtResource( 21 )

[sub_resource type="VisualShader" id=106]
code = "shader_type canvas_item;


// HashRandom2dVec

vec2 hash2v(vec2 co) {
	float _tmp_h = dot(co, vec2(12.9898, 78.233));
	return fract(vec2(sin(_tmp_h), cos(_tmp_h)) * 43758.5453) * 2.0 - 1.0;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// HashRandom2dVec:19
	vec3 n_out19p0;
	{
		n_out19p0.xy = hash2v(n_out3p0.xy);
	}

// Output:0
	COLOR.rgb = n_out19p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -289, -91 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 480, 0 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( 0, 0 )
nodes/fragment/19/node = SubResource( 105 )
nodes/fragment/19/position = Vector2( 200, 0 )
nodes/fragment/connections = PoolIntArray( 3, 0, 19, 0, 19, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=107]
shader = SubResource( 106 )

[sub_resource type="VisualShaderNodeCustom" id=609]
script = ExtResource( 22 )

[sub_resource type="VisualShader" id=109]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// RandomFloat:2
	float n_out2p0;
	{
		n_out2p0 = fract(sin(dot(UV.xy, vec2(12.9898, 78.233))) * 43758.5453123);
	}

// Output:0
	COLOR.rgb = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -289, -91 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 0 )
nodes/fragment/2/node = SubResource( 609 )
nodes/fragment/2/position = Vector2( 200, 0 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=110]
shader = SubResource( 109 )

[sub_resource type="VisualShaderNodeInput" id=111]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id=115]

[sub_resource type="VisualShaderNodeScalarConstant" id=116]

[sub_resource type="VisualShaderNodeCustom" id=117]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, 0.0 ]
script = ExtResource( 24 )

[sub_resource type="VisualShader" id=118]
code = "shader_type canvas_item;


// RandomGoldRatio

float randomGoldRatioFunc(vec2 _coord_gn, vec2 _scale_gn, float _seed_gn){
	float PHI = 1.6180339887; 
	float PI  = 3.1415926536;
	float SQ2 = 1.4142135624;
	return fract(tan(distance((_coord_gn+_scale_gn)*(_seed_gn+PHI), vec2(PHI, PI)))*SQ2);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:21
	vec3 n_out21p0 = vec3(UV, 0.0);

// Vector:24
	vec3 n_out24p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:25
	float n_out25p0 = 0.000000;

// RandomGoldRatio:26
	float n_out26p0;
	{
		n_out26p0 = randomGoldRatioFunc(n_out21p0.xy, n_out24p0.xy, n_out25p0)
	}

// Output:0
	COLOR.rgb = vec3(n_out26p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -140, -83 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 460, 0 )
nodes/fragment/21/node = SubResource( 111 )
nodes/fragment/21/position = Vector2( -20, -80 )
nodes/fragment/24/node = SubResource( 115 )
nodes/fragment/24/position = Vector2( -180, 0 )
nodes/fragment/25/node = SubResource( 116 )
nodes/fragment/25/position = Vector2( -20, 100 )
nodes/fragment/26/node = SubResource( 117 )
nodes/fragment/26/position = Vector2( 200, 0 )
nodes/fragment/connections = PoolIntArray( 21, 0, 26, 0, 24, 0, 26, 1, 25, 0, 26, 2, 26, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=119]
shader = SubResource( 118 )

[sub_resource type="VisualShaderNodeCustom" id=120]
default_input_values = [ 1, 0.0, 2, 1.0, 3, -1.0, 4, 1.0 ]
script = ExtResource( 26 )

[sub_resource type="VisualShaderNodeTexture" id=121]
source = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=122]

[sub_resource type="VisualShaderNodeScalarConstant" id=123]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=124]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=125]
constant = -1.0

[sub_resource type="VisualShader" id=126]
code = "shader_type canvas_item;


// Remap

vec3 remapFunc(vec3 _inpt_r4p, vec2 _fr0m_r4p, vec2 _t0_r4p){
	return _t0_r4p.x + ((_inpt_r4p - _fr0m_r4p.x) * (_t0_r4p.y - _t0_r4p.x)) / (_fr0m_r4p.y - _fr0m_r4p.x);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:21
	vec3 n_out21p0 = vec3(UV, 0.0);

// Scalar:26
	float n_out26p0 = 0.000000;

// Scalar:27
	float n_out27p0 = 1.000000;

// Scalar:29
	float n_out29p0 = -1.000000;

// Scalar:28
	float n_out28p0 = 1.000000;

// Remap:24
	vec3 n_out24p0;
	{
		n_out24p0 = remapFunc(n_out21p0, vec2(n_out26p0, n_out27p0), vec2(n_out29p0, n_out28p0));
	}

// Texture:25
	vec3 n_out25p0;
	float n_out25p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out24p0.xy);
		n_out25p0 = _tex_read.rgb;
		n_out25p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out25p0;
	COLOR.a = n_out25p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -549, -123 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 0 )
nodes/fragment/21/node = SubResource( 111 )
nodes/fragment/21/position = Vector2( 0, -100 )
nodes/fragment/24/node = SubResource( 120 )
nodes/fragment/24/position = Vector2( 200, 0 )
nodes/fragment/25/node = SubResource( 121 )
nodes/fragment/25/position = Vector2( 400, 0 )
nodes/fragment/26/node = SubResource( 122 )
nodes/fragment/26/position = Vector2( -20, -20 )
nodes/fragment/27/node = SubResource( 123 )
nodes/fragment/27/position = Vector2( -20, 60 )
nodes/fragment/28/node = SubResource( 124 )
nodes/fragment/28/position = Vector2( -20, 220 )
nodes/fragment/29/node = SubResource( 125 )
nodes/fragment/29/position = Vector2( -20, 140 )
nodes/fragment/connections = PoolIntArray( 21, 0, 24, 0, 24, 0, 25, 0, 25, 0, 0, 0, 25, 1, 0, 1, 26, 0, 24, 1, 27, 0, 24, 2, 29, 0, 24, 3, 28, 0, 24, 4 )

[sub_resource type="ShaderMaterial" id=127]
shader = SubResource( 126 )

[sub_resource type="VisualShaderNodeCustom" id=128]
default_input_values = [ 0, 1.0, 1, 1.0 ]
script = ExtResource( 16 )

[sub_resource type="VisualShaderNodeScalarConstant" id=129]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=130]
constant = 1.0

[sub_resource type="VisualShader" id=131]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Scalar:27
	float n_out27p0 = 1.000000;

// Scalar:28
	float n_out28p0 = 1.000000;

// SinTIME:26
	float n_out26p0;
	{
		n_out26p0 = n_out28p0 * sin(n_out27p0 * TIME);
	}

// Output:0
	COLOR.rgb = vec3(n_out26p0);
	COLOR.a = n_out26p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -549, -123 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 0 )
nodes/fragment/26/node = SubResource( 128 )
nodes/fragment/26/position = Vector2( 340, 0 )
nodes/fragment/27/node = SubResource( 129 )
nodes/fragment/27/position = Vector2( 100, -40 )
nodes/fragment/28/node = SubResource( 130 )
nodes/fragment/28/position = Vector2( 100, 60 )
nodes/fragment/connections = PoolIntArray( 26, 0, 0, 1, 26, 0, 0, 0, 28, 0, 26, 1, 27, 0, 26, 0 )

[sub_resource type="ShaderMaterial" id=132]
shader = SubResource( 131 )

[sub_resource type="VisualShaderNodeCustom" id=133]
default_input_values = [ 0, 1.0, 1, 0.0 ]
script = ExtResource( 25 )

[sub_resource type="VisualShaderNodeScalarConstant" id=134]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=135]
input_name = "time"

[sub_resource type="VisualShader" id=136]
code = "shader_type canvas_item;


// vec2Compose

vec2 vec2ComposeFunc(float _vec2_length, float _vec2_angl_rad){
	return vec2(cos(_vec2_angl_rad), sin(_vec2_angl_rad)) * _vec2_length;
}


void vertex() {
// Output:0

}

void fragment() {
// Scalar:3
	float n_out3p0 = 1.000000;

// Input:4
	float n_out4p0 = TIME;

// vec2Compose:2
	vec3 n_out2p0;
	{
		n_out2p0.xy = vec2ComposeFunc(n_out3p0, n_out4p0);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -549, -123 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 580, 0 )
nodes/fragment/2/node = SubResource( 133 )
nodes/fragment/2/position = Vector2( 340, 0 )
nodes/fragment/3/node = SubResource( 134 )
nodes/fragment/3/position = Vector2( 120, -40 )
nodes/fragment/4/node = SubResource( 135 )
nodes/fragment/4/position = Vector2( 140, 60 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 1 )

[sub_resource type="ShaderMaterial" id=137]
shader = SubResource( 136 )

[sub_resource type="VisualShaderNodeCustom" id=138]
default_input_values = [ 2, -1.0, 3, 0.5 ]
script = ExtResource( 27 )

[sub_resource type="VisualShaderNodeInput" id=139]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=140]
input_name = "texture"

[sub_resource type="VisualShaderNodeScalarConstant" id=141]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=142]
constant = 0.5

[sub_resource type="VisualShader" id=143]
code = "shader_type canvas_item;


// BlurBasic

vec4 blur9sampleFunc(sampler2D _samp_b1ur, vec2 _uv_b1ur, float _lod_b1ur, float _rad_b1ur){
	vec4 _c01r_b1ur = vec4(0.0);
	if (_lod_b1ur < 0.0){
		_c01r_b1ur = texture(_samp_b1ur, _uv_b1ur);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(0, - _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(0, _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, 0) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, 0) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, - _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, -_rad_b1ur) * 0.01);
	}else{
		_c01r_b1ur = textureLod(_samp_b1ur, _uv_b1ur, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(0, - _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(0, _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, 0) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, 0) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, - _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, -_rad_b1ur) * 0.01, _lod_b1ur);
	}
	_c01r_b1ur /= 9.0;
	return _c01r_b1ur;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:7

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Scalar:8
	float n_out8p0 = -1.000000;

// Scalar:9
	float n_out9p0 = 0.500000;

// BlurBasic:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 n_out5p0n_out5p1 = blur9sampleFunc(TEXTURE, n_out6p0.xy, n_out8p0, n_out9p0);
		n_out5p0 = n_out5p0n_out5p1.rgb;
		n_out5p1 = n_out5p0n_out5p1.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -537, -164 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 260, 0 )
nodes/fragment/5/node = SubResource( 138 )
nodes/fragment/5/position = Vector2( 0, 0 )
nodes/fragment/6/node = SubResource( 139 )
nodes/fragment/6/position = Vector2( -200, -40 )
nodes/fragment/7/node = SubResource( 140 )
nodes/fragment/7/position = Vector2( -200, -120 )
nodes/fragment/8/node = SubResource( 141 )
nodes/fragment/8/position = Vector2( -220, 40 )
nodes/fragment/9/node = SubResource( 142 )
nodes/fragment/9/position = Vector2( -220, 120 )
nodes/fragment/connections = PoolIntArray( 6, 0, 5, 1, 7, 0, 5, 0, 5, 0, 0, 0, 5, 1, 0, 1, 8, 0, 5, 2, 9, 0, 5, 3 )

[sub_resource type="ShaderMaterial" id=144]
shader = SubResource( 143 )

[sub_resource type="VisualShaderNodeScalarConstant" id=145]
constant = 5.0

[sub_resource type="VisualShaderNodeScalarConstant" id=146]
constant = 0.003

[sub_resource type="VisualShaderNodeScalarConstant" id=147]
constant = -1.0

[sub_resource type="VisualShaderNodeCustom" id=148]
default_input_values = [ 2, -1.0, 3, 5, 4, 0.001 ]
script = ExtResource( 28 )

[sub_resource type="VisualShader" id=149]
code = "shader_type canvas_item;


// BlurCustom

vec4 blurWithAmountFunc(sampler2D _tex_b1r_cst, vec2 _uv_b1r_cst, float _l0d_b1r_cst, int _amnt_b1r_cst, float _0ffst_b1r_cst) {
	vec4 _c0l_b1r_cst = vec4(0, 0, 0, 0);
	_amnt_b1r_cst = int(max(min(float(_amnt_b1r_cst), 20.0), 0.0)); // have to do this int() float() shit because of gles2 
																	// max _amnt_b1r_cst is 20 for not to kill PC
	for(int x = -_amnt_b1r_cst; x <= _amnt_b1r_cst; x++) {
		for(int y = -_amnt_b1r_cst; y <= _amnt_b1r_cst; y++) {
			vec2 _c00rd_b1r_cst = _uv_b1r_cst + vec2(float(x), float(y)) * _0ffst_b1r_cst;
			if (_l0d_b1r_cst < 0.0){
				_c0l_b1r_cst += texture(_tex_b1r_cst, _c00rd_b1r_cst);
			}else{
				_c0l_b1r_cst += textureLod(_tex_b1r_cst, _c00rd_b1r_cst, _l0d_b1r_cst);
			}
		}
	}
	int _nmb_ne1ghb0urs_b1r_cst = (_amnt_b1r_cst * 2 + 1) * (_amnt_b1r_cst * 2 + 1);
	_c0l_b1r_cst /= float(_nmb_ne1ghb0urs_b1r_cst);
	return _c0l_b1r_cst;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:7

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Scalar:12
	float n_out12p0 = -1.000000;

// Scalar:10
	float n_out10p0 = 5.000000;

// Scalar:11
	float n_out11p0 = 0.003000;

// BlurCustom:8
	vec3 n_out8p0;
	float n_out8p1;
	{
		vec4 n_out8p0n_out8p1 = blurWithAmountFunc(TEXTURE, n_out6p0.xy, n_out12p0, int(n_out10p0), n_out11p0);
		n_out8p0 = n_out8p0n_out8p1.rgb;
		n_out8p1 = n_out8p0n_out8p1.a;
	}

// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out8p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -686, -380 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 240, -200 )
nodes/fragment/6/node = SubResource( 139 )
nodes/fragment/6/position = Vector2( -220, -260 )
nodes/fragment/7/node = SubResource( 140 )
nodes/fragment/7/position = Vector2( -220, -340 )
nodes/fragment/8/node = SubResource( 148 )
nodes/fragment/8/position = Vector2( 0, -200 )
nodes/fragment/10/node = SubResource( 145 )
nodes/fragment/10/position = Vector2( -240, -100 )
nodes/fragment/11/node = SubResource( 146 )
nodes/fragment/11/position = Vector2( -240, -20 )
nodes/fragment/12/node = SubResource( 147 )
nodes/fragment/12/position = Vector2( -240, -180 )
nodes/fragment/connections = PoolIntArray( 8, 0, 0, 0, 8, 1, 0, 1, 7, 0, 8, 0, 6, 0, 8, 1, 12, 0, 8, 2, 10, 0, 8, 3, 11, 0, 8, 4 )

[sub_resource type="ShaderMaterial" id=150]
shader = SubResource( 149 )

[sub_resource type="VisualShaderNodeCustom" id=151]
default_input_values = [ 2, -1.0, 3, Vector3( 0.5, 0.5, 0 ), 4, 20.0, 5, 0.005 ]
script = ExtResource( 29 )

[sub_resource type="VisualShaderNodeScalarConstant" id=152]
constant = 0.1

[sub_resource type="VisualShaderNodeScalarConstant" id=153]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=154]
constant = 20.0

[sub_resource type="VisualShaderNodeVec3Constant" id=155]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeCustom" id=156]
default_input_values = [ 0, 1.0, 1, 1.0 ]
script = ExtResource( 16 )

[sub_resource type="VisualShader" id=157]
code = "shader_type canvas_item;


// ZoomBlur

vec4 zoomBlurFunc(sampler2D _tex_z00m_blur, vec2 _uv_z00m_blur, int _amount_z00m_blur, vec2 _center_zoom, float _lgt_z00m_blur, float _lod_z00m_blur){
	vec4 _col_z00m_blur;
	if (_lod_z00m_blur < 0.0){
		_col_z00m_blur = texture(_tex_z00m_blur, _uv_z00m_blur);
		for (int i = 1; i <= _amount_z00m_blur; i++){
			float _temp_d_z00m_blur = _lgt_z00m_blur * float(i);
			vec2 px = _uv_z00m_blur * (1.0 - _temp_d_z00m_blur) + _center_zoom * _temp_d_z00m_blur;
			_col_z00m_blur += texture(_tex_z00m_blur, px);
		}
	}else{
		_col_z00m_blur = textureLod(_tex_z00m_blur, _uv_z00m_blur, _lod_z00m_blur);
		for (int i = 1; i <= _amount_z00m_blur; i++){
			float _temp_d_z00m_blur = _lgt_z00m_blur * float(i);
			vec2 px = _uv_z00m_blur * (1.0 - _temp_d_z00m_blur) + _center_zoom * _temp_d_z00m_blur;
			_col_z00m_blur += textureLod(_tex_z00m_blur, px, _lod_z00m_blur);
		}
	}
	_col_z00m_blur = _col_z00m_blur / float(_amount_z00m_blur + 1);
	return _col_z00m_blur;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:7

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Scalar:13
	float n_out13p0 = -1.000000;

// Vector:15
	vec3 n_out15p0 = vec3(0.500000, 0.500000, 0.000000);

// Scalar:14
	float n_out14p0 = 20.000000;

// Scalar:12
	float n_out12p0 = 0.100000;

// SinTIME:9
	float n_in9p0 = 1.00000;
	float n_out9p0;
	{
		n_out9p0 = n_out12p0 * sin(n_in9p0 * TIME);
	}

// ZoomBlur:11
	vec3 n_out11p0;
	float n_out11p1;
	{
		vec4 n_out11p0n_out11p1 = zoomBlurFunc(TEXTURE, n_out6p0.xy, int(n_out14p0), n_out15p0.xy, n_out9p0, n_out13p0);
		n_out11p0 = n_out11p0n_out11p1.rgb;
		n_out11p1 = n_out11p0n_out11p1.a;
	}

// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out11p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -213.592, -254 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 260, 0 )
nodes/fragment/6/node = SubResource( 139 )
nodes/fragment/6/position = Vector2( -220, -100 )
nodes/fragment/7/node = SubResource( 140 )
nodes/fragment/7/position = Vector2( -220, -180 )
nodes/fragment/9/node = SubResource( 156 )
nodes/fragment/9/position = Vector2( -260, 240 )
nodes/fragment/11/node = SubResource( 151 )
nodes/fragment/11/position = Vector2( 0, 0 )
nodes/fragment/12/node = SubResource( 152 )
nodes/fragment/12/position = Vector2( -520, 340 )
nodes/fragment/13/node = SubResource( 153 )
nodes/fragment/13/position = Vector2( -260, -20 )
nodes/fragment/14/node = SubResource( 154 )
nodes/fragment/14/position = Vector2( -260, 160 )
nodes/fragment/15/node = SubResource( 155 )
nodes/fragment/15/position = Vector2( -400, 60 )
nodes/fragment/connections = PoolIntArray( 11, 0, 0, 0, 6, 0, 11, 1, 12, 0, 9, 1, 9, 0, 11, 5, 13, 0, 11, 2, 14, 0, 11, 4, 15, 0, 11, 3, 7, 0, 11, 0, 11, 1, 0, 1 )

[sub_resource type="ShaderMaterial" id=158]
shader = SubResource( 157 )

[sub_resource type="VisualShaderNodeCustom" id=159]
default_input_values = [ 2, -1.0, 3, 1.0, 4, 1.0, 5, 1.0, 6, Vector3( 1, 1, 1 ), 7, 1.0 ]
script = ExtResource( 31 )

[sub_resource type="VisualShaderNodeColorConstant" id=160]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=161]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=162]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=163]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=164]
constant = 1.0

[sub_resource type="VisualShader" id=165]
code = "shader_type canvas_item;


// GlowEmpty

vec4 inoutGl0wEmptyFunc(sampler2D _samp_1ngl0wEmpt, vec2 _uv_1ngl0wEmpt, float _l0d_gl0wEmpt,
float _rad_in0ut_Empty, float _intens_inner_gl0wEmpt, float _intens_outer_gl0wEmpt, vec4 _c0l_1ngl0wEmpt){
	_rad_in0ut_Empty = abs(_rad_in0ut_Empty);
	
	vec4 _c01r_orig_gl0w = vec4(0.0);
	float _a1pha_gl0w_1nv = 0.0;
	float _a1pha_gl0w_blured = 0.0;
	int gl0w_amount = 3;
	
	if (_l0d_gl0wEmpt < 0.0)
		_c01r_orig_gl0w = texture(_samp_1ngl0wEmpt, _uv_1ngl0wEmpt);
	else
		_c01r_orig_gl0w = textureLod(_samp_1ngl0wEmpt, _uv_1ngl0wEmpt, _l0d_gl0wEmpt);
	
	gl0w_amount = int(min(_rad_in0ut_Empty + 7.0, 14.0));
	for(int x = - gl0w_amount; x <= gl0w_amount; x++) {
		for(int y = - gl0w_amount; y <= gl0w_amount; y++) {
			vec2 _c00rd_b1r_cst = _uv_1ngl0wEmpt + vec2(float(x), float(y)) * _rad_in0ut_Empty * 0.01;
			_a1pha_gl0w_blured += textureLod(_samp_1ngl0wEmpt, _c00rd_b1r_cst, 0.0).a;
		}
	}
	int _nmb_ne1ghb0urs_b1r_cst = (gl0w_amount * 2 + 1) * (gl0w_amount * 2 + 1);
	_a1pha_gl0w_blured /= float(_nmb_ne1ghb0urs_b1r_cst);
	
	_a1pha_gl0w_1nv = _a1pha_gl0w_blured;
	_a1pha_gl0w_1nv *= (1.0 - _c01r_orig_gl0w.a);
	
	float in_a1pha_gl0w_1nv = 1.0 - _a1pha_gl0w_blured;
	in_a1pha_gl0w_1nv *= _c01r_orig_gl0w.a;
	
	if (_a1pha_gl0w_1nv > 0.0)
		_a1pha_gl0w_1nv *= (_intens_outer_gl0wEmpt + 1.0);
	
	if (in_a1pha_gl0w_1nv > 0.0)
		in_a1pha_gl0w_1nv *= (_intens_inner_gl0wEmpt + 1.0);
	
	return vec4(_c0l_1ngl0wEmpt.rgb, (_a1pha_gl0w_1nv + in_a1pha_gl0w_1nv) * _c0l_1ngl0wEmpt.a);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:7

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Scalar:15
	float n_out15p0 = -1.000000;

// Scalar:16
	float n_out16p0 = 1.000000;

// Scalar:17
	float n_out17p0 = 1.000000;

// Scalar:18
	float n_out18p0 = 1.000000;

// Color:14
	vec3 n_out14p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out14p1 = 1.000000;

// GlowEmpty:13
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 n_out13p0n_out13p1 = inoutGl0wEmptyFunc(TEXTURE, n_out6p0.xy, n_out15p0, n_out16p0, n_out17p0, n_out18p0, vec4(n_out14p0, n_out14p1));
		n_out13p0 = n_out13p0n_out13p1.rgb;
		n_out13p1 = n_out13p0n_out13p1.a;
	}

// Output:0
	COLOR.rgb = n_out13p0;
	COLOR.a = n_out13p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -535, 125 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 200, 0 )
nodes/fragment/6/node = SubResource( 139 )
nodes/fragment/6/position = Vector2( -260, -100 )
nodes/fragment/7/node = SubResource( 140 )
nodes/fragment/7/position = Vector2( -260, -180 )
nodes/fragment/13/node = SubResource( 159 )
nodes/fragment/13/position = Vector2( -40, 0 )
nodes/fragment/14/node = SubResource( 160 )
nodes/fragment/14/position = Vector2( -240, 300 )
nodes/fragment/15/node = SubResource( 161 )
nodes/fragment/15/position = Vector2( -280, -20 )
nodes/fragment/16/node = SubResource( 162 )
nodes/fragment/16/position = Vector2( -280, 60 )
nodes/fragment/17/node = SubResource( 163 )
nodes/fragment/17/position = Vector2( -280, 140 )
nodes/fragment/18/node = SubResource( 164 )
nodes/fragment/18/position = Vector2( -280, 220 )
nodes/fragment/connections = PoolIntArray( 13, 0, 0, 0, 13, 1, 0, 1, 7, 0, 13, 0, 6, 0, 13, 1, 14, 0, 13, 6, 14, 1, 13, 7, 15, 0, 13, 2, 16, 0, 13, 3, 17, 0, 13, 4, 18, 0, 13, 5 )

[sub_resource type="ShaderMaterial" id=166]
shader = SubResource( 165 )

[sub_resource type="VisualShaderNodeCustom" id=167]
default_input_values = [ 2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3( 1, 1, 1 ), 6, 1.0 ]
script = ExtResource( 30 )

[sub_resource type="VisualShaderNodeScalarConstant" id=168]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=169]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=170]
constant = 1.0

[sub_resource type="VisualShader" id=171]
code = "shader_type canvas_item;


// InnerGlow

vec4 innerGl0wFunc(sampler2D _samp_1ngl0w, vec2 _uv_1ngl0w, float _l0d_1ngl0w, float _rad_1ngl0w, float _1ntns_1ngl0w, vec4 _c0l_1ngl0w){
	_rad_1ngl0w = abs(_rad_1ngl0w);
	
	vec4 _c01r_1ngl0w = vec4(0.0);
	float _a1pha_1nv = 0.0;
	float _a1pha_1ngl0w_b1 = 0.0;
	int _am0nt_1ngl0w = 3;
	
	if (_l0d_1ngl0w < 0.0)
		_c01r_1ngl0w = texture(_samp_1ngl0w, _uv_1ngl0w);
	else
		_c01r_1ngl0w = textureLod(_samp_1ngl0w, _uv_1ngl0w, _l0d_1ngl0w);
	
	_am0nt_1ngl0w = int(min(_rad_1ngl0w + 7.0, 14.0));
	for(int x = - _am0nt_1ngl0w; x <= _am0nt_1ngl0w; x++) {
		for(int y = - _am0nt_1ngl0w; y <= _am0nt_1ngl0w; y++) {
			vec2 _c00rd_b1r_cst = _uv_1ngl0w + vec2(float(x), float(y)) * _rad_1ngl0w * 0.01;
			_a1pha_1ngl0w_b1 += textureLod(_samp_1ngl0w, _c00rd_b1r_cst, 0.0).a;
		}
	}
	int _nmb_ne1ghb0urs_b1r_cst = (_am0nt_1ngl0w * 2 + 1) * (_am0nt_1ngl0w * 2 + 1);
	_a1pha_1ngl0w_b1 /= float(_nmb_ne1ghb0urs_b1r_cst);
	
	_a1pha_1nv = 1.0 - _a1pha_1ngl0w_b1; // inversion
	_a1pha_1nv *= _c01r_1ngl0w.a; // masking
	
	if (_a1pha_1nv > 0.0)
		_a1pha_1nv *= (_1ntns_1ngl0w + 1.0);
	
	return mix(_c01r_1ngl0w, _c0l_1ngl0w, _a1pha_1nv * _c0l_1ngl0w.a);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:7

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Scalar:16
	float n_out16p0 = -1.000000;

// Scalar:17
	float n_out17p0 = 1.000000;

// Scalar:18
	float n_out18p0 = 1.000000;

// Color:14
	vec3 n_out14p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out14p1 = 1.000000;

// InnerGlow:15
	vec3 n_out15p0;
	float n_out15p1;
	{
		vec4 n_out15p0n_out15p1 = innerGl0wFunc(TEXTURE, n_out6p0.xy, n_out16p0, n_out17p0, n_out18p0, vec4(n_out14p0, n_out14p1));
		n_out15p0 = n_out15p0n_out15p1.rgb;
		n_out15p1 = n_out15p0n_out15p1.a;
	}

// Output:0
	COLOR.rgb = n_out15p0;
	COLOR.a = n_out15p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -681.592, -174.99 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 200, 0 )
nodes/fragment/6/node = SubResource( 139 )
nodes/fragment/6/position = Vector2( -260, -80 )
nodes/fragment/7/node = SubResource( 140 )
nodes/fragment/7/position = Vector2( -260, -160 )
nodes/fragment/14/node = SubResource( 160 )
nodes/fragment/14/position = Vector2( -220, 240 )
nodes/fragment/15/node = SubResource( 167 )
nodes/fragment/15/position = Vector2( -40, 0 )
nodes/fragment/16/node = SubResource( 168 )
nodes/fragment/16/position = Vector2( -280, 0 )
nodes/fragment/17/node = SubResource( 169 )
nodes/fragment/17/position = Vector2( -280, 80 )
nodes/fragment/18/node = SubResource( 170 )
nodes/fragment/18/position = Vector2( -280, 160 )
nodes/fragment/connections = PoolIntArray( 7, 0, 15, 0, 6, 0, 15, 1, 15, 0, 0, 0, 15, 1, 0, 1, 14, 0, 15, 5, 14, 1, 15, 6, 16, 0, 15, 2, 17, 0, 15, 3, 18, 0, 15, 4 )

[sub_resource type="ShaderMaterial" id=172]
shader = SubResource( 171 )

[sub_resource type="VisualShaderNodeCustom" id=173]
default_input_values = [ 2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3( 1, 1, 1 ), 6, 1.0 ]
script = ExtResource( 32 )

[sub_resource type="VisualShaderNodeInput" id=174]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id=175]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id=176]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=177]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=178]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=179]
constant = 1.0

[sub_resource type="VisualShader" id=180]
code = "shader_type canvas_item;


// InnerGlowEmpty

vec4 innerGl0wEmptyFunc(sampler2D _samp_1ngl0wEmpt, vec2 _uv_1ngl0wEmpt, float _l0d_1ngl0wEmpt, float _rad_1ngl0wEmpt, float _1ntns_1ngl0wEmpt, vec4 _c0l_1ngl0wEmpt){
	_rad_1ngl0wEmpt = abs(_rad_1ngl0wEmpt);
	
	vec4 _c01r_1ngl0w = vec4(0.0);
	float _a1pha_1ngl0w_1nv = 0.0;
	float _a1pha_1ngl0w_b1 = 0.0;
	int _am0nt_1ngl0w = 3;
	
	if (_l0d_1ngl0wEmpt < 0.0)
		_c01r_1ngl0w = texture(_samp_1ngl0wEmpt, _uv_1ngl0wEmpt);
	else
		_c01r_1ngl0w = textureLod(_samp_1ngl0wEmpt, _uv_1ngl0wEmpt, _l0d_1ngl0wEmpt);
	
	_am0nt_1ngl0w = int(min(_rad_1ngl0wEmpt + 7.0, 14.0));
	for(int x = - _am0nt_1ngl0w; x <= _am0nt_1ngl0w; x++) {
		for(int y = - _am0nt_1ngl0w; y <= _am0nt_1ngl0w; y++) {
			vec2 _c00rd_b1r_cst = _uv_1ngl0wEmpt + vec2(float(x), float(y)) * _rad_1ngl0wEmpt * 0.01;
			_a1pha_1ngl0w_b1 += textureLod(_samp_1ngl0wEmpt, _c00rd_b1r_cst, 0.0).a;
		}
	}
	int _nmb_ne1ghb0urs_b1r_cst = (_am0nt_1ngl0w * 2 + 1) * (_am0nt_1ngl0w * 2 + 1);
	_a1pha_1ngl0w_b1 /= float(_nmb_ne1ghb0urs_b1r_cst);
	
	_a1pha_1ngl0w_1nv = 1.0 - _a1pha_1ngl0w_b1; // inversion
	_a1pha_1ngl0w_1nv *= _c01r_1ngl0w.a; // masking
	
	if (_a1pha_1ngl0w_1nv > 0.0)
		_a1pha_1ngl0w_1nv *= (_1ntns_1ngl0wEmpt + 1.0);
	
	return vec4(_c0l_1ngl0wEmpt.rgb, _a1pha_1ngl0w_1nv * _c0l_1ngl0wEmpt.a);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Scalar:6
	float n_out6p0 = -1.000000;

// Scalar:7
	float n_out7p0 = 1.000000;

// Scalar:8
	float n_out8p0 = 1.000000;

// Color:5
	vec3 n_out5p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out5p1 = 1.000000;

// InnerGlowEmpty:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_out2p0n_out2p1 = innerGl0wEmptyFunc(TEXTURE, n_out4p0.xy, n_out6p0, n_out7p0, n_out8p0, vec4(n_out5p0, n_out5p1));
		n_out2p0 = n_out2p0n_out2p1.rgb;
		n_out2p1 = n_out2p0n_out2p1.a;
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -401.592, 111.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/2/node = SubResource( 173 )
nodes/fragment/2/position = Vector2( 160, 200 )
nodes/fragment/3/node = SubResource( 174 )
nodes/fragment/3/position = Vector2( -40, 60 )
nodes/fragment/4/node = SubResource( 175 )
nodes/fragment/4/position = Vector2( -40, 140 )
nodes/fragment/5/node = SubResource( 176 )
nodes/fragment/5/position = Vector2( -20, 460 )
nodes/fragment/6/node = SubResource( 177 )
nodes/fragment/6/position = Vector2( -60, 220 )
nodes/fragment/7/node = SubResource( 178 )
nodes/fragment/7/position = Vector2( -60, 300 )
nodes/fragment/8/node = SubResource( 179 )
nodes/fragment/8/position = Vector2( -60, 380 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 2, 1, 0, 1, 4, 0, 2, 1, 3, 0, 2, 0, 5, 0, 2, 5, 5, 1, 2, 6, 6, 0, 2, 2, 8, 0, 2, 4, 7, 0, 2, 3 )

[sub_resource type="ShaderMaterial" id=181]
shader = SubResource( 180 )

[sub_resource type="VisualShaderNodeScalarConstant" id=182]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id=183]
default_input_values = [ 2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3( 1, 1, 1 ), 6, 1.0 ]
script = ExtResource( 33 )

[sub_resource type="VisualShaderNodeColorConstant" id=184]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=185]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=186]
constant = 1.0

[sub_resource type="VisualShader" id=187]
code = "shader_type canvas_item;


// OuterGlow

vec4 outerGl0wFunc(sampler2D _samp_1ngl0w, vec2 _uv_1ngl0w, float _l0d_1ngl0w, float _rad_1ngl0w, float _1ntns_1ngl0w, vec4 _c0l_1ngl0w){
	_rad_1ngl0w = abs(_rad_1ngl0w);
	
	vec4 _c01r_1ngl0w = vec4(0.0);
	float _a1pha_1nv = 0.0;
	float _a1pha_1ngl0w_b1 = 0.0;
	int _am0nt_1ngl0w = 3;
	
	if (_l0d_1ngl0w < 0.0)
		_c01r_1ngl0w = texture(_samp_1ngl0w, _uv_1ngl0w);
	else
		_c01r_1ngl0w = textureLod(_samp_1ngl0w, _uv_1ngl0w, _l0d_1ngl0w);
	
	_am0nt_1ngl0w = int(min(_rad_1ngl0w + 7.0, 14.0));
	for(int x = - _am0nt_1ngl0w; x <= _am0nt_1ngl0w; x++) {
		for(int y = - _am0nt_1ngl0w; y <= _am0nt_1ngl0w; y++) {
			vec2 _c00rd_b1r_cst = _uv_1ngl0w + vec2(float(x), float(y)) * _rad_1ngl0w * 0.01;
			_a1pha_1ngl0w_b1 += textureLod(_samp_1ngl0w, _c00rd_b1r_cst, 0.0).a;
		}
	}
	int _nmb_ne1ghb0urs_b1r_cst = (_am0nt_1ngl0w * 2 + 1) * (_am0nt_1ngl0w * 2 + 1);
	_a1pha_1ngl0w_b1 /= float(_nmb_ne1ghb0urs_b1r_cst);
	
	_a1pha_1nv = _a1pha_1ngl0w_b1; // inversion
	_a1pha_1nv *= (1.0 - _c01r_1ngl0w.a); // masking
	
	if (_a1pha_1nv > 0.0)
		_a1pha_1nv *= (_1ntns_1ngl0w + 1.0);
	
	vec4 _gl0w_c0l_result = vec4(_c0l_1ngl0w.rgb, _a1pha_1nv * _c0l_1ngl0w.a);
	return mix(_gl0w_c0l_result, _c01r_1ngl0w, _c01r_1ngl0w.a);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Scalar:8
	float n_out8p0 = -1.000000;

// Scalar:9
	float n_out9p0 = 1.000000;

// Scalar:10
	float n_out10p0 = 1.000000;

// Color:7
	vec3 n_out7p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out7p1 = 1.000000;

// OuterGlow:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 n_out6p0n_out6p1 = outerGl0wFunc(TEXTURE, n_out4p0.xy, n_out8p0, n_out9p0, n_out10p0, vec4(n_out7p0, n_out7p1));
		n_out6p0 = n_out6p0n_out6p1.rgb;
		n_out6p1 = n_out6p0n_out6p1.a;
	}

// Output:0
	COLOR.rgb = n_out6p0;
	COLOR.a = n_out6p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -500.592, 54.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/3/node = SubResource( 174 )
nodes/fragment/3/position = Vector2( -60, 60 )
nodes/fragment/4/node = SubResource( 175 )
nodes/fragment/4/position = Vector2( -60, 140 )
nodes/fragment/6/node = SubResource( 183 )
nodes/fragment/6/position = Vector2( 160, 200 )
nodes/fragment/7/node = SubResource( 184 )
nodes/fragment/7/position = Vector2( -40, 460 )
nodes/fragment/8/node = SubResource( 185 )
nodes/fragment/8/position = Vector2( -80, 220 )
nodes/fragment/9/node = SubResource( 186 )
nodes/fragment/9/position = Vector2( -80, 300 )
nodes/fragment/10/node = SubResource( 182 )
nodes/fragment/10/position = Vector2( -80, 380 )
nodes/fragment/connections = PoolIntArray( 6, 0, 0, 0, 6, 1, 0, 1, 3, 0, 6, 0, 4, 0, 6, 1, 7, 0, 6, 5, 7, 1, 6, 6, 8, 0, 6, 2, 9, 0, 6, 3, 10, 0, 6, 4 )

[sub_resource type="ShaderMaterial" id=188]
shader = SubResource( 187 )

[sub_resource type="VisualShaderNodeScalarConstant" id=189]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=190]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=191]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id=192]
default_input_values = [ 2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3( 1, 1, 1 ), 6, 1.0 ]
script = ExtResource( 34 )

[sub_resource type="VisualShaderNodeColorConstant" id=193]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShader" id=194]
code = "shader_type canvas_item;


// OuterGlowEmpty

vec4 outerGl0wEmptyFunc(sampler2D _samp_1ngl0wEmpt, vec2 _uv_1ngl0wEmpt, float _l0d_1ngl0wEmpt, float _rad_1ngl0wEmpt, float _1ntns_1ngl0wEmpt, vec4 _c0l_1ngl0wEmpt){
	_rad_1ngl0wEmpt = abs(_rad_1ngl0wEmpt);
	
	vec4 _c01r_1ngl0w = vec4(0.0);
	float _a1pha_1ngl0w_1nv = 0.0;
	float _a1pha_1ngl0w_b1 = 0.0;
	int _am0nt_1ngl0w = 3;
	
	if (_l0d_1ngl0wEmpt < 0.0)
		_c01r_1ngl0w = texture(_samp_1ngl0wEmpt, _uv_1ngl0wEmpt);
	else
		_c01r_1ngl0w = textureLod(_samp_1ngl0wEmpt, _uv_1ngl0wEmpt, _l0d_1ngl0wEmpt);
	
	_am0nt_1ngl0w = int(min(_rad_1ngl0wEmpt + 7.0, 14.0));
	for(int x = - _am0nt_1ngl0w; x <= _am0nt_1ngl0w; x++) {
		for(int y = - _am0nt_1ngl0w; y <= _am0nt_1ngl0w; y++) {
			vec2 _c00rd_b1r_cst = _uv_1ngl0wEmpt + vec2(float(x), float(y)) * _rad_1ngl0wEmpt * 0.01;
			_a1pha_1ngl0w_b1 += textureLod(_samp_1ngl0wEmpt, _c00rd_b1r_cst, 0.0).a;
		}
	}
	int _nmb_ne1ghb0urs_b1r_cst = (_am0nt_1ngl0w * 2 + 1) * (_am0nt_1ngl0w * 2 + 1);
	_a1pha_1ngl0w_b1 /= float(_nmb_ne1ghb0urs_b1r_cst);
	
	_a1pha_1ngl0w_1nv = _a1pha_1ngl0w_b1; // inversion
	_a1pha_1ngl0w_1nv *= (1.0 - _c01r_1ngl0w.a); // masking
	
	if (_a1pha_1ngl0w_1nv > 0.0)
		_a1pha_1ngl0w_1nv *= (_1ntns_1ngl0wEmpt + 1.0);
	
	return vec4(_c0l_1ngl0wEmpt.rgb, _a1pha_1ngl0w_1nv * _c0l_1ngl0wEmpt.a);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Scalar:10
	float n_out10p0 = -1.000000;

// Scalar:11
	float n_out11p0 = 1.000000;

// Scalar:12
	float n_out12p0 = 1.000000;

// Color:9
	vec3 n_out9p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out9p1 = 1.000000;

// OuterGlowEmpty:7
	vec3 n_out7p0;
	float n_out7p1;
	{
		vec4 n_out7p0n_out7p1 = outerGl0wEmptyFunc(TEXTURE, n_out4p0.xy, n_out10p0, n_out11p0, n_out12p0, vec4(n_out9p0, n_out9p1));
		n_out7p0 = n_out7p0n_out7p1.rgb;
		n_out7p1 = n_out7p0n_out7p1.a;
	}

// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out7p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -474.592, 69.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/3/node = SubResource( 174 )
nodes/fragment/3/position = Vector2( -40, 40 )
nodes/fragment/4/node = SubResource( 175 )
nodes/fragment/4/position = Vector2( -40, 120 )
nodes/fragment/7/node = SubResource( 192 )
nodes/fragment/7/position = Vector2( 180, 200 )
nodes/fragment/9/node = SubResource( 193 )
nodes/fragment/9/position = Vector2( -20, 440 )
nodes/fragment/10/node = SubResource( 189 )
nodes/fragment/10/position = Vector2( -60, 200 )
nodes/fragment/11/node = SubResource( 190 )
nodes/fragment/11/position = Vector2( -60, 280 )
nodes/fragment/12/node = SubResource( 191 )
nodes/fragment/12/position = Vector2( -60, 360 )
nodes/fragment/connections = PoolIntArray( 7, 0, 0, 0, 7, 1, 0, 1, 3, 0, 7, 0, 4, 0, 7, 1, 9, 0, 7, 5, 9, 1, 7, 6, 10, 0, 7, 2, 11, 0, 7, 3, 12, 0, 7, 4 )

[sub_resource type="ShaderMaterial" id=195]
shader = SubResource( 194 )

[sub_resource type="VisualShaderNodeVec3Constant" id=196]
constant = Vector3( 8, 8, 0 )

[sub_resource type="VisualShaderNodeColorConstant" id=197]
constant = Color( 0, 1, 0.5, 1 )

[sub_resource type="VisualShaderNodeCustom" id=198]
default_input_values = [ 1, Vector3( 8, 8, 0 ), 2, Vector3( 1, 1, 1 ), 3, 1 ]
script = ExtResource( 35 )

[sub_resource type="VisualShader" id=199]
code = "shader_type canvas_item;


// CheckerboardShape

float checkerb0ardPatternFunc(vec2 uv, vec2 _checker_size){
	float fmodRes = mod(floor(_checker_size.x * uv.x) + floor(_checker_size.y * uv.y), 2.0);
	return max(sign(fmodRes), 0.0);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Vector:10
	vec3 n_out10p0 = vec3(8.000000, 8.000000, 0.000000);

// Color:8
	vec3 n_out8p0 = vec3(0.000000, 1.000000, 0.500000);
	float n_out8p1 = 1.000000;

// CheckerboardShape:9
	vec3 n_out9p0;
	float n_out9p1;
	{
		n_out9p0 = n_out8p0;
		n_out9p1 = checkerb0ardPatternFunc(n_out4p0.xy, n_out10p0.xy) * n_out8p1;
	}

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out9p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -474.592, 69.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 220 )
nodes/fragment/4/node = SubResource( 175 )
nodes/fragment/4/position = Vector2( -40, 120 )
nodes/fragment/8/node = SubResource( 197 )
nodes/fragment/8/position = Vector2( -40, 320 )
nodes/fragment/9/node = SubResource( 198 )
nodes/fragment/9/position = Vector2( 180, 220 )
nodes/fragment/10/node = SubResource( 196 )
nodes/fragment/10/position = Vector2( -220, 220 )
nodes/fragment/connections = PoolIntArray( 9, 0, 0, 0, 9, 1, 0, 1, 4, 0, 9, 0, 10, 0, 9, 1, 8, 0, 9, 2, 8, 1, 9, 3 )

[sub_resource type="ShaderMaterial" id=200]
shader = SubResource( 199 )

[sub_resource type="VisualShaderNodeCustom" id=201]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( 1, 1, 0 ), 3, 0.0, 4, 0.5, 5, 0.5, 6, Vector3( 1, 1, 1 ), 7, 1.0 ]
script = ExtResource( 36 )

[sub_resource type="VisualShaderNodeColorConstant" id=202]
constant = Color( 0.59375, 0, 1, 1 )

[sub_resource type="VisualShaderNodeVec3Constant" id=203]
constant = Vector3( 1, 1, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=204]

[sub_resource type="VisualShaderNodeScalarConstant" id=205]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=206]
constant = 0.5

[sub_resource type="VisualShaderNodeVec3Constant" id=207]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShader" id=208]
code = "shader_type canvas_item;


// CircleShape2

vec4 generateCircle2Func(vec2 _uv_gc2, vec2 _p0s_gc2, vec2 _sca1e_gc2, float _rad_gc2,
						 float _b0rdIn_gc2, float _b0rdOut_gc2, vec4 _c0l_gc2){
	float _dst_gc2 = length((_uv_gc2 - _p0s_gc2) * _sca1e_gc2);
	_c0l_gc2.a *= smoothstep(_rad_gc2 - _b0rdIn_gc2, _rad_gc2, _dst_gc2) 
				 - smoothstep(_rad_gc2, _rad_gc2 + _b0rdOut_gc2, _dst_gc2);
	return _c0l_gc2;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Vector:18
	vec3 n_out18p0 = vec3(0.500000, 0.500000, 0.000000);

// Vector:14
	vec3 n_out14p0 = vec3(1.000000, 1.000000, 0.000000);

// Scalar:15
	float n_out15p0 = 0.000000;

// Scalar:16
	float n_out16p0 = 0.500000;

// Scalar:17
	float n_out17p0 = 0.500000;

// Color:12
	vec3 n_out12p0 = vec3(0.593750, 0.000000, 1.000000);
	float n_out12p1 = 1.000000;

// CircleShape2:11
	vec3 n_out11p0;
	float n_out11p1;
	{
		vec4 n_out11p0n_out11p1 = generateCircle2Func(n_out4p0.xy, n_out18p0.xy, n_out14p0.xy, n_out15p0, n_out16p0, n_out17p0, vec4(n_out12p0, n_out12p1));
		n_out11p0 = n_out11p0n_out11p1.rgb;
		n_out11p1 = n_out11p0n_out11p1.a;
	}

// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out11p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -441.592, 178.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 200 )
nodes/fragment/4/node = SubResource( 175 )
nodes/fragment/4/position = Vector2( 60, 0 )
nodes/fragment/11/node = SubResource( 201 )
nodes/fragment/11/position = Vector2( 320, 200 )
nodes/fragment/12/node = SubResource( 202 )
nodes/fragment/12/position = Vector2( 60, 520 )
nodes/fragment/14/node = SubResource( 203 )
nodes/fragment/14/position = Vector2( -120, 180 )
nodes/fragment/15/node = SubResource( 204 )
nodes/fragment/15/position = Vector2( -120, 280 )
nodes/fragment/16/node = SubResource( 205 )
nodes/fragment/16/position = Vector2( -60, 360 )
nodes/fragment/17/node = SubResource( 206 )
nodes/fragment/17/position = Vector2( -20, 440 )
nodes/fragment/18/node = SubResource( 207 )
nodes/fragment/18/position = Vector2( -120, 80 )
nodes/fragment/connections = PoolIntArray( 11, 0, 0, 0, 11, 1, 0, 1, 12, 0, 11, 6, 12, 1, 11, 7, 4, 0, 11, 0, 16, 0, 11, 4, 17, 0, 11, 5, 14, 0, 11, 2, 18, 0, 11, 1, 15, 0, 11, 3 )

[sub_resource type="ShaderMaterial" id=209]
shader = SubResource( 208 )

[sub_resource type="VisualShaderNodeCustom" id=210]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( 1, 1, 0 ), 3, -0.5, 4, 0.5, 5, 1.0, 6, Vector3( 1, 1, 1 ), 7, 1.0 ]
script = ExtResource( 37 )

[sub_resource type="VisualShaderNodeScalarConstant" id=211]
constant = -0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=212]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=213]
constant = 1.0

[sub_resource type="VisualShaderNodeColorConstant" id=214]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeVec3Constant" id=215]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=216]
constant = Vector3( 1, 1, 0 )

[sub_resource type="VisualShader" id=217]
code = "shader_type canvas_item;


// CircleShape

vec4 generateCirc1eFunc(vec2 _uv_circ1e, vec2 _center_circ1e, vec2 _scale_factor_circ1e, float _innerRad_circ1e, float _outRad_circ1e, float _hard_circ1e) {
	float _innerRadiusCheck0 = min(_innerRad_circ1e, _outRad_circ1e);
	float _outerRadiusCheck0 = max(_innerRad_circ1e, _outRad_circ1e);
	
	float currentP0sitionC1rcle = length((_uv_circ1e - _center_circ1e) * _scale_factor_circ1e);
	float maxIntencityCenterC1rcle = (_outerRadiusCheck0 + _innerRadiusCheck0) * 0.5;
	float rd0 = _outerRadiusCheck0 - maxIntencityCenterC1rcle;
	float circ1eDistributi0n = min(max(abs(currentP0sitionC1rcle - maxIntencityCenterC1rcle) / rd0, 0.0), 1.0);
	vec4 _outputColor0 = vec4(1.0);
	_outputColor0.a = 1.0 - pow(circ1eDistributi0n, _hard_circ1e);
	return _outputColor0;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Vector:23
	vec3 n_out23p0 = vec3(0.500000, 0.500000, 0.000000);

// Vector:24
	vec3 n_out24p0 = vec3(1.000000, 1.000000, 0.000000);

// Scalar:19
	float n_out19p0 = -0.500000;

// Scalar:20
	float n_out20p0 = 0.500000;

// Scalar:21
	float n_out21p0 = 1.000000;

// Color:22
	vec3 n_out22p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out22p1 = 1.000000;

// CircleShape:18
	vec3 n_out18p0;
	float n_out18p1;
	{
		n_out18p0 = n_out22p0;
		n_out18p1 = generateCirc1eFunc(n_out4p0.xy, n_out23p0.xy, n_out24p0.xy, n_out19p0, n_out20p0, n_out21p0).a * n_out22p1;
	}

// Output:0
	COLOR.rgb = n_out18p0;
	COLOR.a = n_out18p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -423.592, 134.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 180 )
nodes/fragment/4/node = SubResource( 175 )
nodes/fragment/4/position = Vector2( 60, 0 )
nodes/fragment/18/node = SubResource( 210 )
nodes/fragment/18/position = Vector2( 320, 180 )
nodes/fragment/19/node = SubResource( 211 )
nodes/fragment/19/position = Vector2( -120, 280 )
nodes/fragment/20/node = SubResource( 212 )
nodes/fragment/20/position = Vector2( -80, 340 )
nodes/fragment/21/node = SubResource( 213 )
nodes/fragment/21/position = Vector2( -40, 400 )
nodes/fragment/22/node = SubResource( 214 )
nodes/fragment/22/position = Vector2( 20, 480 )
nodes/fragment/23/node = SubResource( 215 )
nodes/fragment/23/position = Vector2( -120, 80 )
nodes/fragment/24/node = SubResource( 216 )
nodes/fragment/24/position = Vector2( -120, 180 )
nodes/fragment/connections = PoolIntArray( 4, 0, 18, 0, 19, 0, 18, 3, 20, 0, 18, 4, 21, 0, 18, 5, 22, 0, 18, 6, 22, 1, 18, 7, 18, 0, 0, 0, 18, 1, 0, 1, 23, 0, 18, 1, 24, 0, 18, 2 )

[sub_resource type="ShaderMaterial" id=218]
shader = SubResource( 217 )

[sub_resource type="VisualShaderNodeColorConstant" id=225]
constant = Color( 1, 0.867188, 0, 1 )

[sub_resource type="VisualShaderNodeCustom" id=226]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 3, 3, Vector3( 1, 1, 0 ), 4, 0.0, 5, 0.0, 6, Vector3( 1, 1, 1 ), 7, 1.0 ]
script = ExtResource( 39 )

[sub_resource type="VisualShaderNodeVec3Constant" id=227]
constant = Vector3( 0.5, 0.6, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=228]
constant = Vector3( 1, 1, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=229]
constant = 3.0

[sub_resource type="VisualShaderNodeScalarConstant" id=230]

[sub_resource type="VisualShaderNodeScalarConstant" id=231]
constant = 0.05

[sub_resource type="VisualShader" id=232]
code = "shader_type canvas_item;


// RegularPolygonShape

float p0lyg0nFunc(vec2 _uv_p0lyg0n, vec2 _pos_p0lyg0n, vec2 _size_p0lyg0n, float _sides_p0lyg0n, float _angle_p0lyg0n, float _smooth_p0lyg0n){
	_uv_p0lyg0n = (_uv_p0lyg0n - _pos_p0lyg0n) / (_size_p0lyg0n * 2.0);
	float a_p0lyg0n = atan(_uv_p0lyg0n.x, _uv_p0lyg0n.y) + _angle_p0lyg0n;
	float r_p0lyg0n = 6.28318530718 / float(int(max(_sides_p0lyg0n, 3.0)));
	float d_p0lyg0n = cos(floor(0.5 + a_p0lyg0n / r_p0lyg0n) * r_p0lyg0n - a_p0lyg0n) * length(_uv_p0lyg0n);
	return (max(sign(_smooth_p0lyg0n - 0.0), 0.0) * ( 1.0 - smoothstep(0.1 - 0.0001, 0.1 + _smooth_p0lyg0n, d_p0lyg0n) ) +
			(max(sign(-_smooth_p0lyg0n + 0.0), 0.0)) * ( 1.0 - smoothstep(0.1 + _smooth_p0lyg0n - 0.0001, 0.1, d_p0lyg0n) ) +
			(1.0 - abs(sign(_smooth_p0lyg0n - 0.0))) * ( 1.0 - step(0.1, d_p0lyg0n)) );
}


void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Vector:28
	vec3 n_out28p0 = vec3(0.500000, 0.600000, 0.000000);

// Scalar:31
	float n_out31p0 = 3.000000;

// Vector:29
	vec3 n_out29p0 = vec3(1.000000, 1.000000, 0.000000);

// Scalar:32
	float n_out32p0 = 0.000000;

// Scalar:33
	float n_out33p0 = 0.050000;

// Color:26
	vec3 n_out26p0 = vec3(1.000000, 0.867188, 0.000000);
	float n_out26p1 = 1.000000;

// RegularPolygonShape:27
	vec3 n_out27p0;
	float n_out27p1;
	{
		n_out27p0 = n_out26p0;
		n_out27p1 = p0lyg0nFunc(n_out4p0.xy, n_out28p0.xy, n_out29p0.xy, n_out31p0, n_out32p0, n_out33p0) * n_out26p1;
	}

// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out27p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -246, 175 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 160 )
nodes/fragment/4/node = SubResource( 175 )
nodes/fragment/4/position = Vector2( 40, -80 )
nodes/fragment/26/node = SubResource( 225 )
nodes/fragment/26/position = Vector2( 40, 440 )
nodes/fragment/27/node = SubResource( 226 )
nodes/fragment/27/position = Vector2( 260, 160 )
nodes/fragment/28/node = SubResource( 227 )
nodes/fragment/28/position = Vector2( -140, 0 )
nodes/fragment/29/node = SubResource( 228 )
nodes/fragment/29/position = Vector2( -140, 180 )
nodes/fragment/31/node = SubResource( 229 )
nodes/fragment/31/position = Vector2( 0, 100 )
nodes/fragment/32/node = SubResource( 230 )
nodes/fragment/32/position = Vector2( -20, 280 )
nodes/fragment/33/node = SubResource( 231 )
nodes/fragment/33/position = Vector2( 0, 360 )
nodes/fragment/connections = PoolIntArray( 27, 0, 0, 0, 27, 1, 0, 1, 4, 0, 27, 0, 28, 0, 27, 1, 31, 0, 27, 2, 29, 0, 27, 3, 32, 0, 27, 4, 33, 0, 27, 5, 26, 0, 27, 6, 26, 1, 27, 7 )

[sub_resource type="ShaderMaterial" id=233]
shader = SubResource( 232 )

[sub_resource type="VisualShaderNodeColorConstant" id=234]
constant = Color( 0, 0.552138, 1, 1 )

[sub_resource type="VisualShaderNodeVec3Constant" id=235]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeCustom" id=236]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 70.0, 3, 1.0, 4, 1.0, 5, 0.0, 6, 0.0, 7, Vector3( 1, 1, 1 ), 8, 1.0 ]
script = ExtResource( 40 )

[sub_resource type="VisualShaderNodeScalarConstant" id=237]
constant = 70.0

[sub_resource type="VisualShaderNodeScalarConstant" id=238]
constant = 10.0

[sub_resource type="VisualShaderNodeScalarConstant" id=239]
constant = 1.2

[sub_resource type="VisualShaderNodeScalarConstant" id=240]
constant = -2.0

[sub_resource type="VisualShaderNodeInput" id=241]
input_name = "time"

[sub_resource type="VisualShader" id=242]
code = "shader_type canvas_item;


// SpiralShape

vec4 generateSp1ralFunc(vec2 _uv_genSp1r, vec2 _p1v0t_genSp1r, float _s1ze_genSp1r, float _l1neAmnt_genSp1r,
						float _spd_genSp1r, float _s0ft_genSp1r, float _t1me_genSp1r, vec4 _c0l_genSp1r){
	_uv_genSp1r -= _p1v0t_genSp1r;
	float _va1ue_genSp1r = 1.0 - sin(length(_uv_genSp1r) * _s1ze_genSp1r +
					floor(_l1neAmnt_genSp1r) * atan(_uv_genSp1r.x, _uv_genSp1r.y) +
					_t1me_genSp1r * _spd_genSp1r ) / _s0ft_genSp1r;
	return vec4(_c0l_genSp1r.rgb, _c0l_genSp1r.a * _va1ue_genSp1r);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Vector:38
	vec3 n_out38p0 = vec3(0.500000, 0.500000, 0.000000);

// Scalar:41
	float n_out41p0 = 70.000000;

// Scalar:42
	float n_out42p0 = 10.000000;

// Scalar:43
	float n_out43p0 = 1.200000;

// Scalar:44
	float n_out44p0 = -2.000000;

// Input:45
	float n_out45p0 = TIME;

// Color:37
	vec3 n_out37p0 = vec3(0.000000, 0.552138, 1.000000);
	float n_out37p1 = 1.000000;

// SpiralShape:40
	vec3 n_out40p0;
	float n_out40p1;
	{
		vec4 n_out40p0n_out40p1 = generateSp1ralFunc(n_out4p0.xy, n_out38p0.xy, n_out41p0, n_out42p0, n_out44p0, n_out43p0, n_out45p0, vec4(n_out37p0, n_out37p1));
		n_out40p0 = n_out40p0n_out40p1.rgb;
		n_out40p1 = n_out40p0n_out40p1.a;
	}

// Output:0
	COLOR.rgb = n_out40p0;
	COLOR.a = n_out40p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -105.592, 119 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 580, 200 )
nodes/fragment/4/node = SubResource( 175 )
nodes/fragment/4/position = Vector2( 40, -40 )
nodes/fragment/37/node = SubResource( 234 )
nodes/fragment/37/position = Vector2( 0, 540 )
nodes/fragment/38/node = SubResource( 235 )
nodes/fragment/38/position = Vector2( -140, 40 )
nodes/fragment/40/node = SubResource( 236 )
nodes/fragment/40/position = Vector2( 320, 200 )
nodes/fragment/41/node = SubResource( 237 )
nodes/fragment/41/position = Vector2( 0, 140 )
nodes/fragment/42/node = SubResource( 238 )
nodes/fragment/42/position = Vector2( 0, 220 )
nodes/fragment/43/node = SubResource( 239 )
nodes/fragment/43/position = Vector2( 0, 300 )
nodes/fragment/44/node = SubResource( 240 )
nodes/fragment/44/position = Vector2( 0, 380 )
nodes/fragment/45/node = SubResource( 241 )
nodes/fragment/45/position = Vector2( 0, 460 )
nodes/fragment/connections = PoolIntArray( 40, 0, 0, 0, 40, 1, 0, 1, 4, 0, 40, 0, 38, 0, 40, 1, 41, 0, 40, 2, 42, 0, 40, 3, 43, 0, 40, 4, 44, 0, 40, 5, 45, 0, 40, 6, 37, 0, 40, 7, 37, 1, 40, 8 )

[sub_resource type="ShaderMaterial" id=243]
shader = SubResource( 242 )

[sub_resource type="VisualShaderNodeCustom" id=244]
default_input_values = [ 1, 21, 2, 0.5, 3, 1, 4, 0, 5, Vector3( 1, 1, 1 ), 6, 1 ]
script = ExtResource( 41 )

[sub_resource type="VisualShaderNodeInput" id=245]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=246]
constant = 21.0

[sub_resource type="VisualShaderNodeScalarConstant" id=247]
constant = 0.3

[sub_resource type="VisualShaderNodeScalarConstant" id=248]
constant = 0.2

[sub_resource type="VisualShaderNodeInput" id=249]
input_name = "time"

[sub_resource type="VisualShaderNodeColorConstant" id=250]
constant = Color( 0, 1, 0.557237, 1 )

[sub_resource type="VisualShader" id=251]
code = "shader_type canvas_item;


// ScanLinesSharpShape

float scanL1nesSharpFunc(vec2 _uv_scL1Shrp, float _am0nt_scL1Shrp, float _f1ll_scL1Shrp, float _spd_scL1Shrp, float _t1me_scL1Shrp) {
	return step(fract(_uv_scL1Shrp.y * _am0nt_scL1Shrp + _t1me_scL1Shrp * _spd_scL1Shrp), _f1ll_scL1Shrp);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Scalar:48
	float n_out48p0 = 21.000000;

// Scalar:49
	float n_out49p0 = 0.300000;

// Scalar:50
	float n_out50p0 = 0.200000;

// Input:51
	float n_out51p0 = TIME;

// Color:52
	vec3 n_out52p0 = vec3(0.000000, 1.000000, 0.557237);
	float n_out52p1 = 1.000000;

// ScanLinesSharpShape:46
	vec3 n_out46p0;
	float n_out46p1;
	{
		n_out46p0 = n_out52p0;
		n_out46p1 = scanL1nesSharpFunc(n_out47p0.xy, n_out48p0, n_out49p0, n_out50p0, n_out51p0) * n_out52p1;
	}

// Output:0
	COLOR.rgb = n_out46p0;
	COLOR.a = n_out46p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -394.592, -6.98999 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 660, 220 )
nodes/fragment/46/node = SubResource( 244 )
nodes/fragment/46/position = Vector2( 380, 220 )
nodes/fragment/47/node = SubResource( 245 )
nodes/fragment/47/position = Vector2( 140, 0 )
nodes/fragment/48/node = SubResource( 246 )
nodes/fragment/48/position = Vector2( 100, 80 )
nodes/fragment/49/node = SubResource( 247 )
nodes/fragment/49/position = Vector2( 100, 160 )
nodes/fragment/50/node = SubResource( 248 )
nodes/fragment/50/position = Vector2( 100, 240 )
nodes/fragment/51/node = SubResource( 249 )
nodes/fragment/51/position = Vector2( 100, 320 )
nodes/fragment/52/node = SubResource( 250 )
nodes/fragment/52/position = Vector2( 140, 420 )
nodes/fragment/connections = PoolIntArray( 46, 0, 0, 0, 46, 1, 0, 1, 47, 0, 46, 0, 48, 0, 46, 1, 52, 0, 46, 5, 52, 1, 46, 6, 51, 0, 46, 4, 50, 0, 46, 3, 49, 0, 46, 2 )

[sub_resource type="ShaderMaterial" id=252]
shader = SubResource( 251 )

[sub_resource type="VisualShaderNodeColorConstant" id=253]
constant = Color( 0.623529, 0.439216, 1, 1 )

[sub_resource type="VisualShaderNodeCustom" id=254]
default_input_values = [ 1, 0.5, 2, 20.0, 3, Vector3( 1, 1, 1 ), 4, 1 ]
script = ExtResource( 42 )

[sub_resource type="VisualShaderNodeScalarConstant" id=255]
constant = 0.3

[sub_resource type="VisualShaderNodeScalarConstant" id=256]
constant = 15.0

[sub_resource type="VisualShader" id=257]
code = "shader_type canvas_item;


// RandomStripesShape

float generateRand0mStripesFunc(vec2 _uv_stripes, float _fill_stripes, float _amount_stripes){
	_fill_stripes = min(max(_fill_stripes, 0.0), 1.0);
	return 1.0 - step(_fill_stripes, fract(sin(dot(floor(vec2(_uv_stripes.y) * _amount_stripes), vec2(12.9898, 78.233))) * 43758.5453123));
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Scalar:55
	float n_out55p0 = 0.300000;

// Scalar:56
	float n_out56p0 = 15.000000;

// Color:53
	vec3 n_out53p0 = vec3(0.623529, 0.439216, 1.000000);
	float n_out53p1 = 1.000000;

// RandomStripesShape:54
	vec3 n_out54p0;
	float n_out54p1;
	{
		n_out54p0 = n_out53p0;
		n_out54p1 = generateRand0mStripesFunc(n_out47p0.xy, n_out55p0, n_out56p0) * n_out53p1;
	}

// Output:0
	COLOR.rgb = n_out54p0;
	COLOR.a = n_out54p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -389.592, 56.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 660, 220 )
nodes/fragment/47/node = SubResource( 245 )
nodes/fragment/47/position = Vector2( 160, 140 )
nodes/fragment/53/node = SubResource( 253 )
nodes/fragment/53/position = Vector2( 180, 380 )
nodes/fragment/54/node = SubResource( 254 )
nodes/fragment/54/position = Vector2( 420, 220 )
nodes/fragment/55/node = SubResource( 255 )
nodes/fragment/55/position = Vector2( 140, 220 )
nodes/fragment/56/node = SubResource( 256 )
nodes/fragment/56/position = Vector2( 140, 300 )
nodes/fragment/connections = PoolIntArray( 54, 0, 0, 0, 54, 1, 0, 1, 47, 0, 54, 0, 53, 0, 54, 3, 53, 1, 54, 4, 55, 0, 54, 1, 56, 0, 54, 2 )

[sub_resource type="ShaderMaterial" id=258]
shader = SubResource( 257 )

[sub_resource type="VisualShaderNodeCustom" id=259]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5 ]
script = ExtResource( 43 )

[sub_resource type="VisualShaderNodeVec3Constant" id=260]

[sub_resource type="VisualShaderNodeScalarConstant" id=261]
constant = 10.0

[sub_resource type="VisualShader" id=262]
code = "shader_type canvas_item;


// GenericNoise2D

float hash2_gener1c2D(vec2 _p_hash2_gener1c) {
	return (fract(1e4 * sin(17.0 * _p_hash2_gener1c.x + _p_hash2_gener1c.y * 0.1) *
					(0.1 + abs(sin(_p_hash2_gener1c.y * 13.0 + _p_hash2_gener1c.x)))));
}

float genericNoise2D(vec2 _x_gener1c2D) {
	vec2 _temp_i_gener1c2D = floor(_x_gener1c2D);
	vec2 _temp_f_gener1c2D = fract(_x_gener1c2D);

	float _a_g1n2 = hash2_gener1c2D(_temp_i_gener1c2D);
	float _b_g1n2 = hash2_gener1c2D(_temp_i_gener1c2D + vec2(1.0, 0.0));
	float _c_g1n2 = hash2_gener1c2D(_temp_i_gener1c2D + vec2(0.0, 1.0));
	float _d_g1n2 = hash2_gener1c2D(_temp_i_gener1c2D + vec2(1.0, 1.0));
	
	vec2 _u_g1n2 = _temp_f_gener1c2D * _temp_f_gener1c2D * (3.0 - 2.0 * _temp_f_gener1c2D);
	return (mix(_a_g1n2, _b_g1n2, _u_g1n2.x) + (_c_g1n2 - _a_g1n2) *
				_u_g1n2.y * (1.0 - _u_g1n2.x) + (_d_g1n2 - _b_g1n2) * _u_g1n2.x * _u_g1n2.y);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:56
	vec3 n_out56p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:57
	float n_out57p0 = 10.000000;

// GenericNoise2D:55
	float n_out55p0;
	{
		n_out55p0 = genericNoise2D((n_out47p0.xy + n_out56p0.xy) * n_out57p0);
	}

// Output:0
	COLOR.rgb = vec3(n_out55p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -389.592, 56.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 660, 220 )
nodes/fragment/47/node = SubResource( 245 )
nodes/fragment/47/position = Vector2( 220, 140 )
nodes/fragment/55/node = SubResource( 259 )
nodes/fragment/55/position = Vector2( 440, 220 )
nodes/fragment/56/node = SubResource( 260 )
nodes/fragment/56/position = Vector2( 60, 220 )
nodes/fragment/57/node = SubResource( 261 )
nodes/fragment/57/position = Vector2( 200, 320 )
nodes/fragment/connections = PoolIntArray( 55, 0, 0, 0, 47, 0, 55, 0, 56, 0, 55, 1, 57, 0, 55, 2 )

[sub_resource type="ShaderMaterial" id=263]
shader = SubResource( 262 )

[sub_resource type="VisualShaderNodeCustom" id=264]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, Vector3( 0, 0, 0 ) ]
script = ExtResource( 44 )

[sub_resource type="VisualShaderNodeScalarConstant" id=265]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id=266]

[sub_resource type="VisualShaderNodeVec3Constant" id=267]

[sub_resource type="VisualShader" id=268]
code = "shader_type canvas_item;


// PerlinNoise2D

float perlin2dN0iseFunc(vec2 P, vec2 _per10d_perl2) {
	vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
	vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
	
	if (_per10d_perl2.x != 0.0 && _per10d_perl2.y != 0.0)
		Pi = mod(Pi, vec4(_per10d_perl2, _per10d_perl2));
	
	Pi = Pi - floor(Pi * (1.0 / 289.0)) * 289.0;
	vec4 ix = Pi.xzxz;
	vec4 iy = Pi.yyww;
	vec4 fx = Pf.xzxz;
	vec4 fy = Pf.yyww;
	
	vec4 i = (((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))-
		floor((((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))*(1.0/289.0))*289.0;
	
	vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
	vec4 gy = abs(gx) - 0.5 ;
	vec4 tx = floor(gx + 0.5);
	gx = gx - tx;
	
	vec2 g00 = vec2(gx.x,gy.x);
	vec2 g10 = vec2(gx.y,gy.y);
	vec2 g01 = vec2(gx.z,gy.z);
	vec2 g11 = vec2(gx.w,gy.w);
	
	vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;
	
	float n00 = dot(g00, vec2(fx.x, fy.x));
	float n10 = dot(g10, vec2(fx.y, fy.y));
	float n01 = dot(g01, vec2(fx.z, fy.z));
	float n11 = dot(g11, vec2(fx.w, fy.w));
	
	vec2 fade_xy = Pf.xy * Pf.xy * Pf.xy * (Pf.xy * (Pf.xy * 6.0 - 15.0) + 10.0);
	vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
	float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
	return 2.3 * n_xy;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:68
	vec3 n_out68p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:67
	float n_out67p0 = 10.000000;

// Vector:69
	vec3 n_out69p0 = vec3(0.000000, 0.000000, 0.000000);

// PerlinNoise2D:66
	float n_out66p0;
	{
		n_out66p0 = perlin2dN0iseFunc((n_out47p0.xy+n_out68p0.xy)*n_out67p0, n_out69p0.xy);
	}

// Output:0
	COLOR.rgb = vec3(n_out66p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -94.592, 162 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 680, 220 )
nodes/fragment/47/node = SubResource( 245 )
nodes/fragment/47/position = Vector2( 200, 120 )
nodes/fragment/66/node = SubResource( 264 )
nodes/fragment/66/position = Vector2( 480, 220 )
nodes/fragment/67/node = SubResource( 265 )
nodes/fragment/67/position = Vector2( 200, 300 )
nodes/fragment/68/node = SubResource( 266 )
nodes/fragment/68/position = Vector2( 60, 200 )
nodes/fragment/69/node = SubResource( 267 )
nodes/fragment/69/position = Vector2( 60, 380 )
nodes/fragment/connections = PoolIntArray( 66, 0, 0, 0, 47, 0, 66, 0, 67, 0, 66, 2, 69, 0, 66, 3, 68, 0, 66, 1 )

[sub_resource type="ShaderMaterial" id=269]
shader = SubResource( 268 )

[sub_resource type="VisualShaderNodeCustom" id=270]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 0 ]
script = ExtResource( 45 )

[sub_resource type="VisualShaderNodeScalarConstant" id=271]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id=272]

[sub_resource type="VisualShaderNodeInput" id=273]
input_name = "time"

[sub_resource type="VisualShader" id=274]
code = "shader_type canvas_item;


// PerlinNoise3D

float perlin3dNoiseFunc(vec3 P) {
	vec3 Pi0 = floor(P);
	vec3 Pi1 = Pi0 + vec3(1.0);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	vec4 ixy = (((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy))-
		floor(((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*(1.0/289.0))*289.0;
	vec4 ixy0 = ((((ixy + iz0)*34.0)+1.0)*(ixy + iz0))-floor((((ixy + iz0)*34.0)+1.0)*(ixy + iz0)*(1.0/289.0))*289.0;
	vec4 ixy1 = ((((ixy + iz1)*34.0)+1.0)*(ixy + iz1))-floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1)*(1.0/289.0))*289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:64
	vec3 n_out64p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:63
	float n_out63p0 = 10.000000;

// Input:65
	float n_out65p0 = TIME;

// PerlinNoise3D:62
	float n_out62p0;
	{
		n_out62p0 = perlin3dNoiseFunc(vec3((n_out47p0.xy+n_out64p0.xy) * n_out63p0, n_out65p0));
	}

// Output:0
	COLOR.rgb = vec3(n_out62p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -94.592, 162 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 680, 280 )
nodes/fragment/47/node = SubResource( 245 )
nodes/fragment/47/position = Vector2( 220, 180 )
nodes/fragment/62/node = SubResource( 270 )
nodes/fragment/62/position = Vector2( 480, 280 )
nodes/fragment/63/node = SubResource( 271 )
nodes/fragment/63/position = Vector2( 220, 360 )
nodes/fragment/64/node = SubResource( 272 )
nodes/fragment/64/position = Vector2( 80, 260 )
nodes/fragment/65/node = SubResource( 273 )
nodes/fragment/65/position = Vector2( 220, 440 )
nodes/fragment/connections = PoolIntArray( 47, 0, 62, 0, 62, 0, 0, 0, 63, 0, 62, 2, 64, 0, 62, 1, 65, 0, 62, 3 )

[sub_resource type="ShaderMaterial" id=275]
shader = SubResource( 274 )

[sub_resource type="VisualShaderNodeCustom" id=276]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, Vector3( 0, 0, 0 ), 4, 0 ]
script = ExtResource( 46 )

[sub_resource type="VisualShaderNodeScalarConstant" id=277]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id=278]

[sub_resource type="VisualShaderNodeVec3Constant" id=279]
constant = Vector3( 1, 10, 0 )

[sub_resource type="VisualShader" id=280]
code = "shader_type canvas_item;


// PerlinPeriodicNoise3D

float perlin3dPeriodicN0iseFunc(vec3 P, vec3 rep) {
	vec3 Pi0 = mod(floor(P), rep);
	vec3 Pi1 = mod(Pi0 + vec3(1.0), rep);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	vec4 ixy = (((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy))-
		floor(((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*(1.0/289.0))*289.0;
	vec4 ixy0 = ((((ixy + iz0)*34.0)+1.0)*(ixy + iz0))-floor((((ixy + iz0)*34.0)+1.0)*(ixy + iz0)*(1.0/289.0))*289.0;
	vec4 ixy1 = ((((ixy + iz1)*34.0)+1.0)*(ixy + iz1))-floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1)*(1.0/289.0))*289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:68
	vec3 n_out68p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:67
	float n_out67p0 = 10.000000;

// Vector:69
	vec3 n_out69p0 = vec3(1.000000, 10.000000, 0.000000);

// Input:65
	float n_out65p0 = TIME;

// PerlinPeriodicNoise3D:66
	float n_out66p0;
	{
		n_out66p0 = perlin3dPeriodicN0iseFunc(vec3((n_out47p0.xy + n_out68p0.xy) * n_out67p0, n_out65p0), n_out69p0);
	}

// Output:0
	COLOR.rgb = vec3(n_out66p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -94.592, 162 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 700, 280 )
nodes/fragment/47/node = SubResource( 245 )
nodes/fragment/47/position = Vector2( 220, 160 )
nodes/fragment/65/node = SubResource( 273 )
nodes/fragment/65/position = Vector2( 220, 520 )
nodes/fragment/66/node = SubResource( 276 )
nodes/fragment/66/position = Vector2( 460, 280 )
nodes/fragment/67/node = SubResource( 277 )
nodes/fragment/67/position = Vector2( 220, 340 )
nodes/fragment/68/node = SubResource( 278 )
nodes/fragment/68/position = Vector2( 80, 240 )
nodes/fragment/69/node = SubResource( 279 )
nodes/fragment/69/position = Vector2( 80, 420 )
nodes/fragment/connections = PoolIntArray( 66, 0, 0, 0, 47, 0, 66, 0, 67, 0, 66, 2, 68, 0, 66, 1, 69, 0, 66, 3, 65, 0, 66, 4 )

[sub_resource type="ShaderMaterial" id=281]
shader = SubResource( 280 )

[sub_resource type="VisualShaderNodeCustom" id=282]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1.0, 4, 0 ]
script = ExtResource( 47 )

[sub_resource type="VisualShaderNodeScalarConstant" id=283]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id=284]

[sub_resource type="VisualShaderNodeScalarConstant" id=285]
constant = 1.0

[sub_resource type="VisualShader" id=286]
code = "shader_type canvas_item;


// PerlinNoise4D

vec4 _permute_perlin4d_n0ise_func(vec4 x) {
	return ((x*34.0)+1.0)*x - floor(((x*34.0)+1.0)*x * (1.0 / 289.0)) * 289.0;
}
float perlin4dNoiseFunc(vec4 P) {
	vec4 Pi0 = floor(P);
	vec4 Pi1 = Pi0 + 1.0;
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec4 Pf0 = fract(P);
	vec4 Pf1 = Pf0 - 1.0;
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.zzzz);
	vec4 iz1 = vec4(Pi1.zzzz);
	vec4 iw0 = vec4(Pi0.wwww);
	vec4 iw1 = vec4(Pi1.wwww);
	
	vec4 ixy = _permute_perlin4d_n0ise_func(_permute_perlin4d_n0ise_func(ix) + iy);
	vec4 ixy0 = _permute_perlin4d_n0ise_func(ixy + iz0);
	vec4 ixy1 = _permute_perlin4d_n0ise_func(ixy + iz1);
	vec4 ixy00 = _permute_perlin4d_n0ise_func(ixy0 + iw0);
	vec4 ixy01 = _permute_perlin4d_n0ise_func(ixy0 + iw1);
	vec4 ixy10 = _permute_perlin4d_n0ise_func(ixy1 + iw0);
	vec4 ixy11 = _permute_perlin4d_n0ise_func(ixy1 + iw1);
	
	vec4 gx00 = ixy00 * (1.0 / 7.0);
	vec4 gy00 = floor(gx00) * (1.0 / 7.0);
	vec4 gz00 = floor(gy00) * (1.0 / 6.0);
	gx00 = fract(gx00) - 0.5;
	gy00 = fract(gy00) - 0.5;
	gz00 = fract(gz00) - 0.5;
	vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);
	vec4 sw00 = step(gw00, vec4(0.0));
	gx00 -= sw00 * (step(0.0, gx00) - 0.5);
	gy00 -= sw00 * (step(0.0, gy00) - 0.5);
	
	vec4 gx01 = ixy01 * (1.0 / 7.0);
	vec4 gy01 = floor(gx01) * (1.0 / 7.0);
	vec4 gz01 = floor(gy01) * (1.0 / 6.0);
	gx01 = fract(gx01) - 0.5;
	gy01 = fract(gy01) - 0.5;
	gz01 = fract(gz01) - 0.5;
	vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);
	vec4 sw01 = step(gw01, vec4(0.0));
	gx01 -= sw01 * (step(0.0, gx01) - 0.5);
	gy01 -= sw01 * (step(0.0, gy01) - 0.5);
	
	vec4 gx10 = ixy10 * (1.0 / 7.0);
	vec4 gy10 = floor(gx10) * (1.0 / 7.0);
	vec4 gz10 = floor(gy10) * (1.0 / 6.0);
	gx10 = fract(gx10) - 0.5;
	gy10 = fract(gy10) - 0.5;
	gz10 = fract(gz10) - 0.5;
	vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);
	vec4 sw10 = step(gw10, vec4(0.0));
	gx10 -= sw10 * (step(0.0, gx10) - 0.5);
	gy10 -= sw10 * (step(0.0, gy10) - 0.5);
	
	vec4 gx11 = ixy11 * (1.0 / 7.0);
	vec4 gy11 = floor(gx11) * (1.0 / 7.0);
	vec4 gz11 = floor(gy11) * (1.0 / 6.0);
	gx11 = fract(gx11) - 0.5;
	gy11 = fract(gy11) - 0.5;
	gz11 = fract(gz11) - 0.5;
	vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);
	vec4 sw11 = step(gw11, vec4(0.0));
	gx11 -= sw11 * (step(0.0, gx11) - 0.5);
	gy11 -= sw11 * (step(0.0, gy11) - 0.5);
	
	vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);
	vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);
	vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);
	vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);
	vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);
	vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);
	vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);
	vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);
	vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);
	vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);
	vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);
	vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);
	vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);
	vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);
	vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);
	vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);
	
	vec4 norm00 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100));
	g0000 *= norm00.x;
	g0100 *= norm00.y;
	g1000 *= norm00.z;
	g1100 *= norm00.w;
	
	vec4 norm01 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101));
	g0001 *= norm01.x;
	g0101 *= norm01.y;
	g1001 *= norm01.z;
	g1101 *= norm01.w;
	
	vec4 norm10 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110));
	g0010 *= norm10.x;
	g0110 *= norm10.y;
	g1010 *= norm10.z;
	g1110 *= norm10.w;
	
	vec4 norm11 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111));
	g0011 *= norm11.x;
	g0111 *= norm11.y;
	g1011 *= norm11.z;
	g1111 *= norm11.w;
	
	float n0000 = dot(g0000, Pf0);
	float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));
	float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));
	float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));
	float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));
	float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
	float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));
	float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));
	float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));
	float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));
	float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
	float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));
	float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));
	float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));
	float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));
	float n1111 = dot(g1111, Pf1);
	
	vec4 fade_xyzw = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);
	vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);
	vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);
	vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);
	float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);
	return 2.2 * n_xyzw;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Scalar:71
	float n_out71p0 = 10.000000;

// Scalar:73
	float n_out73p0 = 1.000000;

// Input:65
	float n_out65p0 = TIME;

// PerlinNoise4D:70
	vec3 n_in70p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_out70p0;
	{
		n_out70p0 = perlin4dNoiseFunc(vec4((n_out47p0.xy + n_in70p1.xy) * n_out71p0, n_out73p0, n_out65p0));
	}

// Output:0
	COLOR.rgb = vec3(n_out70p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -94.592, 162 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 700, 280 )
nodes/fragment/47/node = SubResource( 245 )
nodes/fragment/47/position = Vector2( 220, 180 )
nodes/fragment/65/node = SubResource( 273 )
nodes/fragment/65/position = Vector2( 220, 520 )
nodes/fragment/70/node = SubResource( 282 )
nodes/fragment/70/position = Vector2( 500, 280 )
nodes/fragment/71/node = SubResource( 283 )
nodes/fragment/71/position = Vector2( 220, 360 )
nodes/fragment/72/node = SubResource( 284 )
nodes/fragment/72/position = Vector2( 80, 260 )
nodes/fragment/73/node = SubResource( 285 )
nodes/fragment/73/position = Vector2( 220, 440 )
nodes/fragment/connections = PoolIntArray( 70, 0, 0, 0, 47, 0, 70, 0, 71, 0, 70, 2, 65, 0, 70, 4, 73, 0, 70, 3 )

[sub_resource type="ShaderMaterial" id=287]
shader = SubResource( 286 )

[sub_resource type="VisualShaderNodeInput" id=288]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=289]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id=290]

[sub_resource type="VisualShaderNodeCustom" id=291]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5 ]
script = ExtResource( 48 )

[sub_resource type="VisualShader" id=292]
code = "shader_type canvas_item;


// SimplexNoise2D

vec3 _permute_simplex2_n0ise(vec3 x) {
	return ((x*34.0)+1.0)*x-floor(((x*34.0)+1.0)*x*(1.0/289.0))*289.0;
}

float simplex2dN0iseFunc(vec2 v) {
	vec4 C = vec4(0.211324865405187,
				0.366025403784439,
				-0.577350269189626,
				0.024390243902439);
	
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);
	
	vec2 i1;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec4 x12 = vec4(x0.xy, x0.xy) + C.xxzz;
	x12.xy -= i1;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec3 p = _permute_simplex2_n0ise(_permute_simplex2_n0ise(i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0));
	
	vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), vec3(0.0));
	m = m * m;
	m = m * m;
	
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	
	m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
	
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:72
	vec3 n_out72p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:71
	float n_out71p0 = 10.000000;

// SimplexNoise2D:74
	float n_out74p0;
	{
		n_out74p0 = simplex2dN0iseFunc((n_out47p0.xy+n_out72p0.xy)*n_out71p0);
	}

// Output:0
	COLOR.rgb = vec3(n_out74p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -94.592, 162 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 720, 280 )
nodes/fragment/47/node = SubResource( 288 )
nodes/fragment/47/position = Vector2( 240, 200 )
nodes/fragment/71/node = SubResource( 289 )
nodes/fragment/71/position = Vector2( 240, 380 )
nodes/fragment/72/node = SubResource( 290 )
nodes/fragment/72/position = Vector2( 100, 280 )
nodes/fragment/74/node = SubResource( 291 )
nodes/fragment/74/position = Vector2( 500, 280 )
nodes/fragment/connections = PoolIntArray( 47, 0, 74, 0, 72, 0, 74, 1, 71, 0, 74, 2, 74, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=293]
shader = SubResource( 292 )

[sub_resource type="VisualShaderNodeScalarConstant" id=294]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id=295]

[sub_resource type="VisualShaderNodeCustom" id=296]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 0 ]
script = ExtResource( 49 )

[sub_resource type="VisualShaderNodeInput" id=297]
input_name = "time"

[sub_resource type="VisualShader" id=298]
code = "shader_type canvas_item;


// SimplexNoise3D

vec4 _permute_simplex3_n0ise(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float simplex3dN0iseFunc(vec3 v) { 
	vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
	vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
	
	vec3 i  = floor(v + dot(v, vec3(C.y)));
	vec3 x0 = v - i + dot(i, vec3(C.x)) ;
	
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min( g.xyz, l.zxy );
	vec3 i2 = max( g.xyz, l.zxy );
	
	vec3 x1 = x0 - i1 + vec3(C.x);
	vec3 x2 = x0 - i2 + vec3(C.y);
	vec3 x3 = x0 - D.yyy;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec4 p = _permute_simplex3_n0ise(_permute_simplex3_n0ise(_permute_simplex3_n0ise(
	 		i.z + vec4(0.0, i1.z, i2.z, 1.0))
		+   i.y + vec4(0.0, i1.y, i2.y, 1.0))
		+   i.x + vec4(0.0, i1.x, i2.x, 1.0));
	
	float n_ = 0.142857142857;
	vec3  ns = n_ * D.wyz - D.xzx;
	
	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
	
	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_ );
	
	vec4 x = x_ *ns.x + vec4(ns.y);
	vec4 y = y_ *ns.x + vec4(ns.y);
	vec4 h = 1.0 - abs(x) - abs(y);
	
	vec4 b0 = vec4( x.xy, y.xy );
	vec4 b1 = vec4( x.zw, y.zw );
	
	vec4 s0 = floor(b0)*2.0 + 1.0;
	vec4 s1 = floor(b1)*2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));
	
	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
	
	vec3 p0 = vec3(a0.xy,h.x);
	vec3 p1 = vec3(a0.zw,h.y);
	vec3 p2 = vec3(a1.xy,h.z);
	vec3 p3 = vec3(a1.zw,h.w);
	
	vec4 norm = 2.79284291400159 - 0.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	
	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
	m = m * m;
	return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:76
	vec3 n_out76p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:75
	float n_out75p0 = 10.000000;

// Input:78
	float n_out78p0 = TIME;

// SimplexNoise3D:77
	float n_out77p0;
	{
		n_out77p0 = simplex3dN0iseFunc(vec3((n_out47p0.xy + n_out76p0.xy) * n_out75p0, n_out78p0));
	}

// Output:0
	COLOR.rgb = vec3(n_out77p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -317.592, 95.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 720, 280 )
nodes/fragment/47/node = SubResource( 288 )
nodes/fragment/47/position = Vector2( 220, 180 )
nodes/fragment/75/node = SubResource( 294 )
nodes/fragment/75/position = Vector2( 220, 360 )
nodes/fragment/76/node = SubResource( 295 )
nodes/fragment/76/position = Vector2( 80, 260 )
nodes/fragment/77/node = SubResource( 296 )
nodes/fragment/77/position = Vector2( 500, 280 )
nodes/fragment/78/node = SubResource( 297 )
nodes/fragment/78/position = Vector2( 220, 440 )
nodes/fragment/connections = PoolIntArray( 77, 0, 0, 0, 47, 0, 77, 0, 76, 0, 77, 1, 75, 0, 77, 2, 78, 0, 77, 3 )

[sub_resource type="ShaderMaterial" id=299]
shader = SubResource( 298 )

[sub_resource type="VisualShaderNodeVec3Constant" id=300]

[sub_resource type="VisualShaderNodeCustom" id=301]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1, 4, 0 ]
script = ExtResource( 50 )

[sub_resource type="VisualShaderNodeScalarConstant" id=302]
constant = 10.0

[sub_resource type="VisualShaderNodeScalarConstant" id=303]
constant = 1.0

[sub_resource type="VisualShader" id=304]
code = "shader_type canvas_item;


// SimplexNoise4D

vec4 _permute_4_s4_n0ise(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float _permute_s4_n0ise(float x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
vec4 _grad4_s4_n0ise(float j, vec4 ip) {
	vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);
	vec4 p, s;
	p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;
	p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
	s = vec4(lessThan(p, vec4(0.0)));
	p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; 
	return p;
}
float simplex4dN0iseFunc(vec4 v) {
	vec4 C = vec4( 0.138196601125011,
				0.276393202250021,
				0.414589803375032,
				-0.447213595499958);
	
	vec4 i  = floor(v + dot(v, vec4(0.309016994374947451)) );
	vec4 x0 = v -   i + dot(i, C.xxxx);
	
	vec4 i0;
	vec3 isX = step( x0.yzw, x0.xxx );
	vec3 isYZ = step( x0.zww, x0.yyz );
	i0.x = isX.x + isX.y + isX.z;
	i0.yzw = 1.0 - isX;
	i0.y += isYZ.x + isYZ.y;
	i0.zw += 1.0 - isYZ.xy;
	i0.z += isYZ.z;
	i0.w += 1.0 - isYZ.z;
	
	vec4 i3 = clamp( i0, 0.0, 1.0 );
	vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );
	vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );
	
	vec4 x1 = x0 - i1 + C.xxxx;
	vec4 x2 = x0 - i2 + C.yyyy;
	vec4 x3 = x0 - i3 + C.zzzz;
	vec4 x4 = x0 + C.wwww;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	float j0 = _permute_s4_n0ise( _permute_s4_n0ise( _permute_s4_n0ise( _permute_s4_n0ise(i.w) + i.z) + i.y) + i.x);
	vec4 j1 = _permute_4_s4_n0ise( _permute_4_s4_n0ise( _permute_4_s4_n0ise( _permute_4_s4_n0ise (
				i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))
				+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))
				+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))
				+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));
	
	vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;
	
	vec4 p0 = _grad4_s4_n0ise(j0,   ip);
	vec4 p1 = _grad4_s4_n0ise(j1.x, ip);
	vec4 p2 = _grad4_s4_n0ise(j1.y, ip);
	vec4 p3 = _grad4_s4_n0ise(j1.z, ip);
	vec4 p4 = _grad4_s4_n0ise(j1.w, ip);
	
	vec4 norm = 2.79284291400159 - 1.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	p4 *= 2.79284291400159 - 1.85373472095314 * dot(p4,p4);
	
	vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), vec3(0.0));
	vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)), vec2(0.0));
	m0 = m0 * m0;
	m1 = m1 * m1;
	return 33.0 *(dot(m0*m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)))
				+ dot(m1*m1, vec2(dot(p3, x3), dot(p4, x4))));
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:80
	vec3 n_out80p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:82
	float n_out82p0 = 10.000000;

// Scalar:83
	float n_out83p0 = 1.000000;

// Input:78
	float n_out78p0 = TIME;

// SimplexNoise4D:81
	float n_out81p0;
	{
		n_out81p0 = simplex4dN0iseFunc(vec4((n_out47p0.xy + n_out80p0.xy) * n_out82p0, n_out83p0, n_out78p0));
	}

// Output:0
	COLOR.rgb = vec3(n_out81p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -94.592, 162 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 800, 400 )
nodes/fragment/47/node = SubResource( 288 )
nodes/fragment/47/position = Vector2( 300, 260 )
nodes/fragment/78/node = SubResource( 297 )
nodes/fragment/78/position = Vector2( 300, 600 )
nodes/fragment/80/node = SubResource( 300 )
nodes/fragment/80/position = Vector2( 160, 340 )
nodes/fragment/81/node = SubResource( 301 )
nodes/fragment/81/position = Vector2( 600, 400 )
nodes/fragment/82/node = SubResource( 302 )
nodes/fragment/82/position = Vector2( 300, 440 )
nodes/fragment/83/node = SubResource( 303 )
nodes/fragment/83/position = Vector2( 300, 520 )
nodes/fragment/connections = PoolIntArray( 81, 0, 0, 0, 47, 0, 81, 0, 80, 0, 81, 1, 82, 0, 81, 2, 83, 0, 81, 3, 78, 0, 81, 4 )

[sub_resource type="ShaderMaterial" id=305]
shader = SubResource( 304 )

[sub_resource type="VisualShaderNodeCustom" id=306]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1 ]
script = ExtResource( 51 )

[sub_resource type="VisualShaderNodeVec3Constant" id=307]

[sub_resource type="VisualShaderNodeScalarConstant" id=308]
constant = 10.0

[sub_resource type="VisualShaderNodeScalarConstant" id=309]
constant = 1.0

[sub_resource type="VisualShader" id=310]
code = "shader_type canvas_item;


// WorleyNoise2D

vec2 cellular2dNoiseFunc(vec2 P, float _jitter_w2d) {
	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 3/7
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec3 oi = vec3(-1.0, 0.0, 1.0);
	vec3 of = vec3(-0.5, 0.5, 1.5);
	vec3 px = (34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)-floor((34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)*(1.0/289.0))* 289.0;
	vec3 p = (34.0*(px.x+Pi.y+ oi)+1.0)*(px.x+Pi.y+ oi)-floor((34.0*(px.x+Pi.y+oi)+1.0)*(px.x+Pi.y+ oi)*(1.0/289.0))*289.0;
	vec3 ox = fract(p*K) - Ko;
	vec3 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	vec3 dx = Pf.x + 0.5 + _jitter_w2d*ox;
	vec3 dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d1 = dx * dx + dy * dy;
	p = (34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)-floor((34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 0.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d2 = dx * dx + dy * dy;
	p = (34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)-floor((34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 1.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d3 = dx * dx + dy * dy;
	vec3 d1a = min(d1, d2);
	d2 = max(d1, d2);
	d2 = min(d2, d3);
	d1 = min(d1a, d2);
	d2 = max(d1a, d2);
	d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx;
	d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx;
	d1.yz = min(d1.yz, d2.yz);
	d1.y = min(d1.y, d1.z);
	d1.y = min(d1.y, d2.x);
	return sqrt(d1.xy);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:85
	vec3 n_out85p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:86
	float n_out86p0 = 10.000000;

// Scalar:87
	float n_out87p0 = 1.000000;

// WorleyNoise2D:84
	float n_out84p0;
	float n_out84p1;
	{
		vec2 n_out84p0n_out84p1 = cellular2dNoiseFunc((n_out47p0.xy+n_out85p0.xy)*n_out86p0, min(max(n_out87p0, 0.0), 1.0));
		n_out84p0 = n_out84p0n_out84p1.x;
		n_out84p1 = n_out84p0n_out84p1.y;
	}

// Output:0
	COLOR.rgb = vec3(n_out84p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -317.592, 95.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 740, 280 )
nodes/fragment/47/node = SubResource( 288 )
nodes/fragment/47/position = Vector2( 220, 140 )
nodes/fragment/84/node = SubResource( 306 )
nodes/fragment/84/position = Vector2( 500, 280 )
nodes/fragment/85/node = SubResource( 307 )
nodes/fragment/85/position = Vector2( 90, 230 )
nodes/fragment/86/node = SubResource( 308 )
nodes/fragment/86/position = Vector2( 230, 330 )
nodes/fragment/87/node = SubResource( 309 )
nodes/fragment/87/position = Vector2( 230, 410 )
nodes/fragment/connections = PoolIntArray( 85, 0, 84, 1, 86, 0, 84, 2, 87, 0, 84, 3, 47, 0, 84, 0, 84, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=311]
shader = SubResource( 310 )

[sub_resource type="VisualShaderNodeCustom" id=312]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1 ]
script = ExtResource( 52 )

[sub_resource type="VisualShaderNodeVec3Constant" id=313]

[sub_resource type="VisualShaderNodeScalarConstant" id=314]
constant = 10.0

[sub_resource type="VisualShaderNodeScalarConstant" id=315]
constant = 1.0

[sub_resource type="VisualShader" id=316]
code = "shader_type canvas_item;


// WorleyNoise2x2

float cellular2x2NoiseFunc(vec2 P, float _jitter_w2x2) {
	float K = 0.142857142857; // 1/7
	float K2 = 0.0714285714285; // K/2
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec4 Pfx = Pf.x + vec4(-0.5, -1.5, -0.5, -1.5);
	vec4 Pfy = Pf.y + vec4(-0.5, -0.5, -1.5, -1.5);
	vec4 p = ((34.0*(Pi.x + vec4(0.0, 1.0, 0.0, 1.0))+1.0)*(Pi.x + vec4(0.0, 1.0, 0.0, 1.0)))-floor(((34.0*(Pi.x + vec4(0.0, 1.0, 0.0, 1.0))+1.0)*(Pi.x + vec4(0.0, 1.0, 0.0, 1.0)))*(1.0/289.0))*289.0;
	p = ((34.0*(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0))+1.0)*(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0)))-floor(((34.0*(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0))+1.0)*(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0)))*(1.0/289.0))*289.0;
	vec4 ox = (p - floor(p * (1.0 / 7.0)) * 7.0)*K+K2;
	vec4 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0)*K+K2;
	vec4 dx = Pfx + _jitter_w2x2*ox;
	vec4 dy = Pfy + _jitter_w2x2*oy;
	vec4 d = dx * dx + dy * dy;
	d.xy = min(d.xy, d.zw);
	d.x = min(d.x, d.y);
	return sqrt(d.x);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:89
	vec3 n_out89p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:90
	float n_out90p0 = 10.000000;

// Scalar:91
	float n_out91p0 = 1.000000;

// WorleyNoise2x2:88
	float n_out88p0;
	{
		n_out88p0 = cellular2x2NoiseFunc((n_out47p0.xy+n_out89p0.xy)*n_out90p0, min(max(n_out91p0, 0.0), 1.0));
	}

// Output:0
	COLOR.rgb = vec3(n_out88p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -317.592, 95.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 740, 280 )
nodes/fragment/47/node = SubResource( 288 )
nodes/fragment/47/position = Vector2( 220, 140 )
nodes/fragment/88/node = SubResource( 312 )
nodes/fragment/88/position = Vector2( 520, 280 )
nodes/fragment/89/node = SubResource( 313 )
nodes/fragment/89/position = Vector2( 100, 240 )
nodes/fragment/90/node = SubResource( 314 )
nodes/fragment/90/position = Vector2( 240, 340 )
nodes/fragment/91/node = SubResource( 315 )
nodes/fragment/91/position = Vector2( 240, 420 )
nodes/fragment/connections = PoolIntArray( 47, 0, 88, 0, 88, 0, 0, 0, 89, 0, 88, 1, 90, 0, 88, 2, 91, 0, 88, 3 )

[sub_resource type="ShaderMaterial" id=317]
shader = SubResource( 316 )

[sub_resource type="VisualShaderNodeCustom" id=318]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1, 4, 0 ]
script = ExtResource( 53 )

[sub_resource type="VisualShaderNodeVec3Constant" id=319]

[sub_resource type="VisualShaderNodeScalarConstant" id=320]
constant = 10.0

[sub_resource type="VisualShaderNodeScalarConstant" id=321]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=322]
input_name = "time"

[sub_resource type="VisualShader" id=323]
code = "shader_type canvas_item;


// WorleyNoise2x2x2

float cellular2x2x2NoiseFunc(vec3 P, float _jitter_w2x2x2) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P)- floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P);
	vec4 Pfx = Pf.x + vec4(0.0, -1.0, 0.0, -1.0);
	vec4 Pfy = Pf.y + vec4(0.0, 0.0, -1.0, -1.0);
	vec4 p = (34.0*(Pi.x+vec4(0.0,1.0,0.0,1.0))+1.0)*(Pi.x+vec4(0.0,1.0,0.0,1.0))-floor((34.0*(Pi.x+vec4(0.0,1.0,0.0,1.0))+1.0)*(Pi.x+vec4(0.0,1.0,0.0,1.0))*(1.0/289.0))*289.0;
	p = (34.0*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))+1.0)*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))-floor((34.0*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))+1.0)*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))*(1.0/289.0))*289.0;
	vec4 p1 = (34.0*(p+Pi.z)+1.0)*(p+Pi.z)-floor((34.0*(p+Pi.z)+1.0)*(p+Pi.z)*(1.0/289.0))*289.0;
	vec4 p2 = (34.0*(p+Pi.z+vec4(1.0))+1.0)*(p+Pi.z+vec4(1.0))-floor((34.0*(p+Pi.z+vec4(1.0))+1.0)*(p+Pi.z+vec4(1.0))*(1.0/289.0))*289.0;
	vec4 ox1 = fract(p1*K) - Ko;
	vec4 oy1 = (floor(p1*K) - floor(floor(p1*K) * (1.0 / 7.0)) * 7.0)*K - Ko;
	vec4 oz1 = floor(p1*K2)*Kz - Kzo;
	vec4 ox2 = fract(p2*K) - Ko;
	vec4 oy2 = (floor(p2*K) - floor(floor(p2*K) * (1.0 / 7.0)) * 7.0)*K - Ko;
	vec4 oz2 = floor(p2*K2)*Kz - Kzo;
	vec4 dx1 = Pfx + _jitter_w2x2x2*ox1;
	vec4 dy1 = Pfy + _jitter_w2x2x2*oy1;
	vec4 dz1 = Pf.z + _jitter_w2x2x2*oz1;
	vec4 dx2 = Pfx + _jitter_w2x2x2*ox2;
	vec4 dy2 = Pfy + _jitter_w2x2x2*oy2;
	vec4 dz2 = Pf.z - 1.0 + _jitter_w2x2x2*oz2;
	vec4 d1 = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
	vec4 d2 = dx2 * dx2 + dy2 * dy2 + dz2 * dz2;
	d1 = min(d1, d2);
	d1.xy = min(d1.xy, d1.wz);
	d1.x = min(d1.x, d1.y);
	return sqrt(d1.x);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:93
	vec3 n_out93p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:94
	float n_out94p0 = 10.000000;

// Scalar:95
	float n_out95p0 = 1.000000;

// Input:96
	float n_out96p0 = TIME;

// WorleyNoise2x2x2:92
	float n_out92p0;
	{
		n_out92p0 = cellular2x2x2NoiseFunc(vec3((n_out47p0.xy + n_out93p0.xy) * n_out94p0, n_out96p0), min(max(n_out95p0, 0.0), 1.0));
	}

// Output:0
	COLOR.rgb = vec3(n_out92p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -317.592, 95.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 760, 280 )
nodes/fragment/47/node = SubResource( 288 )
nodes/fragment/47/position = Vector2( 260, 140 )
nodes/fragment/92/node = SubResource( 318 )
nodes/fragment/92/position = Vector2( 520, 280 )
nodes/fragment/93/node = SubResource( 319 )
nodes/fragment/93/position = Vector2( 120, 220 )
nodes/fragment/94/node = SubResource( 320 )
nodes/fragment/94/position = Vector2( 260, 320 )
nodes/fragment/95/node = SubResource( 321 )
nodes/fragment/95/position = Vector2( 260, 400 )
nodes/fragment/96/node = SubResource( 322 )
nodes/fragment/96/position = Vector2( 260, 480 )
nodes/fragment/connections = PoolIntArray( 92, 0, 0, 0, 47, 0, 92, 0, 93, 0, 92, 1, 94, 0, 92, 2, 95, 0, 92, 3, 96, 0, 92, 4 )

[sub_resource type="ShaderMaterial" id=324]
shader = SubResource( 323 )

[sub_resource type="VisualShaderNodeScalarConstant" id=325]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id=326]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1, 4, 0 ]
script = ExtResource( 54 )

[sub_resource type="VisualShaderNodeVec3Constant" id=327]

[sub_resource type="VisualShaderNodeScalarConstant" id=328]
constant = 10.0

[sub_resource type="VisualShader" id=329]
code = "shader_type canvas_item;


// WorleyNoise3D

vec2 cellular3dNoiseFunc(vec3 P, float _jitter_w3d) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P) - 0.5;
	
	vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
	vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
	vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);
	
	vec3 p = ((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)*(Pi.x+vec3(-1.0,0.0,1.0)))-floor(((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)
				*(Pi.x+vec3(-1.0,0.0,1.0)))*(1.0/289.0))*289.0;
	vec3 p1 = ((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))-floor(((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))*(1.0/289.0))*289.0;
	vec3 p2 = ((34.0*(p+Pi.y)+1.0)*(p+Pi.y))-floor(((34.0*(p+Pi.y)+1.0)*(p+Pi.y))*(1.0/289.0))*289.0;
	vec3 p3 = ((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))-floor(((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))*(1.0/289.0))*289.0;
	
	vec3 p11 = ((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))-floor(((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p12 = ((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))-floor(((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))*(1.0/289.0))*289.0;
	vec3 p13 = ((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))-floor(((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p21 = ((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))-floor(((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p22 = ((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))-floor(((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))*(1.0/289.0))*289.0;
	vec3 p23 = ((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))-floor(((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p31 = ((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))-floor(((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p32 = ((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))-floor(((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))*(1.0/289.0))*289.0;
	vec3 p33 = ((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))-floor(((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 ox11 = fract(p11*K) - Ko;
	vec3 oy11 = ((floor(p11*K))-floor((floor(p11*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz11 = floor(p11*K2)*Kz - Kzo;
	
	vec3 ox12 = fract(p12*K) - Ko;
	vec3 oy12 = ((floor(p12*K))-floor((floor(p12*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz12 = floor(p12*K2)*Kz - Kzo;
	
	vec3 ox13 = fract(p13*K) - Ko;
	vec3 oy13 = ((floor(p13*K))-floor((floor(p13*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz13 = floor(p13*K2)*Kz - Kzo;
	
	vec3 ox21 = fract(p21*K) - Ko;
	vec3 oy21 = ((floor(p21*K))-floor((floor(p21*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz21 = floor(p21*K2)*Kz - Kzo;
	
	vec3 ox22 = fract(p22*K) - Ko;
	vec3 oy22 = ((floor(p22*K))-floor((floor(p22*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz22 = floor(p22*K2)*Kz - Kzo;
	
	vec3 ox23 = fract(p23*K) - Ko;
	vec3 oy23 = ((floor(p23*K))-floor((floor(p23*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz23 = floor(p23*K2)*Kz - Kzo;
	
	vec3 ox31 = fract(p31*K) - Ko;
	vec3 oy31 = ((floor(p31*K))-floor((floor(p31*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz31 = floor(p31*K2)*Kz - Kzo;
	
	vec3 ox32 = fract(p32*K) - Ko;
	vec3 oy32 = ((floor(p32*K))-floor((floor(p32*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz32 = floor(p32*K2)*Kz - Kzo;
	
	vec3 ox33 = fract(p33*K) - Ko;
	vec3 oy33 = ((floor(p33*K))-floor((floor(p33*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz33 = floor(p33*K2)*Kz - Kzo;
	
	vec3 dx11 = Pfx + _jitter_w3d*ox11;
	vec3 dy11 = Pfy.x + _jitter_w3d*oy11;
	vec3 dz11 = Pfz.x + _jitter_w3d*oz11;
	
	vec3 dx12 = Pfx + _jitter_w3d*ox12;
	vec3 dy12 = Pfy.x + _jitter_w3d*oy12;
	vec3 dz12 = Pfz.y + _jitter_w3d*oz12;
	
	vec3 dx13 = Pfx + _jitter_w3d*ox13;
	vec3 dy13 = Pfy.x + _jitter_w3d*oy13;
	vec3 dz13 = Pfz.z + _jitter_w3d*oz13;
	
	vec3 dx21 = Pfx + _jitter_w3d*ox21;
	vec3 dy21 = Pfy.y + _jitter_w3d*oy21;
	vec3 dz21 = Pfz.x + _jitter_w3d*oz21;
	
	vec3 dx22 = Pfx + _jitter_w3d*ox22;
	vec3 dy22 = Pfy.y + _jitter_w3d*oy22;
	vec3 dz22 = Pfz.y + _jitter_w3d*oz22;
	
	vec3 dx23 = Pfx + _jitter_w3d*ox23;
	vec3 dy23 = Pfy.y + _jitter_w3d*oy23;
	vec3 dz23 = Pfz.z + _jitter_w3d*oz23;
	
	vec3 dx31 = Pfx + _jitter_w3d*ox31;
	vec3 dy31 = Pfy.z + _jitter_w3d*oy31;
	vec3 dz31 = Pfz.x + _jitter_w3d*oz31;
	
	vec3 dx32 = Pfx + _jitter_w3d*ox32;
	vec3 dy32 = Pfy.z + _jitter_w3d*oy32;
	vec3 dz32 = Pfz.y + _jitter_w3d*oz32;
	
	vec3 dx33 = Pfx + _jitter_w3d*ox33;
	vec3 dy33 = Pfy.z + _jitter_w3d*oy33;
	vec3 dz33 = Pfz.z + _jitter_w3d*oz33;
	
	vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;
	vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;
	vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;
	vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;
	vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;
	vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;
	vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;
	vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;
	vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;

	vec3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13);
	d13 = max(d1a, d13);
	d12 = min(d12, d13);
	vec3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23);
	d23 = max(d2a, d23);
	d22 = min(d22, d23);
	vec3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33);
	d33 = max(d3a, d33);
	d32 = min(d32, d33);
	vec3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31);
	d31 = max(da, d31);
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;
	d12 = min(d12, d21);
	d12 = min(d12, d22);
	d12 = min(d12, d31);
	d12 = min(d12, d32);
	d11.yz = min(d11.yz,d12.xy);
	d11.y = min(d11.y,d12.z);
	d11.y = min(d11.y,d11.z);
	return sqrt(d11.xy);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:47
	vec3 n_out47p0 = vec3(UV, 0.0);

// Vector:98
	vec3 n_out98p0 = vec3(0.000000, 0.000000, 0.000000);

// Scalar:99
	float n_out99p0 = 10.000000;

// Scalar:100
	float n_out100p0 = 1.000000;

// Input:96
	float n_out96p0 = TIME;

// WorleyNoise3D:97
	float n_out97p0;
	float n_out97p1;
	{
		vec2 n_out97p0n_out97p1 = cellular3dNoiseFunc(vec3((n_out47p0.xy+n_out98p0.xy)*n_out99p0, n_out96p0), min(max(n_out100p0, 0.0), 1.0));
		n_out97p0 = n_out97p0n_out97p1.x;
		n_out97p1 = n_out97p0n_out97p1.y;
	}

// Output:0
	COLOR.rgb = vec3(n_out97p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -317.592, 95.01 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 760, 280 )
nodes/fragment/47/node = SubResource( 288 )
nodes/fragment/47/position = Vector2( 260, 140 )
nodes/fragment/96/node = SubResource( 322 )
nodes/fragment/96/position = Vector2( 260, 480 )
nodes/fragment/97/node = SubResource( 326 )
nodes/fragment/97/position = Vector2( 540, 280 )
nodes/fragment/98/node = SubResource( 327 )
nodes/fragment/98/position = Vector2( 120, 220 )
nodes/fragment/99/node = SubResource( 328 )
nodes/fragment/99/position = Vector2( 260, 320 )
nodes/fragment/100/node = SubResource( 325 )
nodes/fragment/100/position = Vector2( 260, 400 )
nodes/fragment/connections = PoolIntArray( 97, 0, 0, 0, 47, 0, 97, 0, 98, 0, 97, 1, 99, 0, 97, 2, 100, 0, 97, 3, 96, 0, 97, 4 )

[sub_resource type="ShaderMaterial" id=330]
shader = SubResource( 329 )

[sub_resource type="VisualShaderNodeCustom" id=331]
default_input_values = [ 1, 1.0, 2, 1.0, 3, 1.0 ]
script = ExtResource( 55 )

[sub_resource type="VisualShaderNodeTexture" id=332]
source = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=333]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=334]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=335]
constant = 10.0

[sub_resource type="VisualShader" id=336]
code = "shader_type canvas_item;


// BCSAdjustment

vec3 applyBCSFunc(vec3 _c0l_BCS, vec3 _bcs_vec) {
	_c0l_BCS = mix(vec3(0.0), _c0l_BCS, _bcs_vec.x);
	_c0l_BCS = mix(vec3(0.5), _c0l_BCS, _bcs_vec.y);
	_c0l_BCS = mix(vec3(dot(vec3(1.0), _c0l_BCS) * 0.33333), _c0l_BCS, _bcs_vec.z);
	return _c0l_BCS;
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:4
	float n_out4p0 = 0.500000;

// Scalar:5
	float n_out5p0 = 2.000000;

// Scalar:6
	float n_out6p0 = 10.000000;

// BCSAdjustment:2
	vec3 n_out2p0;
	{
		n_out2p0 = applyBCSFunc(n_out3p0, vec3(n_out4p0, n_out5p0, n_out6p0));
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -404.592, -123.99 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 60 )
nodes/fragment/2/node = SubResource( 331 )
nodes/fragment/2/position = Vector2( 140, -20 )
nodes/fragment/3/node = SubResource( 332 )
nodes/fragment/3/position = Vector2( -135, 167.109 )
nodes/fragment/4/node = SubResource( 333 )
nodes/fragment/4/position = Vector2( -140, -60 )
nodes/fragment/5/node = SubResource( 334 )
nodes/fragment/5/position = Vector2( -140, 0 )
nodes/fragment/6/node = SubResource( 335 )
nodes/fragment/6/position = Vector2( -140, 60 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 0, 0, 3, 1, 0, 1, 4, 0, 2, 1, 5, 0, 2, 2, 6, 0, 2, 3 )

[sub_resource type="ShaderMaterial" id=337]
shader = SubResource( 336 )

[sub_resource type="VisualShaderNodeCustom" id=338]
default_input_values = [ 1, 0.5 ]
script = ExtResource( 56 )

[sub_resource type="VisualShaderNodeScalarConstant" id=339]
constant = 0.5

[sub_resource type="VisualShader" id=340]
code = "shader_type canvas_item;


// BlackAndWhite

vec3 blackNwh1teFunc(vec3 _c0l_bNw, float _thresh0ld_bNw){
	return vec3( ( (0.21 * _c0l_bNw.r + 0.71 * _c0l_bNw.g + 0.07 * _c0l_bNw.b) < _thresh0ld_bNw) ? 0.0 : 1.0);
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:8
	float n_out8p0 = 0.500000;

// BlackAndWhite:7
	vec3 n_out7p0;
	{
		n_out7p0 = blackNwh1teFunc(n_out3p0, n_out8p0);
	}

// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -404.592, -123.99 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/3/node = SubResource( 332 )
nodes/fragment/3/position = Vector2( -160, 200 )
nodes/fragment/7/node = SubResource( 338 )
nodes/fragment/7/position = Vector2( 140, 60 )
nodes/fragment/8/node = SubResource( 339 )
nodes/fragment/8/position = Vector2( -160, 80 )
nodes/fragment/connections = PoolIntArray( 3, 1, 0, 1, 3, 0, 7, 0, 7, 0, 0, 0, 8, 0, 7, 1 )

[sub_resource type="ShaderMaterial" id=341]
shader = SubResource( 340 )

[sub_resource type="VisualShaderNodeTexture" id=342]
texture = ExtResource( 57 )

[sub_resource type="VisualShaderNodeScalarConstant" id=343]
constant = 0.7

[sub_resource type="VisualShaderNodeCustom" id=344]
default_input_values = [ 1, 1.0, 3, 1.0, 4, 1.0 ]
script = ExtResource( 58 )

[sub_resource type="VisualShader" id=345]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_10;


// BlendAwithB

vec4 blendAwithBFunc(vec4 _c0l0r_blendA_rgba, vec4 _c0l0r_blendB_rgba, float _fade_blend_c0l0r){
	return mix(_c0l0r_blendA_rgba, _c0l0r_blendB_rgba, _c0l0r_blendB_rgba.a * _fade_blend_c0l0r);
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, UV.xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// Scalar:11
	float n_out11p0 = 0.700000;

// BlendAwithB:9
	vec3 n_out9p0;
	float n_out9p1;
	{
		vec4 n_out9p0n_out9p1 = blendAwithBFunc(vec4(n_out3p0, n_out3p1), vec4(n_out10p0, n_out10p1), n_out11p0);
		n_out9p0 = n_out9p0n_out9p1.rgb;
		n_out9p1 = n_out9p0n_out9p1.a;
	}

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out9p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -404.592, -123.99 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 360, 60 )
nodes/fragment/3/node = SubResource( 332 )
nodes/fragment/3/position = Vector2( -180, 0 )
nodes/fragment/9/node = SubResource( 344 )
nodes/fragment/9/position = Vector2( 100, 60 )
nodes/fragment/10/node = SubResource( 342 )
nodes/fragment/10/position = Vector2( -400, 0 )
nodes/fragment/11/node = SubResource( 343 )
nodes/fragment/11/position = Vector2( -180, 200 )
nodes/fragment/connections = PoolIntArray( 3, 0, 9, 0, 3, 1, 9, 1, 9, 0, 0, 0, 9, 1, 0, 1, 10, 0, 9, 2, 10, 1, 9, 3, 11, 0, 9, 4 )

[sub_resource type="ShaderMaterial" id=346]
shader = SubResource( 345 )

[sub_resource type="VisualShaderNodeCustom" id=347]
default_input_values = [ 2, 1.0 ]
script = ExtResource( 59 )

[sub_resource type="VisualShaderNodeScalarConstant" id=348]
constant = 0.5

[sub_resource type="VisualShader" id=349]
code = "shader_type canvas_item;


// Bloom

vec4 bl00mFunc(vec4 _c0l_bl00m, float _strength_bl00m){
	float _gamma_bl00m = 1.0 - pow(_c0l_bl00m.r, _strength_bl00m);
	_c0l_bl00m.rgb += (_c0l_bl00m.rgb * _c0l_bl00m.a) * min(max(_strength_bl00m, 0.0), 1.0);
	return _c0l_bl00m;
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:13
	float n_out13p0 = 0.500000;

// Bloom:12
	vec3 n_out12p0;
	float n_out12p1;
	{
		vec4 n_out12p0n_out12p1 = bl00mFunc(vec4(n_out3p0, n_out3p1), n_out13p0);
		n_out12p0 = n_out12p0n_out12p1.rgb;
		n_out12p1 = n_out12p0n_out12p1.a
	}

// Output:0
	COLOR.rgb = n_out12p0;
	COLOR.a = n_out12p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -404.592, -123.99 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 0 )
nodes/fragment/3/node = SubResource( 332 )
nodes/fragment/3/position = Vector2( -40, -60 )
nodes/fragment/12/node = SubResource( 347 )
nodes/fragment/12/position = Vector2( 200, 0 )
nodes/fragment/13/node = SubResource( 348 )
nodes/fragment/13/position = Vector2( -40, 80 )
nodes/fragment/connections = PoolIntArray( 12, 0, 0, 0, 12, 1, 0, 1, 3, 0, 12, 0, 3, 1, 12, 1, 13, 0, 12, 2 )

[sub_resource type="ShaderMaterial" id=350]
shader = SubResource( 349 )

[sub_resource type="VisualShaderNodeCustom" id=351]
default_input_values = [ 2, -1.0, 3, 0.05, 4, 0.0 ]
script = ExtResource( 60 )

[sub_resource type="VisualShaderNodeScalarConstant" id=352]
constant = 0.02

[sub_resource type="VisualShaderNodeInput" id=353]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id=354]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=355]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=356]

[sub_resource type="VisualShader" id=357]
code = "shader_type canvas_item;


// ChromaticAberration

vec4 chr0maticAberrati0nFunc(sampler2D _texture_chr_aberrat1on, vec2 _uv_chr_aberrat1on, vec3 _values_chr_aberrat1on){
	vec4 _c0l_chr_aberrat1on = vec4(0.0);
	if (_values_chr_aberrat1on.z < 0.0){
		_c0l_chr_aberrat1on.r = texture(_texture_chr_aberrat1on, _uv_chr_aberrat1on + _values_chr_aberrat1on.xy).r;
		_c0l_chr_aberrat1on.g = texture(_texture_chr_aberrat1on, _uv_chr_aberrat1on).g;
		_c0l_chr_aberrat1on.b = texture(_texture_chr_aberrat1on, _uv_chr_aberrat1on - _values_chr_aberrat1on.xy).b;
		_c0l_chr_aberrat1on.a = texture(_texture_chr_aberrat1on, _uv_chr_aberrat1on).a;
	}else{
		_c0l_chr_aberrat1on.r = textureLod(_texture_chr_aberrat1on, _uv_chr_aberrat1on +
											_values_chr_aberrat1on.xy, _values_chr_aberrat1on.z).r;
		_c0l_chr_aberrat1on.g = textureLod(_texture_chr_aberrat1on, _uv_chr_aberrat1on, _values_chr_aberrat1on.z).g;
		_c0l_chr_aberrat1on.b = textureLod(_texture_chr_aberrat1on, _uv_chr_aberrat1on -
											_values_chr_aberrat1on.xy, _values_chr_aberrat1on.z).b;
		_c0l_chr_aberrat1on.a = textureLod(_texture_chr_aberrat1on, _uv_chr_aberrat1on, _values_chr_aberrat1on.z).a;
	}
	return _c0l_chr_aberrat1on;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:17

// Input:18
	vec3 n_out18p0 = vec3(UV, 0.0);

// Scalar:19
	float n_out19p0 = -1.000000;

// Scalar:15
	float n_out15p0 = 0.020000;

// Scalar:20
	float n_out20p0 = 0.000000;

// ChromaticAberration:14
	vec3 n_out14p0;
	float n_out14p1;
	{
		vec4 n_out14p0n_out14p1 = chr0maticAberrati0nFunc(TEXTURE, n_out18p0.xy, vec3(n_out15p0, n_out20p0, n_out19p0));
		n_out14p0 = n_out14p0n_out14p1.rgb;
		n_out14p1 = n_out14p0n_out14p1.a;
	}

// Output:0
	COLOR.rgb = n_out14p0;
	COLOR.a = n_out14p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -404.592, -123.99 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 460, 0 )
nodes/fragment/14/node = SubResource( 351 )
nodes/fragment/14/position = Vector2( 200, 0 )
nodes/fragment/15/node = SubResource( 352 )
nodes/fragment/15/position = Vector2( -60, 140 )
nodes/fragment/17/node = SubResource( 353 )
nodes/fragment/17/position = Vector2( -60, -100 )
nodes/fragment/18/node = SubResource( 354 )
nodes/fragment/18/position = Vector2( -60, -20 )
nodes/fragment/19/node = SubResource( 355 )
nodes/fragment/19/position = Vector2( -60, 60 )
nodes/fragment/20/node = SubResource( 356 )
nodes/fragment/20/position = Vector2( -60, 220 )
nodes/fragment/connections = PoolIntArray( 14, 0, 0, 0, 14, 1, 0, 1, 15, 0, 14, 3, 17, 0, 14, 0, 18, 0, 14, 1, 20, 0, 14, 4, 19, 0, 14, 2 )

[sub_resource type="ShaderMaterial" id=358]
shader = SubResource( 357 )

[sub_resource type="VisualShaderNodeCustom" id=359]
script = ExtResource( 61 )

[sub_resource type="VisualShaderNodeScalarConstant" id=360]
constant = 2.0

[sub_resource type="VisualShaderNodeTexture" id=361]
source = 2

[sub_resource type="VisualShaderNodeCustom" id=362]
default_input_values = [ 1, Vector3( 1, 1, 0 ), 2, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 7 )

[sub_resource type="VisualShaderNodeInput" id=363]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=364]
constant = 2.0

[sub_resource type="VisualShaderNodeExpression" id=365]
size = Vector2( 627, 196 )
expression = "Sometimes texture may show out of its true borders
(for example, when using lod).
To fix it, use ClampAlphaBorder node.
Set 'alpha' port from \"Texture\" node to 'Alpha' port of \"Output\"
node to see the difference."

[sub_resource type="VisualShader" id=366]
code = "shader_type canvas_item;


// ClampAlphaBorder

float clampAlphaBorderFunc(float _color_alpha_clamp, vec2 _uv_clamp){
	_color_alpha_clamp = mix(0.0, _color_alpha_clamp, max(sign(_uv_clamp.x), 0.0));
	_color_alpha_clamp = mix(0.0, _color_alpha_clamp, max(sign(1.0 - _uv_clamp.x), 0.0));
	_color_alpha_clamp = mix(0.0, _color_alpha_clamp, max(sign(_uv_clamp.y), 0.0));
	_color_alpha_clamp = mix(0.0, _color_alpha_clamp, max(sign(1.0 - _uv_clamp.y), 0.0));
	return _color_alpha_clamp;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:25
	vec3 n_out25p0 = vec3(UV, 0.0);

// Scalar:26
	float n_out26p0 = 2.000000;

// ScaleUV:24
	vec3 n_in24p2 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out24p0;
	{
		n_out24p0.xy = (n_out25p0.xy - n_in24p2.xy) * vec3(n_out26p0).xy + n_in24p2.xy;
	}

// Scalar:22
	float n_out22p0 = 2.000000;

// Texture:23
	vec3 n_out23p0;
	float n_out23p1;
	{
		vec4 _tex_read = textureLod(TEXTURE, n_out24p0.xy, n_out22p0);
		n_out23p0 = _tex_read.rgb;
		n_out23p1 = _tex_read.a;
	}

// ClampAlphaBorder:21
	float n_out21p0;
	{
		n_out21p0 = clampAlphaBorderFunc(n_out23p1, (n_out24p0).xy);
	}

// Output:0
	COLOR.rgb = n_out23p0;
	COLOR.a = n_out21p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -495, -123 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 700, -80 )
nodes/fragment/21/node = SubResource( 359 )
nodes/fragment/21/position = Vector2( 380, -140 )
nodes/fragment/22/node = SubResource( 360 )
nodes/fragment/22/position = Vector2( -140, 60 )
nodes/fragment/23/node = SubResource( 361 )
nodes/fragment/23/position = Vector2( 80, -20 )
nodes/fragment/24/node = SubResource( 362 )
nodes/fragment/24/position = Vector2( -120, -80 )
nodes/fragment/25/node = SubResource( 363 )
nodes/fragment/25/position = Vector2( -280, -120 )
nodes/fragment/26/node = SubResource( 364 )
nodes/fragment/26/position = Vector2( -320, -40 )
nodes/fragment/27/node = SubResource( 365 )
nodes/fragment/27/position = Vector2( 140, -360 )
nodes/fragment/27/size = Vector2( 627, 196 )
nodes/fragment/27/input_ports = ""
nodes/fragment/27/output_ports = ""
nodes/fragment/27/expression = "Sometimes texture may show out of its true borders
(for example, when using lod).
To fix it, use ClampAlphaBorder node.
Set 'alpha' port from \"Texture\" node to 'Alpha' port of \"Output\"
node to see the difference."
nodes/fragment/connections = PoolIntArray( 22, 0, 23, 1, 25, 0, 24, 0, 24, 0, 23, 0, 23, 0, 0, 0, 26, 0, 24, 1, 23, 1, 21, 0, 24, 0, 21, 1, 21, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=367]
shader = SubResource( 366 )

[sub_resource type="VisualShaderNodeCustom" id=368]
script = ExtResource( 62 )

[sub_resource type="VisualShaderNodeTexture" id=369]
source = 2

[sub_resource type="VisualShaderNodeInput" id=370]
input_name = "texture"

[sub_resource type="VisualShader" id=371]
code = "shader_type canvas_item;


// ColorCorrectionAdjustment

vec3 applyC0l0rC0rrecti0nFunc(vec3 _c0l_c0rr, sampler2D _tex_c0rr) {
	_c0l_c0rr.r = texture(_tex_c0rr, vec2(_c0l_c0rr.r, 0.0)).r;
	_c0l_c0rr.g = texture(_tex_c0rr, vec2(_c0l_c0rr.g, 0.0)).g;
	_c0l_c0rr.b = texture(_tex_c0rr, vec2(_c0l_c0rr.b, 0.0)).b;
	return _c0l_c0rr;
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Input:4

// ColorCorrectionAdjustment:2
	vec3 n_out2p0;
	{
		n_out2p0 = applyC0l0rC0rrecti0nFunc(n_out3p0, TEXTURE);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -492.592, 60 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/2/node = SubResource( 368 )
nodes/fragment/2/position = Vector2( 80, 200 )
nodes/fragment/3/node = SubResource( 369 )
nodes/fragment/3/position = Vector2( -200, 140 )
nodes/fragment/4/node = SubResource( 370 )
nodes/fragment/4/position = Vector2( -160, 280 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 0, 0, 4, 0, 2, 1 )

[sub_resource type="ShaderMaterial" id=372]
shader = SubResource( 371 )

[sub_resource type="VisualShaderNodeCustom" id=373]
default_input_values = [ 2, -1.0, 3, 0.005, 4, 1.0 ]
script = ExtResource( 63 )

[sub_resource type="VisualShaderNodeInput" id=374]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=375]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=376]
constant = 0.005

[sub_resource type="VisualShaderNodeScalarConstant" id=377]
constant = 1.0

[sub_resource type="VisualShader" id=378]
code = "shader_type canvas_item;


// Emboss

vec4 emb0ssFunc(sampler2D _tex_emb0ss, vec2 _uv_emb0ss, float _lod_emb0ss, vec2 _ofst_emb0ss, float _ctst_emb0ss){
	vec4 col_emb0ss = vec4(0.5, 0.5, 0.5, 0.5);
	if (_lod_emb0ss < 0.0){
		col_emb0ss -= texture(_tex_emb0ss, _uv_emb0ss - _ofst_emb0ss) * _ctst_emb0ss;
		col_emb0ss += texture(_tex_emb0ss, _uv_emb0ss + _ofst_emb0ss) * _ctst_emb0ss;
	}else{
		col_emb0ss -= textureLod(_tex_emb0ss, _uv_emb0ss - _ofst_emb0ss, _lod_emb0ss) * _ctst_emb0ss;
		col_emb0ss += textureLod(_tex_emb0ss, _uv_emb0ss + _ofst_emb0ss, _lod_emb0ss) * _ctst_emb0ss;
	}
	col_emb0ss.rgb = vec3(0.21 * col_emb0ss.r + 0.71 * col_emb0ss.g + 0.07 * col_emb0ss.b);
	return col_emb0ss;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:4

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Scalar:7
	float n_out7p0 = -1.000000;

// Scalar:8
	float n_out8p0 = 0.005000;

// Scalar:9
	float n_out9p0 = 1.000000;

// Emboss:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 n_out5p0n_out5p1 = emb0ssFunc(TEXTURE, n_out6p0.xy, n_out7p0, vec2(n_out8p0), n_out9p0);
		n_out5p0 = n_out5p0n_out5p1.rgb;
		n_out5p1 = n_out5p0n_out5p1.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -492.592, 60 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/4/node = SubResource( 370 )
nodes/fragment/4/position = Vector2( -40, 80 )
nodes/fragment/5/node = SubResource( 373 )
nodes/fragment/5/position = Vector2( 180, 200 )
nodes/fragment/6/node = SubResource( 374 )
nodes/fragment/6/position = Vector2( -40, 160 )
nodes/fragment/7/node = SubResource( 375 )
nodes/fragment/7/position = Vector2( -40, 240 )
nodes/fragment/8/node = SubResource( 376 )
nodes/fragment/8/position = Vector2( -40, 300 )
nodes/fragment/9/node = SubResource( 377 )
nodes/fragment/9/position = Vector2( -40, 380 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 5, 0, 0, 0, 5, 1, 0, 1, 6, 0, 5, 1, 7, 0, 5, 2, 9, 0, 5, 4, 8, 0, 5, 3 )

[sub_resource type="ShaderMaterial" id=379]
shader = SubResource( 378 )

[sub_resource type="VisualShaderNodeCustom" id=380]
default_input_values = [ 1, Vector3( 0, 1, 0 ), 2, 0.3, 3, Vector3( 1, 1, 0 ), 4, 1.0, 5, Vector3( 1, 0.5, 0 ), 6, 1.0, 7, Vector3( 1, 0, 0 ), 8, 1.0, 9, 0, 10, 0.4, 11, 0.2, 12, 0.0 ]
script = ExtResource( 64 )

[sub_resource type="VisualShaderNodeCustom" id=381]
default_input_values = [ 0, 1.0, 1, 0.0 ]
script = ExtResource( 25 )

[sub_resource type="VisualShaderNodeScalarConstant" id=382]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=383]
constant = 1.96

[sub_resource type="VisualShaderNodeScalarConstant" id=384]
constant = 0.3

[sub_resource type="VisualShaderNodeInput" id=385]
input_name = "time"

[sub_resource type="VisualShaderNodeColorConstant" id=386]
constant = Color( 1, 1, 0, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=387]
constant = Color( 1, 0.501961, 0, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=388]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=389]

[sub_resource type="VisualShaderNodeScalarConstant" id=390]
constant = 0.4

[sub_resource type="VisualShaderNodeScalarConstant" id=391]
constant = 0.2

[sub_resource type="VisualShader" id=392]
code = "shader_type canvas_item;


// vec2Compose

vec2 vec2ComposeFunc(float _vec2_length, float _vec2_angl_rad){
	return vec2(cos(_vec2_angl_rad), sin(_vec2_angl_rad)) * _vec2_length;
}

// FireFX

float cnoiseFireFXTempFunc(vec3 P) {
	vec3 Pi0 = floor(P);
	vec3 Pi1 = Pi0 + vec3(1.0);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	ix = ((ix*34.0)+1.0)*ix - floor(((ix*34.0)+1.0)*ix * (1.0 / 289.0)) * 289.0;
	vec4 ixy = (((ix + iy)*34.0)+1.0)*(ix + iy) - floor((((ix + iy)*34.0)+1.0)*(ix + iy) * (1.0 / 289.0)) * 289.0;
	vec4 ixy0 = (((ixy + iz0) * 34.0)+1.0)* (ixy + iz0) - floor((( (ixy + iz0) *34.0)+1.0)* (ixy + iz0) * (1.0 / 289.0)) * 289.0;
	vec4 ixy1 = (((ixy + iz1)*34.0)+1.0)*(ixy + iz1) - floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1) * (1.0 / 289.0)) * 289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}
float perlingFbmFireFXTempFunc(vec2 _pos, float _octaves, float _intencity, float persistence, float _scale, float _time) {
	float final = 0.0;
	float amplitude = _intencity;
	for(float i = 0.0; i < _octaves; i++){
		final += cnoiseFireFXTempFunc(vec3(_pos * _scale, _time)) * amplitude;
		_scale *= 2.0;
		amplitude *= persistence;
	}
	return (min(final, 1.0) + 1.0) * 0.5;
}
vec4 fireFXFunc(vec2 _uv_fire, vec2 _dir_fire, float _speed_fire, float _time_fire,
	vec4 _col1_fire, vec4 _col2_fire, vec4 _col3_fire,
	float _col1_pos, float _col2_pos, float _col3_pos){
	float _x_pos = mix(0.0, 1.0, _uv_fire.y);
	_uv_fire.x -= _dir_fire.x * _time_fire * _speed_fire;
	_uv_fire.y += _dir_fire.y * _time_fire * _speed_fire;
	float _y_pos = perlingFbmFireFXTempFunc(_uv_fire, 8.0, 0.4, 1.0, 1.0, 1.0);
	float _1 = step(_y_pos, _x_pos - _col1_pos);
	float _3 = step(_y_pos, _x_pos - _col3_pos);
	float L1 = _1 - _3;
	vec4 col = vec4(1.0);
	col = mix(_col1_fire, _col3_fire, L1);
	
	float _2 = step(_y_pos, _x_pos - _col2_pos);
	float L2 = _3 - _2;
	col.rgb = mix(col.rgb, _col2_fire.rgb, L2);
	col = mix(vec4(0.0), col, _1);
	return col;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Scalar:12
	float n_out12p0 = 1.000000;

// Scalar:13
	float n_out13p0 = 1.960000;

// vec2Compose:11
	vec3 n_out11p0;
	{
		n_out11p0.xy = vec2ComposeFunc(n_out12p0, n_out13p0);
	}

// Scalar:14
	float n_out14p0 = 0.300000;

// Color:16
	vec3 n_out16p0 = vec3(1.000000, 1.000000, 0.000000);
	float n_out16p1 = 1.000000;

// Color:17
	vec3 n_out17p0 = vec3(1.000000, 0.501961, 0.000000);
	float n_out17p1 = 1.000000;

// Color:18
	vec3 n_out18p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out18p1 = 1.000000;

// Scalar:19
	float n_out19p0 = 0.000000;

// Scalar:20
	float n_out20p0 = 0.400000;

// Scalar:21
	float n_out21p0 = 0.200000;

// Input:15
	float n_out15p0 = TIME;

// FireFX:10
	vec3 n_out10p0;
	float n_out10p1;
	{
		vec4 n_out10p0n_out10p1 = fireFXFunc(n_out6p0.xy, n_out11p0.xy, n_out14p0, n_out15p0, vec4(n_out16p0, n_out16p1), vec4(n_out17p0, n_out17p1), vec4(n_out18p0, n_out18p1), n_out19p0, n_out20p0, n_out21p0);
		n_out10p0 = n_out10p0n_out10p1.rgb;
		n_out10p1 = n_out10p0n_out10p1.a;
	}

// Output:0
	COLOR.rgb = n_out10p0;
	COLOR.a = n_out10p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -337.592, 159 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 740, 400 )
nodes/fragment/6/node = SubResource( 374 )
nodes/fragment/6/position = Vector2( 160, 200 )
nodes/fragment/10/node = SubResource( 380 )
nodes/fragment/10/position = Vector2( 400, 400 )
nodes/fragment/11/node = SubResource( 381 )
nodes/fragment/11/position = Vector2( 140, 280 )
nodes/fragment/12/node = SubResource( 382 )
nodes/fragment/12/position = Vector2( -60, 240 )
nodes/fragment/13/node = SubResource( 383 )
nodes/fragment/13/position = Vector2( -60, 320 )
nodes/fragment/14/node = SubResource( 384 )
nodes/fragment/14/position = Vector2( 140, 360 )
nodes/fragment/15/node = SubResource( 385 )
nodes/fragment/15/position = Vector2( 120, 860 )
nodes/fragment/16/node = SubResource( 386 )
nodes/fragment/16/position = Vector2( 0, 400 )
nodes/fragment/17/node = SubResource( 387 )
nodes/fragment/17/position = Vector2( 0, 480 )
nodes/fragment/18/node = SubResource( 388 )
nodes/fragment/18/position = Vector2( 0, 560 )
nodes/fragment/19/node = SubResource( 389 )
nodes/fragment/19/position = Vector2( 60, 660 )
nodes/fragment/20/node = SubResource( 390 )
nodes/fragment/20/position = Vector2( 60, 720 )
nodes/fragment/21/node = SubResource( 391 )
nodes/fragment/21/position = Vector2( 60, 780 )
nodes/fragment/connections = PoolIntArray( 6, 0, 10, 0, 10, 0, 0, 0, 10, 1, 0, 1, 11, 0, 10, 1, 12, 0, 11, 0, 13, 0, 11, 1, 14, 0, 10, 2, 15, 0, 10, 12, 16, 1, 10, 4, 17, 1, 10, 6, 18, 0, 10, 7, 18, 1, 10, 8, 19, 0, 10, 9, 20, 0, 10, 10, 21, 0, 10, 11, 16, 0, 10, 3, 17, 0, 10, 5 )

[sub_resource type="ShaderMaterial" id=393]
shader = SubResource( 392 )

[sub_resource type="VisualShaderNodeCustom" id=394]
default_input_values = [ 1, Vector3( 1, 1, 1 ), 2, 1.0, 3, Vector3( 1, 1, 1 ), 4, 1.0, 5, Vector3( 1, 1, 1 ), 6, 1.0, 7, Vector3( 1, 1, 1 ), 8, 1.0 ]
script = ExtResource( 65 )

[sub_resource type="VisualShaderNodeColorConstant" id=395]
constant = Color( 1, 1, 0, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=396]
constant = Color( 0, 0, 1, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=397]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=398]
constant = Color( 0.0990133, 1, 0, 1 )

[sub_resource type="VisualShader" id=399]
code = "shader_type canvas_item;


// Gradient4Corners

vec4 gradient4cornersFunc(vec2 _uv_c0rner, vec4 _top_left_c0rner, vec4 _top_right_c0rner, vec4 _bottom_left_c0rner, vec4 _bottom_right_c0rner){
	vec4 _c0l0r_t0p_c0rner = mix(_top_left_c0rner, _top_right_c0rner, _uv_c0rner.x);
	vec4 _c0l0r_b0tt0m_c0rner = mix(_bottom_left_c0rner, _bottom_right_c0rner, _uv_c0rner.x);
	return mix(_c0l0r_t0p_c0rner, _c0l0r_b0tt0m_c0rner, _uv_c0rner.y);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Color:23
	vec3 n_out23p0 = vec3(1.000000, 1.000000, 0.000000);
	float n_out23p1 = 1.000000;

// Color:24
	vec3 n_out24p0 = vec3(0.000000, 0.000000, 1.000000);
	float n_out24p1 = 1.000000;

// Color:25
	vec3 n_out25p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out25p1 = 1.000000;

// Color:26
	vec3 n_out26p0 = vec3(0.099013, 1.000000, 0.000000);
	float n_out26p1 = 1.000000;

// Gradient4Corners:22
	vec3 n_out22p0;
	float n_out22p1;
	{
		vec4 n_out22p0n_out22p1 = gradient4cornersFunc(n_out6p0.xy, vec4(n_out23p0, n_out23p1), vec4(n_out24p0, n_out24p1), vec4(n_out25p0, n_out25p1), vec4(n_out26p0, n_out26p1));
		n_out22p0 = n_out22p0n_out22p1.rgb;
		n_out22p1 = n_out22p0n_out22p1.a;
	}

// Output:0
	COLOR.rgb = n_out22p0;
	COLOR.a = n_out22p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 163.408, 330 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1060, 400 )
nodes/fragment/6/node = SubResource( 374 )
nodes/fragment/6/position = Vector2( 600, 260 )
nodes/fragment/22/node = SubResource( 394 )
nodes/fragment/22/position = Vector2( 800, 400 )
nodes/fragment/23/node = SubResource( 395 )
nodes/fragment/23/position = Vector2( 600, 340 )
nodes/fragment/24/node = SubResource( 396 )
nodes/fragment/24/position = Vector2( 600, 440 )
nodes/fragment/25/node = SubResource( 397 )
nodes/fragment/25/position = Vector2( 600, 540 )
nodes/fragment/26/node = SubResource( 398 )
nodes/fragment/26/position = Vector2( 600, 640 )
nodes/fragment/connections = PoolIntArray( 22, 0, 0, 0, 22, 1, 0, 1, 6, 0, 22, 0, 23, 0, 22, 1, 23, 1, 22, 2, 24, 0, 22, 3, 24, 1, 22, 4, 25, 0, 22, 5, 25, 1, 22, 6, 26, 0, 22, 7, 26, 1, 22, 8 )

[sub_resource type="ShaderMaterial" id=400]
shader = SubResource( 399 )

[sub_resource type="VisualShaderNodeCustom" id=401]
default_input_values = [ 1, 1.0, 2, 0.0, 3, false ]
script = ExtResource( 66 )

[sub_resource type="VisualShaderNodeTexture" id=402]
source = 2

[sub_resource type="VisualShaderNodeBooleanConstant" id=403]
constant = true

[sub_resource type="VisualShaderNodeTextureUniform" id=404]
uniform_name = "gradient"

[sub_resource type="VisualShaderNodeCustom" id=405]
default_input_values = [ 0, 1.0 ]
script = ExtResource( 78 )

[sub_resource type="VisualShaderNodeScalarConstant" id=406]
constant = 0.3

[sub_resource type="VisualShader" id=407]
code = "shader_type canvas_item;
uniform sampler2D gradient;


// GradientMapping

vec4 gradientMappingFunc(vec3 _c0l_base_gm, float _grad_offset, sampler2D _palette_gm, bool _use_c0l_cycle){
	float avg_c0l = 0.2126 * _c0l_base_gm.r + 0.7152 * _c0l_base_gm.g + 0.0722 * _c0l_base_gm.b;
	if (_use_c0l_cycle){
		return texture(_palette_gm, mod(vec2(avg_c0l + _grad_offset, 0), vec2(1.0)));
	} else{
		return texture(_palette_gm, vec2(avg_c0l + _grad_offset, 0));
	}
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:28
	vec3 n_out28p0;
	float n_out28p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out28p0 = _tex_read.rgb;
		n_out28p1 = _tex_read.a;
	}

// Scalar:33
	float n_out33p0 = 0.300000;

// ScaledTIME:32
	float n_out32p0;
	{
		n_out32p0 = n_out33p0 * TIME;
	}

// Boolean:30
	bool n_out30p0 = true;

// TextureUniform:31
	vec3 n_out31p0;
	float n_out31p1;
	{
		vec4 n_tex_read = texture(gradient, UV.xy);
		n_out31p0 = n_tex_read.rgb;
		n_out31p1 = n_tex_read.a;
	}

// GradientMapping:27
	vec3 n_out27p0;
	float n_out27p1;
	{
		vec4 n_out27p0n_out27p1 = gradientMappingFunc(n_out28p0, n_out32p0, gradient, n_out30p0);
		n_out27p0 = n_out27p0n_out27p1.rgb;
		n_out27p1 = n_out27p0n_out27p1.a * n_out28p1;
	}

// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out27p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -62.592, 275 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1040, 400 )
nodes/fragment/27/node = SubResource( 401 )
nodes/fragment/27/position = Vector2( 800, 400 )
nodes/fragment/28/node = SubResource( 402 )
nodes/fragment/28/position = Vector2( 460, 280 )
nodes/fragment/30/node = SubResource( 403 )
nodes/fragment/30/position = Vector2( 460, 500 )
nodes/fragment/31/node = SubResource( 404 )
nodes/fragment/31/position = Vector2( 460, 580 )
nodes/fragment/32/node = SubResource( 405 )
nodes/fragment/32/position = Vector2( 460, 420 )
nodes/fragment/33/node = SubResource( 406 )
nodes/fragment/33/position = Vector2( 260, 420 )
nodes/fragment/connections = PoolIntArray( 28, 0, 27, 0, 28, 1, 27, 1, 27, 0, 0, 0, 30, 0, 27, 3, 31, 2, 27, 4, 27, 1, 0, 1, 32, 0, 27, 2, 33, 0, 32, 0 )

[sub_resource type="Gradient" id=408]
offsets = PoolRealArray( 0, 0.168067, 0.336134, 0.504202, 0.705882, 0.865546, 1 )
colors = PoolColorArray( 1, 0, 0, 1, 1, 0.726563, 0, 1, 0.640625, 1, 0, 1, 0, 1, 1, 1, 0, 0.132813, 1, 1, 1, 0, 0.984375, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=409]
gradient = SubResource( 408 )

[sub_resource type="ShaderMaterial" id=410]
shader = SubResource( 407 )
shader_param/gradient = SubResource( 409 )

[sub_resource type="VisualShaderNodeCustom" id=411]
default_input_values = [ 1, 1.0 ]
script = ExtResource( 67 )

[sub_resource type="VisualShaderNodeTexture" id=412]
source = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=413]
constant = 1.0

[sub_resource type="VisualShader" id=414]
code = "shader_type canvas_item;


// GrayscalePlus

vec3 grayscaleFunc(vec3 _c0l0r_grayscale, float _gray_fact0r){
	_gray_fact0r = min(max(_gray_fact0r, 0.0), 1.0);
	return _c0l0r_grayscale * (1.0 - _gray_fact0r) + (0.21 * _c0l0r_grayscale.r + 0.71 * _c0l0r_grayscale.g + 0.07 * _c0l0r_grayscale.b) * _gray_fact0r;
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:4
	float n_out4p0 = 1.000000;

// GrayscalePlus:2
	vec3 n_out2p0;
	{
		n_out2p0 = grayscaleFunc(n_out3p0, n_out4p0);
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -215.592, -41 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 200 )
nodes/fragment/2/node = SubResource( 411 )
nodes/fragment/2/position = Vector2( 300, 80 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 0, 200 )
nodes/fragment/4/node = SubResource( 413 )
nodes/fragment/4/position = Vector2( 0, 120 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 0, 0, 3, 1, 0, 1, 4, 0, 2, 1 )

[sub_resource type="ShaderMaterial" id=415]
shader = SubResource( 414 )

[sub_resource type="VisualShaderNodeCustom" id=416]
script = ExtResource( 68 )

[sub_resource type="VisualShader" id=417]
code = "shader_type canvas_item;


// Hue

vec3 hueFunc(float _1np_hue){
	return min(max(3.0 * abs(1.0 - 2.0 * fract(_1np_hue + vec3(0.0, -1.0 / 3.0, 1.0 / 3.0))) - 1.0 , 0.0), 1.0);
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Hue:5
	vec3 n_out5p0;
	{
		n_out5p0 = hueFunc(dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333)));
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -215.592, -41 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 200 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 0, 200 )
nodes/fragment/5/node = SubResource( 416 )
nodes/fragment/5/position = Vector2( 320, 180 )
nodes/fragment/connections = PoolIntArray( 3, 1, 0, 1, 5, 0, 0, 0, 3, 0, 5, 0 )

[sub_resource type="ShaderMaterial" id=418]
shader = SubResource( 417 )

[sub_resource type="VisualShaderNodeCustom" id=419]
default_input_values = [ 2, 1.0 ]
script = ExtResource( 69 )

[sub_resource type="VisualShaderNodeScalarConstant" id=420]
constant = 1.0

[sub_resource type="VisualShader" id=421]
code = "shader_type canvas_item;


// InverseColor

vec3 inverseC0l0rFunc(vec3 _c0l0r_to_inverse, float _inverse_c0l0r_intensity){
	return mix(_c0l0r_to_inverse.rgb, 1.0 - _c0l0r_to_inverse.rgb, _inverse_c0l0r_intensity);
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:7
	float n_out7p0 = 1.000000;

// InverseColor:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		n_out6p0 = inverseC0l0rFunc(n_out3p0, n_out7p0);
		n_out6p1 = n_out3p1;
	}

// Output:0
	COLOR.rgb = n_out6p0;
	COLOR.a = n_out6p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -14.592, 17 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 200 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 120, 200 )
nodes/fragment/6/node = SubResource( 419 )
nodes/fragment/6/position = Vector2( 380, 200 )
nodes/fragment/7/node = SubResource( 420 )
nodes/fragment/7/position = Vector2( 120, 340 )
nodes/fragment/connections = PoolIntArray( 3, 0, 6, 0, 3, 1, 6, 1, 6, 0, 0, 0, 6, 1, 0, 1, 7, 0, 6, 2 )

[sub_resource type="ShaderMaterial" id=422]
shader = SubResource( 421 )

[sub_resource type="VisualShaderNodeCustom" id=423]
default_input_values = [ 1, 1, 2, 1 ]
script = ExtResource( 70 )

[sub_resource type="VisualShaderNodeTexture" id=424]
texture = ExtResource( 57 )

[sub_resource type="VisualShader" id=425]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_9;


// MaskAlpha

vec4 maskAlphaFunc(vec4 _col_to_mask, float _mask_alpha_to_mask){
	return vec4(_col_to_mask.rgb, _col_to_mask.a * _mask_alpha_to_mask);
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Texture:9
	vec4 tex_frg_9_read = texture(tex_frg_9, UV.xy);
	vec3 n_out9p0 = tex_frg_9_read.rgb;
	float n_out9p1 = tex_frg_9_read.a;

// MaskAlpha:8
	vec3 n_out8p0;
	float n_out8p1;
	{
		n_out8p0 = maskAlphaFunc(vec4(n_out3p0, n_out3p1), n_out9p1).rgb;
		n_out8p1 = maskAlphaFunc(vec4(n_out3p0, n_out3p1), n_out9p1).a;
	}

// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out8p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -262.592, -185 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 620, 0 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 160, -80 )
nodes/fragment/8/node = SubResource( 423 )
nodes/fragment/8/position = Vector2( 400, 0 )
nodes/fragment/9/node = SubResource( 424 )
nodes/fragment/9/position = Vector2( -60, -80 )
nodes/fragment/connections = PoolIntArray( 3, 0, 8, 0, 3, 1, 8, 1, 8, 0, 0, 0, 8, 1, 0, 1, 9, 1, 8, 2 )

[sub_resource type="ShaderMaterial" id=426]
shader = SubResource( 425 )

[sub_resource type="VisualShaderNodeCustom" id=427]
default_input_values = [ 1, 8.0 ]
script = ExtResource( 71 )

[sub_resource type="VisualShaderNodeScalarConstant" id=428]
constant = 3.0

[sub_resource type="VisualShader" id=429]
code = "shader_type canvas_item;


// Posterize

vec3 p0ster1zeFunc(vec3 _col_p0sr1ze, float _steps_p0sterize){
	return floor(_col_p0sr1ze * _steps_p0sterize) / (_steps_p0sterize - 1.0);
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:11
	float n_out11p0 = 3.000000;

// Posterize:10
	vec3 n_out10p0;
	{
		n_out10p0 = p0ster1zeFunc(n_out3p0, n_out11p0);
	}

// Output:0
	COLOR.rgb = n_out10p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -262.592, -185 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 620, 0 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 100, 0 )
nodes/fragment/10/node = SubResource( 427 )
nodes/fragment/10/position = Vector2( 400, -140 )
nodes/fragment/11/node = SubResource( 428 )
nodes/fragment/11/position = Vector2( 140, -120 )
nodes/fragment/connections = PoolIntArray( 11, 0, 10, 1, 3, 0, 10, 0, 10, 0, 0, 0, 3, 1, 0, 1 )

[sub_resource type="ShaderMaterial" id=430]
shader = SubResource( 429 )

[sub_resource type="VisualShaderNodeCustom" id=431]
default_input_values = [ 1, 1.0, 2, 1.0, 3, 1.0 ]
script = ExtResource( 72 )

[sub_resource type="VisualShaderNodeScalarConstant" id=432]
constant = 0.2

[sub_resource type="VisualShaderNodeScalarConstant" id=433]
constant = 1.5

[sub_resource type="VisualShaderNodeScalarConstant" id=434]
constant = 1.2

[sub_resource type="VisualShader" id=435]
code = "shader_type canvas_item;


// ShiftHSV

vec3 hsv2rgbHSVChan9eFunc(vec3 _hsv_c0l0r_HSVChan9e){
	vec4 _K_hsv2rgbHSVChan9e = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 _p_hsv2rgbHSVChan9e = abs(fract(_hsv_c0l0r_HSVChan9e.xxx + _K_hsv2rgbHSVChan9e.xyz) * 6.0 - _K_hsv2rgbHSVChan9e.www);
	return vec3(_hsv_c0l0r_HSVChan9e.z * mix(_K_hsv2rgbHSVChan9e.xxx, 
				clamp(_p_hsv2rgbHSVChan9e - _K_hsv2rgbHSVChan9e.xxx, 0.0, 1.0),
				_hsv_c0l0r_HSVChan9e.y));
}

vec3 rgb2hvsHSVChan9eFunc(vec3 _rgb_c0l0r_HSVChan9e){
	vec4 _K_rgb2hvsHSVChan9e = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 _p_rgb2hvsHSVChan9e = mix( vec4(_rgb_c0l0r_HSVChan9e.bg, _K_rgb2hvsHSVChan9e.wz),
									vec4(_rgb_c0l0r_HSVChan9e.gb, _K_rgb2hvsHSVChan9e.xy),
									step(_rgb_c0l0r_HSVChan9e.b, _rgb_c0l0r_HSVChan9e.g));
	vec4 _q_rgb2hvsHSVChan9e = mix( vec4(_p_rgb2hvsHSVChan9e.xyw, _rgb_c0l0r_HSVChan9e.r), 
									vec4(_rgb_c0l0r_HSVChan9e.r, _p_rgb2hvsHSVChan9e.yzx),
									step(_p_rgb2hvsHSVChan9e.x, _rgb_c0l0r_HSVChan9e.r));
	float _d_rgb2hvsHSVChan9e = _q_rgb2hvsHSVChan9e.x - min(_q_rgb2hvsHSVChan9e.w, _q_rgb2hvsHSVChan9e.y);
	return vec3(vec3(abs(_q_rgb2hvsHSVChan9e.z + (_q_rgb2hvsHSVChan9e.w - _q_rgb2hvsHSVChan9e.y) / (6.0 * _d_rgb2hvsHSVChan9e + 1.0e-10)),
					_d_rgb2hvsHSVChan9e / (_q_rgb2hvsHSVChan9e.x + 1.0e-10),
					_q_rgb2hvsHSVChan9e.x));
}

vec3 hsvChangeHSVChan9eFunc(vec3 _c0l0r_HSVChan9e, float _h_HSVChan9e, float _s_HSVChan9e, float _v_HSVChan9e){
	_c0l0r_HSVChan9e = rgb2hvsHSVChan9eFunc(_c0l0r_HSVChan9e);
	_c0l0r_HSVChan9e.r *= _h_HSVChan9e;
	_c0l0r_HSVChan9e.g *= _s_HSVChan9e;
	_c0l0r_HSVChan9e.b *= _v_HSVChan9e;
	return hsv2rgbHSVChan9eFunc(_c0l0r_HSVChan9e);
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:13
	float n_out13p0 = 0.200000;

// Scalar:14
	float n_out14p0 = 1.500000;

// Scalar:15
	float n_out15p0 = 1.200000;

// ShiftHSV:12
	vec3 n_out12p0;
	{
		n_out12p0 = hsvChangeHSVChan9eFunc(n_out3p0, n_out13p0, n_out14p0, n_out15p0);
	}

// Output:0
	COLOR.rgb = n_out12p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -264.592, -282 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 680, 0 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 120, 0 )
nodes/fragment/12/node = SubResource( 431 )
nodes/fragment/12/position = Vector2( 400, -120 )
nodes/fragment/13/node = SubResource( 432 )
nodes/fragment/13/position = Vector2( 120, -220 )
nodes/fragment/14/node = SubResource( 433 )
nodes/fragment/14/position = Vector2( 120, -160 )
nodes/fragment/15/node = SubResource( 434 )
nodes/fragment/15/position = Vector2( 120, -100 )
nodes/fragment/connections = PoolIntArray( 3, 1, 0, 1, 13, 0, 12, 1, 15, 0, 12, 3, 14, 0, 12, 2, 3, 0, 12, 0, 12, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=436]
shader = SubResource( 435 )

[sub_resource type="VisualShaderNodeCustom" id=437]
default_input_values = [ 3, 0.0, 4, 0.0, 5, 0.0, 6, 0.0, 7, 0.0, 8, 0.0, 9, Vector3( 1, 1, 1 ) ]
script = ExtResource( 73 )

[sub_resource type="VisualShaderNodeInput" id=438]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id=439]
constant = Color( 0, 0.833388, 1, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=440]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=441]
constant = 0.7

[sub_resource type="VisualShaderNodeScalarConstant" id=442]
constant = 0.4

[sub_resource type="VisualShaderNodeScalarConstant" id=443]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=444]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=445]
constant = 1.0

[sub_resource type="VisualShader" id=446]
code = "shader_type canvas_item;


// ShineFX

vec4 shineFunc(vec4 _color_sh1ne, vec2 _uv_sh1ne, float _loc_sh1ne, float _rot_sh1ne, float _width_sh1ne, float _soft_sh1ne, float _bright_sh1ne, float _gloss_sh1ne, vec3 _shine_color_sh1ne){
	vec2 _angle_sh1ne = vec2(cos(_rot_sh1ne), sin(_rot_sh1ne));
	float _norm_pos_sh1ne = dot(_uv_sh1ne, _angle_sh1ne);
	float _normal_sh1ne = 1.0 - min(max(abs((_norm_pos_sh1ne - _loc_sh1ne) / _width_sh1ne), 0.0), 1.0);
	float _shine_power_sh1ne = smoothstep(0.0, _soft_sh1ne * 2.0, _normal_sh1ne);
	vec3 _reflect_color_sh1ne = mix(vec3(1.0), _color_sh1ne.rgb * 10.0, _gloss_sh1ne);
	_color_sh1ne.rgb += _color_sh1ne.a * _shine_power_sh1ne * _bright_sh1ne * _reflect_color_sh1ne * _shine_color_sh1ne.rgb;
	return min(max(_color_sh1ne, vec4(0.0)), vec4(1.0));
}


void vertex() {
// Output:0

}

void fragment() {
// Input:17
	vec3 n_out17p0 = vec3(UV, 0.0);

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:19
	float n_out19p0 = 0.500000;

// Scalar:20
	float n_out20p0 = 0.700000;

// Scalar:21
	float n_out21p0 = 0.400000;

// Scalar:22
	float n_out22p0 = 2.000000;

// Scalar:23
	float n_out23p0 = 2.000000;

// Scalar:24
	float n_out24p0 = 1.000000;

// Color:18
	vec3 n_out18p0 = vec3(0.000000, 0.833388, 1.000000);
	float n_out18p1 = 1.000000;

// ShineFX:16
	vec3 n_out16p0;
	float n_out16p1;
	{
		n_out16p1 = n_out3p1;
		n_out16p0 = shineFunc(vec4(n_out3p0, n_out3p1), n_out17p0.xy, n_out19p0, n_out20p0, n_out21p0, n_out22p0, n_out23p0, n_out24p0, n_out18p0).rgb;
	}

// Output:0
	COLOR.rgb = n_out16p0;
	COLOR.a = n_out16p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -70.592, -116 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 800, 0 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 300, -160 )
nodes/fragment/16/node = SubResource( 437 )
nodes/fragment/16/position = Vector2( 600, 0 )
nodes/fragment/17/node = SubResource( 438 )
nodes/fragment/17/position = Vector2( 340, -240 )
nodes/fragment/18/node = SubResource( 439 )
nodes/fragment/18/position = Vector2( 340, 360 )
nodes/fragment/19/node = SubResource( 440 )
nodes/fragment/19/position = Vector2( 300, -20 )
nodes/fragment/20/node = SubResource( 441 )
nodes/fragment/20/position = Vector2( 300, 40 )
nodes/fragment/21/node = SubResource( 442 )
nodes/fragment/21/position = Vector2( 300, 100 )
nodes/fragment/22/node = SubResource( 443 )
nodes/fragment/22/position = Vector2( 300, 160 )
nodes/fragment/23/node = SubResource( 444 )
nodes/fragment/23/position = Vector2( 300, 220 )
nodes/fragment/24/node = SubResource( 445 )
nodes/fragment/24/position = Vector2( 300, 280 )
nodes/fragment/connections = PoolIntArray( 3, 0, 16, 1, 3, 1, 16, 2, 16, 0, 0, 0, 16, 1, 0, 1, 17, 0, 16, 0, 18, 0, 16, 9, 19, 0, 16, 3, 20, 0, 16, 4, 21, 0, 16, 5, 22, 0, 16, 6, 23, 0, 16, 7, 24, 0, 16, 8 )

[sub_resource type="ShaderMaterial" id=447]
shader = SubResource( 446 )

[sub_resource type="VisualShaderNodeCustom" id=448]
default_input_values = [ 1, 1.0, 2, Vector3( 1, 1, 1 ), 3, 1 ]
script = ExtResource( 74 )

[sub_resource type="VisualShaderNodeColorConstant" id=449]
constant = Color( 0.46875, 0.0585938, 0.337372, 1 )

[sub_resource type="VisualShader" id=450]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Color:26
	vec3 n_out26p0 = vec3(0.468750, 0.058594, 0.337372);
	float n_out26p1 = 1.000000;

// TintRGBA:25
	vec3 n_out25p0;
	float n_out25p1;
	{
		n_out25p0 = n_out3p0 * n_out26p0;
		n_out25p1 = n_out3p1 * n_out26p1;
	}

// Output:0
	COLOR.rgb = n_out25p0;
	COLOR.a = n_out25p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -166.592, -247 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 800, -100 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 180, -160 )
nodes/fragment/25/node = SubResource( 448 )
nodes/fragment/25/position = Vector2( 540, -100 )
nodes/fragment/26/node = SubResource( 449 )
nodes/fragment/26/position = Vector2( 337, 12.1088 )
nodes/fragment/connections = PoolIntArray( 3, 0, 25, 0, 3, 1, 25, 1, 25, 0, 0, 0, 25, 1, 0, 1, 26, 0, 25, 2, 26, 1, 25, 3 )

[sub_resource type="ShaderMaterial" id=451]
shader = SubResource( 450 )

[sub_resource type="VisualShaderNodeCustom" id=452]
default_input_values = [ 1, 0.0, 2, 1.0 ]
script = ExtResource( 75 )

[sub_resource type="VisualShaderNodeScalarConstant" id=453]
constant = 0.6

[sub_resource type="VisualShaderNodeScalarConstant" id=454]
constant = 2.0

[sub_resource type="VisualShader" id=455]
code = "shader_type canvas_item;


// Tonemap

vec3 t0nemapFunc(vec3 _c0l0r_t0nemap, float _exposure_t0nemap, float _gamma_t0nemap){
	_c0l0r_t0nemap.rgb *= pow(2.0, _exposure_t0nemap);
	_c0l0r_t0nemap.rgb = pow(_c0l0r_t0nemap.rgb, vec3(_gamma_t0nemap));
	return _c0l0r_t0nemap;
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:28
	float n_out28p0 = 0.600000;

// Scalar:29
	float n_out29p0 = 2.000000;

// Tonemap:27
	vec3 n_out27p0;
	{
		n_out27p0 = t0nemapFunc(n_out3p0, n_out28p0, n_out29p0);
	}

// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -164.592, -393 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 800, -200 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 200, -200 )
nodes/fragment/27/node = SubResource( 452 )
nodes/fragment/27/position = Vector2( 500, -340 )
nodes/fragment/28/node = SubResource( 453 )
nodes/fragment/28/position = Vector2( 240, -360 )
nodes/fragment/29/node = SubResource( 454 )
nodes/fragment/29/position = Vector2( 240, -280 )
nodes/fragment/connections = PoolIntArray( 27, 0, 0, 0, 3, 0, 27, 0, 3, 1, 0, 1, 28, 0, 27, 1, 29, 0, 27, 2 )

[sub_resource type="ShaderMaterial" id=456]
shader = SubResource( 455 )

[sub_resource type="VisualShaderNodeCustom" id=457]
default_input_values = [ 1, 1.5 ]
script = ExtResource( 76 )

[sub_resource type="VisualShaderNodeScalarConstant" id=458]
constant = 1.5

[sub_resource type="VisualShader" id=459]
code = "shader_type canvas_item;


// TurnCGA4Palette

vec3 cg4Pa1etteFunc(vec3 _c0l_cga, float _g4mm4_cga){
	_c0l_cga = pow(_c0l_cga, vec3(_g4mm4_cga));
	float _gr4y_c0l_cga4 = 0.21 * _c0l_cga.r + 0.71 * _c0l_cga.g + 0.07 * _c0l_cga.b;
	vec3 _re5_c0l_cga4 = vec3(0.0);
	
	if      (_gr4y_c0l_cga4 <= 1.0/4.0)
		_re5_c0l_cga4 = vec3(0.0,  0.0,  0.0);
	else if (_gr4y_c0l_cga4 <= 2.0/4.0)
		_re5_c0l_cga4 = vec3(1.0,  0.33, 1.0);
	else if (_gr4y_c0l_cga4 <= 3.0/4.0)
		_re5_c0l_cga4 = vec3(0.33, 1.0,  1.0);
	else if (_gr4y_c0l_cga4 <= 4.0/4.0)
		_re5_c0l_cga4 = vec3(1.0,  1.0,  1.0);
	
	return _re5_c0l_cga4;
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:31
	float n_out31p0 = 1.500000;

// TurnCGA4Palette:30
	vec3 n_out30p0;
	{
		n_out30p0 = cg4Pa1etteFunc(n_out3p0, n_out31p0);
	}

// Output:0
	COLOR.rgb = n_out30p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -164.592, -393 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 800, -200 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 280, -200 )
nodes/fragment/30/node = SubResource( 457 )
nodes/fragment/30/position = Vector2( 560, -340 )
nodes/fragment/31/node = SubResource( 458 )
nodes/fragment/31/position = Vector2( 280, -280 )
nodes/fragment/connections = PoolIntArray( 3, 1, 0, 1, 3, 0, 30, 0, 30, 0, 0, 0, 31, 0, 30, 1 )

[sub_resource type="ShaderMaterial" id=460]
shader = SubResource( 459 )

[sub_resource type="VisualShaderNodeScalarConstant" id=461]
constant = 1.6

[sub_resource type="VisualShaderNodeCustom" id=462]
default_input_values = [ 1, 1.5 ]
script = ExtResource( 77 )

[sub_resource type="VisualShader" id=463]
code = "shader_type canvas_item;


// TurnGameBoyPalette

vec3 g4meb0yPa1etteFunc(vec3 _c0l_g4b0, float _g4mm4_g4b0){
	_c0l_g4b0 = pow(_c0l_g4b0, vec3(_g4mm4_g4b0));
	float _gr4y_c0l_g4b0 = 0.21 * _c0l_g4b0.r + 0.71 * _c0l_g4b0.g + 0.07 * _c0l_g4b0.b;
	vec3 _re5_c0l_g4b0 = vec3(0.0);
	
	if      (_gr4y_c0l_g4b0 <= 1.0/4.0)
		_re5_c0l_g4b0 = vec3(0.063, 0.247, 0.063);
	else if (_gr4y_c0l_g4b0 <= 2.0/4.0)
		_re5_c0l_g4b0 = vec3(0.188, 0.392, 0.188);
	else if (_gr4y_c0l_g4b0 <= 3.0/4.0)
		_re5_c0l_g4b0 = vec3(0.549, 0.667, 0.078);
	else if (_gr4y_c0l_g4b0 <= 4.0/4.0)
		_re5_c0l_g4b0 = vec3(0.612, 0.725, 0.086);
	
	return _re5_c0l_g4b0;
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:32
	float n_out32p0 = 1.600000;

// TurnGameBoyPalette:33
	vec3 n_out33p0;
	{
		n_out33p0 = g4meb0yPa1etteFunc(n_out3p0, n_out32p0);
	}

// Output:0
	COLOR.rgb = n_out33p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -448, 0 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 800, -200 )
nodes/fragment/3/node = SubResource( 412 )
nodes/fragment/3/position = Vector2( 280, -200 )
nodes/fragment/32/node = SubResource( 461 )
nodes/fragment/32/position = Vector2( 280, -280 )
nodes/fragment/33/node = SubResource( 462 )
nodes/fragment/33/position = Vector2( 540, -300 )
nodes/fragment/connections = PoolIntArray( 3, 1, 0, 1, 33, 0, 0, 0, 32, 0, 33, 1, 3, 0, 33, 0 )

[sub_resource type="ShaderMaterial" id=464]
shader = SubResource( 463 )

[sub_resource type="VisualShaderNodeScalarConstant" id=465]
constant = 2.0

[sub_resource type="VisualShaderNodeCustom" id=466]
default_input_values = [ 1, 6, 2, Vector3( 2, 2, 0 ), 3, 2, 4, 0.8, 5, 0.5, 6, 0.3, 7, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 79 )

[sub_resource type="VisualShaderNodeInput" id=467]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=468]
constant = 6.0

[sub_resource type="VisualShaderNodeScalarConstant" id=469]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=470]
constant = 0.8

[sub_resource type="VisualShaderNodeScalarConstant" id=471]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=472]
constant = 0.3

[sub_resource type="VisualShaderNodeVec3Constant" id=473]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShader" id=474]
resource_local_to_scene = true
code = "shader_type canvas_item;


// FractalGenericNoise2D

float hash2_gener1c2DFractal(vec2 _p_hash2_gener1c) {
	return (fract(1e4 * sin(17.0 * _p_hash2_gener1c.x + _p_hash2_gener1c.y * 0.1) *
					(0.1 + abs(sin(_p_hash2_gener1c.y * 13.0 + _p_hash2_gener1c.x)))));
}
float genericNoise2DFractal(vec2 _x_gener1c2D) {
	vec2 _temp_i_gener1c2D = floor(_x_gener1c2D);
	vec2 _temp_f_gener1c2D = fract(_x_gener1c2D);

	float _a_g1n2 = hash2_gener1c2DFractal(_temp_i_gener1c2D);
	float _b_g1n2 = hash2_gener1c2DFractal(_temp_i_gener1c2D + vec2(1.0, 0.0));
	float _c_g1n2 = hash2_gener1c2DFractal(_temp_i_gener1c2D + vec2(0.0, 1.0));
	float _d_g1n2 = hash2_gener1c2DFractal(_temp_i_gener1c2D + vec2(1.0, 1.0));
	
	vec2 _u_g1n2 = _temp_f_gener1c2D * _temp_f_gener1c2D * (3.0 - 2.0 * _temp_f_gener1c2D);
	return (mix(_a_g1n2, _b_g1n2, _u_g1n2.x) + (_c_g1n2 - _a_g1n2) *
				_u_g1n2.y * (1.0 - _u_g1n2.x) + (_d_g1n2 - _b_g1n2) * _u_g1n2.x * _u_g1n2.y);
}
float genericNoise2DFBM(vec2 _uv_gnfbm, int _oct_gnfbm, vec2 _per_gnfbm, float _lac_gnfbm,
						float _persist_gnfbm, float _rot_gnfbm, float _ampl_gnfbm, vec2 _shift_gnfbm) {
	float _v = 0.0;
	float _a = _ampl_gnfbm;
	mat2 _r0t = mat2(vec2(cos(_rot_gnfbm), sin(_rot_gnfbm)), vec2(-sin(_rot_gnfbm), cos(_rot_gnfbm)));
	for (int i = 0; i < _oct_gnfbm; ++i) {
		_v += _a * genericNoise2DFractal(_uv_gnfbm * _per_gnfbm);
		_uv_gnfbm = _r0t * _uv_gnfbm * _lac_gnfbm + _shift_gnfbm;
		_a *= _persist_gnfbm;
	}
	return _v;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:4
	float n_out4p0 = 6.000000;

// Scalar:10
	float n_out10p0 = 2.000000;

// Scalar:5
	float n_out5p0 = 2.000000;

// Scalar:6
	float n_out6p0 = 0.800000;

// Scalar:7
	float n_out7p0 = 0.500000;

// Scalar:8
	float n_out8p0 = 0.300000;

// Vector:9
	vec3 n_out9p0 = vec3(0.500000, 0.500000, 0.000000);

// FractalGenericNoise2D:2
	float n_out2p0;
	{
		n_out2p0 = genericNoise2DFBM(n_out3p0.xy, int(n_out4p0), vec3(n_out10p0).xy, n_out5p0, n_out6p0, n_out7p0, n_out8p0, n_out9p0.xy);
	}

// Output:0
	COLOR.rgb = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -505.248, 36 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/2/node = SubResource( 466 )
nodes/fragment/2/position = Vector2( 140, 200 )
nodes/fragment/3/node = SubResource( 467 )
nodes/fragment/3/position = Vector2( -120, -20 )
nodes/fragment/4/node = SubResource( 468 )
nodes/fragment/4/position = Vector2( -140, 60 )
nodes/fragment/5/node = SubResource( 469 )
nodes/fragment/5/position = Vector2( -140, 220 )
nodes/fragment/6/node = SubResource( 470 )
nodes/fragment/6/position = Vector2( -140, 300 )
nodes/fragment/7/node = SubResource( 471 )
nodes/fragment/7/position = Vector2( -140, 380 )
nodes/fragment/8/node = SubResource( 472 )
nodes/fragment/8/position = Vector2( -140, 460 )
nodes/fragment/9/node = SubResource( 473 )
nodes/fragment/9/position = Vector2( -240, 540 )
nodes/fragment/10/node = SubResource( 465 )
nodes/fragment/10/position = Vector2( -140, 140 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 2, 1, 6, 0, 2, 4, 2, 0, 0, 0, 7, 0, 2, 5, 8, 0, 2, 6, 9, 0, 2, 7, 5, 0, 2, 3, 10, 0, 2, 2 )

[sub_resource type="ShaderMaterial" id=475]
shader = SubResource( 474 )

[sub_resource type="VisualShaderNodeVec3Constant" id=476]
constant = Vector3( 2, 2, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=477]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeCustom" id=478]
default_input_values = [ 1, 6, 2, Vector3( 2, 2, 0 ), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 80 )

[sub_resource type="VisualShaderNodeScalarConstant" id=479]
constant = 6.0

[sub_resource type="VisualShaderNodeScalarConstant" id=480]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=481]
constant = 0.8

[sub_resource type="VisualShaderNodeScalarConstant" id=482]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=483]
constant = 0.6

[sub_resource type="VisualShader" id=484]
resource_local_to_scene = true
code = "shader_type canvas_item;


// FractalPerlinNoise2D

float perlin2dN0iseFuncFractal(vec2 P) {
	vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
	vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
	
	Pi = Pi - floor(Pi * (1.0 / 289.0)) * 289.0;
	vec4 ix = Pi.xzxz;
	vec4 iy = Pi.yyww;
	vec4 fx = Pf.xzxz;
	vec4 fy = Pf.yyww;
	
	vec4 i = (((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))-
		floor((((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))*(1.0/289.0))*289.0;
	
	vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
	vec4 gy = abs(gx) - 0.5 ;
	vec4 tx = floor(gx + 0.5);
	gx = gx - tx;
	
	vec2 g00 = vec2(gx.x,gy.x);
	vec2 g10 = vec2(gx.y,gy.y);
	vec2 g01 = vec2(gx.z,gy.z);
	vec2 g11 = vec2(gx.w,gy.w);
	
	vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;
	
	float n00 = dot(g00, vec2(fx.x, fy.x));
	float n10 = dot(g10, vec2(fx.y, fy.y));
	float n01 = dot(g01, vec2(fx.z, fy.z));
	float n11 = dot(g11, vec2(fx.w, fy.w));
	
	vec2 fade_xy = Pf.xy * Pf.xy * Pf.xy * (Pf.xy * (Pf.xy * 6.0 - 15.0) + 10.0);
	vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
	float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
	return 2.3 * n_xy;
}
float perlinNoise2DFBM(vec2 _uv_pn2fbm, int _oct_pn2fbm, vec2 _per_pn2fbm, float _lac_pn2fbm,
						float _persist_pn2fbm, float _rot_pn2fbm, float _ampl_pn2fbm, vec2 _shift_pn2fbm) {
	float _v = 0.0;
	float _a = _ampl_pn2fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_pn2fbm), sin(_rot_pn2fbm)), vec2(-sin(_rot_pn2fbm), cos(_rot_pn2fbm)));
	for (int i = 0; i < _oct_pn2fbm; ++i) {
		_v += _a * perlin2dN0iseFuncFractal(_uv_pn2fbm * _per_pn2fbm);
		_uv_pn2fbm = _r0t * _uv_pn2fbm * _lac_pn2fbm + _shift_pn2fbm;
		_a *= _persist_pn2fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:5
	float n_out5p0 = 6.000000;

// Vector:10
	vec3 n_out10p0 = vec3(2.000000, 2.000000, 0.000000);

// Scalar:6
	float n_out6p0 = 2.000000;

// Scalar:7
	float n_out7p0 = 0.800000;

// Scalar:8
	float n_out8p0 = 0.500000;

// Scalar:9
	float n_out9p0 = 0.600000;

// Vector:11
	vec3 n_out11p0 = vec3(0.500000, 0.500000, 0.000000);

// FractalPerlinNoise2D:4
	float n_out4p0;
	{
		n_out4p0 = perlinNoise2DFBM(n_out3p0.xy, int(n_out5p0), n_out10p0.xy, n_out6p0, n_out7p0, n_out8p0, n_out9p0, n_out11p0.xy);
	}

// Output:0
	COLOR.rgb = vec3(n_out4p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -247.248, 62.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/3/node = SubResource( 467 )
nodes/fragment/3/position = Vector2( -100, -40 )
nodes/fragment/4/node = SubResource( 478 )
nodes/fragment/4/position = Vector2( 160, 200 )
nodes/fragment/5/node = SubResource( 479 )
nodes/fragment/5/position = Vector2( -140, 40 )
nodes/fragment/6/node = SubResource( 480 )
nodes/fragment/6/position = Vector2( -140, 220 )
nodes/fragment/7/node = SubResource( 481 )
nodes/fragment/7/position = Vector2( -140, 300 )
nodes/fragment/8/node = SubResource( 482 )
nodes/fragment/8/position = Vector2( -140, 380 )
nodes/fragment/9/node = SubResource( 483 )
nodes/fragment/9/position = Vector2( -140, 460 )
nodes/fragment/10/node = SubResource( 476 )
nodes/fragment/10/position = Vector2( -260, 120 )
nodes/fragment/11/node = SubResource( 477 )
nodes/fragment/11/position = Vector2( -240, 540 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 5, 0, 4, 1, 6, 0, 4, 3, 7, 0, 4, 4, 8, 0, 4, 5, 9, 0, 4, 6, 10, 0, 4, 2, 11, 0, 4, 7, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=485]
shader = SubResource( 484 )

[sub_resource type="VisualShaderNodeScalarConstant" id=486]
constant = 0.3

[sub_resource type="VisualShaderNodeScalarConstant" id=487]
constant = 1.0

[sub_resource type="VisualShaderNodeVec3Constant" id=488]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeCustom" id=489]
default_input_values = [ 1, 6, 2, Vector3( 2, 2, 0 ), 3, 2, 4, 0.8, 5, 0.5, 6, 0.3, 7, Vector3( 0.5, 0.5, 0 ), 8, 1, 9, false ]
script = ExtResource( 81 )

[sub_resource type="VisualShaderNodeBooleanConstant" id=490]

[sub_resource type="VisualShaderNodeVec3Constant" id=491]
constant = Vector3( 2, 2, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=492]
constant = 6.0

[sub_resource type="VisualShaderNodeInput" id=493]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=494]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=495]
constant = 0.8

[sub_resource type="VisualShaderNodeScalarConstant" id=496]
constant = 0.5

[sub_resource type="VisualShader" id=497]
code = "shader_type canvas_item;


// FractalWorleyNoise2D

vec2 cellular2dNoiseFractalFunc(vec2 P, float _jitter_w2d) {
	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 3/7
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec3 oi = vec3(-1.0, 0.0, 1.0);
	vec3 of = vec3(-0.5, 0.5, 1.5);
	vec3 px = (34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)-floor((34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)*(1.0/289.0))* 289.0;
	vec3 p = (34.0*(px.x+Pi.y+ oi)+1.0)*(px.x+Pi.y+ oi)-floor((34.0*(px.x+Pi.y+oi)+1.0)*(px.x+Pi.y+ oi)*(1.0/289.0))*289.0;
	vec3 ox = fract(p*K) - Ko;
	vec3 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	vec3 dx = Pf.x + 0.5 + _jitter_w2d*ox;
	vec3 dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d1 = dx * dx + dy * dy;
	p = (34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)-floor((34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 0.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d2 = dx * dx + dy * dy;
	p = (34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)-floor((34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 1.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d3 = dx * dx + dy * dy;
	vec3 d1a = min(d1, d2);
	d2 = max(d1, d2);
	d2 = min(d2, d3);
	d1 = min(d1a, d2);
	d2 = max(d1a, d2);
	d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx;
	d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx;
	d1.yz = min(d1.yz, d2.yz);
	d1.y = min(d1.y, d1.z);
	d1.y = min(d1.y, d2.x);
	return sqrt(d1.xy);
}
float cellularNoise2DFBM(vec2 _uv_cnfbm, int _oct_cnfbm, vec2 _per_cnfbm, float _lac_cnfbm, float _persist_cnfbm,
		float _rot_cnfbm, float _ampl_cnfbm, vec2 _shift_cnfbm, float _jitter_cnfbm, bool _use_F2_cnfbm) {
	float _v = 0.0;
	float _a = _ampl_cnfbm;
	mat2 _r0t = mat2(vec2(cos(_rot_cnfbm), sin(_rot_cnfbm)), vec2(-sin(_rot_cnfbm), cos(_rot_cnfbm)));
	for (int i = 0; i < _oct_cnfbm; ++i) {
		vec2 _cell_noiseF12 = cellular2dNoiseFractalFunc(_uv_cnfbm * _per_cnfbm, _jitter_cnfbm);
		if (_use_F2_cnfbm) {
			_v += _a * _cell_noiseF12.y;
		} else {
			_v += _a * _cell_noiseF12.x;
		}
		_uv_cnfbm = _r0t * _uv_cnfbm * _lac_cnfbm + _shift_cnfbm;
		_a *= _persist_cnfbm;
	}
	return _v;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Scalar:4
	float n_out4p0 = 6.000000;

// Vector:3
	vec3 n_out3p0 = vec3(2.000000, 2.000000, 0.000000);

// Scalar:7
	float n_out7p0 = 2.000000;

// Scalar:8
	float n_out8p0 = 0.800000;

// Scalar:9
	float n_out9p0 = 0.500000;

// Scalar:10
	float n_out10p0 = 0.300000;

// Vector:12
	vec3 n_out12p0 = vec3(0.500000, 0.500000, 0.000000);

// Scalar:11
	float n_out11p0 = 1.000000;

// Boolean:14
	bool n_out14p0 = false;

// FractalWorleyNoise2D:13
	float n_out13p0;
	{
		n_out13p0 = cellularNoise2DFBM(n_out5p0.xy, int(n_out4p0), n_out3p0.xy, n_out7p0, n_out8p0, n_out9p0, n_out10p0, n_out12p0.xy, n_out11p0, n_out14p0);
	}

// Output:0
	COLOR.rgb = vec3(n_out13p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -195.248, 357.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 460, 200 )
nodes/fragment/3/node = SubResource( 491 )
nodes/fragment/3/position = Vector2( -220, 160 )
nodes/fragment/4/node = SubResource( 492 )
nodes/fragment/4/position = Vector2( -80, 100 )
nodes/fragment/5/node = SubResource( 493 )
nodes/fragment/5/position = Vector2( -40, 40 )
nodes/fragment/7/node = SubResource( 494 )
nodes/fragment/7/position = Vector2( -80, 240 )
nodes/fragment/8/node = SubResource( 495 )
nodes/fragment/8/position = Vector2( -80, 300 )
nodes/fragment/9/node = SubResource( 496 )
nodes/fragment/9/position = Vector2( -80, 360 )
nodes/fragment/10/node = SubResource( 486 )
nodes/fragment/10/position = Vector2( -80, 420 )
nodes/fragment/11/node = SubResource( 487 )
nodes/fragment/11/position = Vector2( -80, 560 )
nodes/fragment/12/node = SubResource( 488 )
nodes/fragment/12/position = Vector2( -220, 480 )
nodes/fragment/13/node = SubResource( 489 )
nodes/fragment/13/position = Vector2( 180, 200 )
nodes/fragment/14/node = SubResource( 490 )
nodes/fragment/14/position = Vector2( -20, 620 )
nodes/fragment/connections = PoolIntArray( 13, 0, 0, 0, 5, 0, 13, 0, 4, 0, 13, 1, 3, 0, 13, 2, 7, 0, 13, 3, 8, 0, 13, 4, 9, 0, 13, 5, 10, 0, 13, 6, 12, 0, 13, 7, 11, 0, 13, 8, 14, 0, 13, 9 )

[sub_resource type="ShaderMaterial" id=498]
shader = SubResource( 497 )

[sub_resource type="VisualShaderNodeVec3Constant" id=499]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=500]
constant = Vector3( 2, 2, 0 )

[sub_resource type="VisualShaderNodeCustom" id=501]
default_input_values = [ 1, 6, 2, Vector3( 2, 2, 0 ), 3, 2, 4, 0.8, 5, 0.5, 6, 0.5, 7, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 82 )

[sub_resource type="VisualShaderNodeInput" id=502]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=503]
constant = 6.0

[sub_resource type="VisualShaderNodeScalarConstant" id=504]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=505]
constant = 0.8

[sub_resource type="VisualShaderNodeScalarConstant" id=506]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=507]
constant = 0.5

[sub_resource type="VisualShader" id=508]
code = "shader_type canvas_item;


// FractalSimplexNoise2D

vec3 _permute_simplex2_n0ise_fractal(vec3 x) {
	return ((x*34.0)+1.0)*x-floor(((x*34.0)+1.0)*x*(1.0/289.0))*289.0;
}

float simplex2dN0iseFractalFunc(vec2 v) {
	vec4 C = vec4(0.211324865405187,
				0.366025403784439,
				-0.577350269189626,
				0.024390243902439);
	
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);
	
	vec2 i1;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec4 x12 = vec4(x0.xy, x0.xy) + C.xxzz;
	x12.xy -= i1;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec3 p = _permute_simplex2_n0ise_fractal(_permute_simplex2_n0ise_fractal(i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0));
	
	vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), vec3(0.0));
	m = m * m;
	m = m * m;
	
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	
	m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
	
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}
float simplexNoise2DFBM(vec2 _uv_sn2fbm, int _oct_sn2fbm, vec2 _per_sn2fbm, float _lac_sn2fbm,
						float _persist_sn2fbm, float _rot_sn2fbm, float _ampl_sn2fbm, vec2 _shift_sn2fbm) {
	float _v = 0.0;
	float _a = _ampl_sn2fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_sn2fbm), sin(_rot_sn2fbm)), vec2(-sin(_rot_sn2fbm), cos(_rot_sn2fbm)));
	for (int i = 0; i < _oct_sn2fbm; ++i) {
		_v += _a * simplex2dN0iseFractalFunc(_uv_sn2fbm * _per_sn2fbm);
		_uv_sn2fbm = _r0t * _uv_sn2fbm * _lac_sn2fbm + _shift_sn2fbm;
		_a *= _persist_sn2fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:4
	float n_out4p0 = 6.000000;

// Vector:12
	vec3 n_out12p0 = vec3(2.000000, 2.000000, 0.000000);

// Scalar:5
	float n_out5p0 = 2.000000;

// Scalar:6
	float n_out6p0 = 0.800000;

// Scalar:7
	float n_out7p0 = 0.500000;

// Scalar:8
	float n_out8p0 = 0.500000;

// Vector:10
	vec3 n_out10p0 = vec3(0.500000, 0.500000, 0.000000);

// FractalSimplexNoise2D:2
	float n_out2p0;
	{
		n_out2p0 = simplexNoise2DFBM(n_out3p0.xy, int(n_out4p0), n_out12p0.xy, n_out5p0, n_out6p0, n_out7p0, n_out8p0, n_out10p0.xy);
	}

// Output:0
	COLOR.rgb = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -169.248, 137.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 200 )
nodes/fragment/2/node = SubResource( 501 )
nodes/fragment/2/position = Vector2( 320, 200 )
nodes/fragment/3/node = SubResource( 502 )
nodes/fragment/3/position = Vector2( 100, 40 )
nodes/fragment/4/node = SubResource( 503 )
nodes/fragment/4/position = Vector2( 60, 100 )
nodes/fragment/5/node = SubResource( 504 )
nodes/fragment/5/position = Vector2( 60, 240 )
nodes/fragment/6/node = SubResource( 505 )
nodes/fragment/6/position = Vector2( 60, 300 )
nodes/fragment/7/node = SubResource( 506 )
nodes/fragment/7/position = Vector2( 60, 360 )
nodes/fragment/8/node = SubResource( 507 )
nodes/fragment/8/position = Vector2( 60, 420 )
nodes/fragment/10/node = SubResource( 499 )
nodes/fragment/10/position = Vector2( -60, 480 )
nodes/fragment/12/node = SubResource( 500 )
nodes/fragment/12/position = Vector2( -80, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 1, 10, 0, 2, 7, 5, 0, 2, 3, 6, 0, 2, 4, 7, 0, 2, 5, 8, 0, 2, 6, 12, 0, 2, 2 )

[sub_resource type="ShaderMaterial" id=509]
shader = SubResource( 508 )

[sub_resource type="VisualShaderNodeScalarConstant" id=510]
constant = 0.8

[sub_resource type="VisualShaderNodeScalarConstant" id=511]
constant = 2.0

[sub_resource type="VisualShaderNodeVec3Constant" id=512]
constant = Vector3( 2, 2, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=513]
constant = 6.0

[sub_resource type="VisualShaderNodeCustom" id=514]
default_input_values = [ 1, 6, 2, Vector3( 2, 2, 0 ), 3, 2, 4, 0.8, 5, 0.5, 6, 0.3, 7, Vector3( 0.5, 0.5, 0 ), 8, 1, 9, false, 10, 0 ]
script = ExtResource( 83 )

[sub_resource type="VisualShaderNodeInput" id=515]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=516]
input_name = "time"

[sub_resource type="VisualShaderNodeBooleanConstant" id=517]

[sub_resource type="VisualShaderNodeScalarConstant" id=518]
constant = 1.0

[sub_resource type="VisualShaderNodeVec3Constant" id=519]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=520]
constant = 0.3

[sub_resource type="VisualShaderNodeScalarConstant" id=521]
constant = 0.5

[sub_resource type="VisualShader" id=522]
code = "shader_type canvas_item;


// FractalWorleyNoise3D

vec2 cellular3dNoiseFractalFunc(vec3 P, float _jitter_w3d) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P) - 0.5;
	
	vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
	vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
	vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);
	
	vec3 p = ((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)*(Pi.x+vec3(-1.0,0.0,1.0)))-floor(((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)
				*(Pi.x+vec3(-1.0,0.0,1.0)))*(1.0/289.0))*289.0;
	vec3 p1 = ((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))-floor(((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))*(1.0/289.0))*289.0;
	vec3 p2 = ((34.0*(p+Pi.y)+1.0)*(p+Pi.y))-floor(((34.0*(p+Pi.y)+1.0)*(p+Pi.y))*(1.0/289.0))*289.0;
	vec3 p3 = ((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))-floor(((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))*(1.0/289.0))*289.0;
	
	vec3 p11 = ((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))-floor(((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p12 = ((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))-floor(((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))*(1.0/289.0))*289.0;
	vec3 p13 = ((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))-floor(((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p21 = ((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))-floor(((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p22 = ((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))-floor(((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))*(1.0/289.0))*289.0;
	vec3 p23 = ((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))-floor(((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p31 = ((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))-floor(((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p32 = ((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))-floor(((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))*(1.0/289.0))*289.0;
	vec3 p33 = ((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))-floor(((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 ox11 = fract(p11*K) - Ko;
	vec3 oy11 = ((floor(p11*K))-floor((floor(p11*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz11 = floor(p11*K2)*Kz - Kzo;
	
	vec3 ox12 = fract(p12*K) - Ko;
	vec3 oy12 = ((floor(p12*K))-floor((floor(p12*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz12 = floor(p12*K2)*Kz - Kzo;
	
	vec3 ox13 = fract(p13*K) - Ko;
	vec3 oy13 = ((floor(p13*K))-floor((floor(p13*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz13 = floor(p13*K2)*Kz - Kzo;
	
	vec3 ox21 = fract(p21*K) - Ko;
	vec3 oy21 = ((floor(p21*K))-floor((floor(p21*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz21 = floor(p21*K2)*Kz - Kzo;
	
	vec3 ox22 = fract(p22*K) - Ko;
	vec3 oy22 = ((floor(p22*K))-floor((floor(p22*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz22 = floor(p22*K2)*Kz - Kzo;
	
	vec3 ox23 = fract(p23*K) - Ko;
	vec3 oy23 = ((floor(p23*K))-floor((floor(p23*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz23 = floor(p23*K2)*Kz - Kzo;
	
	vec3 ox31 = fract(p31*K) - Ko;
	vec3 oy31 = ((floor(p31*K))-floor((floor(p31*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz31 = floor(p31*K2)*Kz - Kzo;
	
	vec3 ox32 = fract(p32*K) - Ko;
	vec3 oy32 = ((floor(p32*K))-floor((floor(p32*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz32 = floor(p32*K2)*Kz - Kzo;
	
	vec3 ox33 = fract(p33*K) - Ko;
	vec3 oy33 = ((floor(p33*K))-floor((floor(p33*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz33 = floor(p33*K2)*Kz - Kzo;
	
	vec3 dx11 = Pfx + _jitter_w3d*ox11;
	vec3 dy11 = Pfy.x + _jitter_w3d*oy11;
	vec3 dz11 = Pfz.x + _jitter_w3d*oz11;
	
	vec3 dx12 = Pfx + _jitter_w3d*ox12;
	vec3 dy12 = Pfy.x + _jitter_w3d*oy12;
	vec3 dz12 = Pfz.y + _jitter_w3d*oz12;
	
	vec3 dx13 = Pfx + _jitter_w3d*ox13;
	vec3 dy13 = Pfy.x + _jitter_w3d*oy13;
	vec3 dz13 = Pfz.z + _jitter_w3d*oz13;
	
	vec3 dx21 = Pfx + _jitter_w3d*ox21;
	vec3 dy21 = Pfy.y + _jitter_w3d*oy21;
	vec3 dz21 = Pfz.x + _jitter_w3d*oz21;
	
	vec3 dx22 = Pfx + _jitter_w3d*ox22;
	vec3 dy22 = Pfy.y + _jitter_w3d*oy22;
	vec3 dz22 = Pfz.y + _jitter_w3d*oz22;
	
	vec3 dx23 = Pfx + _jitter_w3d*ox23;
	vec3 dy23 = Pfy.y + _jitter_w3d*oy23;
	vec3 dz23 = Pfz.z + _jitter_w3d*oz23;
	
	vec3 dx31 = Pfx + _jitter_w3d*ox31;
	vec3 dy31 = Pfy.z + _jitter_w3d*oy31;
	vec3 dz31 = Pfz.x + _jitter_w3d*oz31;
	
	vec3 dx32 = Pfx + _jitter_w3d*ox32;
	vec3 dy32 = Pfy.z + _jitter_w3d*oy32;
	vec3 dz32 = Pfz.y + _jitter_w3d*oz32;
	
	vec3 dx33 = Pfx + _jitter_w3d*ox33;
	vec3 dy33 = Pfy.z + _jitter_w3d*oy33;
	vec3 dz33 = Pfz.z + _jitter_w3d*oz33;
	
	vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;
	vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;
	vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;
	vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;
	vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;
	vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;
	vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;
	vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;
	vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;

	vec3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13);
	d13 = max(d1a, d13);
	d12 = min(d12, d13);
	vec3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23);
	d23 = max(d2a, d23);
	d22 = min(d22, d23);
	vec3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33);
	d33 = max(d3a, d33);
	d32 = min(d32, d33);
	vec3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31);
	d31 = max(da, d31);
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;
	d12 = min(d12, d21);
	d12 = min(d12, d22);
	d12 = min(d12, d31);
	d12 = min(d12, d32);
	d11.yz = min(d11.yz,d12.xy);
	d11.y = min(d11.y,d12.z);
	d11.y = min(d11.y,d11.z);
	return sqrt(d11.xy);
}
float cellularNoise3DFBM(vec2 _uv_cnfbm, int _oct_cnfbm, vec2 _per_cnfbm, float _lac_cnfbm, float _persist_cnfbm,
		float _rot_cnfbm, float _ampl_cnfbm, vec2 _shift_cnfbm, float _jitter_cnfbm, bool _use_F2_cnfbm, float _time_cnfbm) {
	float _v = 0.0;
	float _a = _ampl_cnfbm;
	mat2 _r0t = mat2(vec2(cos(_rot_cnfbm), sin(_rot_cnfbm)), vec2(-sin(_rot_cnfbm), cos(_rot_cnfbm)));
	for (int i = 0; i < _oct_cnfbm; ++i) {
		vec2 _cell_noiseF12 = cellular3dNoiseFractalFunc(vec3(_uv_cnfbm * _per_cnfbm, _time_cnfbm), _jitter_cnfbm);
		if (_use_F2_cnfbm) {
			_v += _a * _cell_noiseF12.y;
		} else {
			_v += _a * _cell_noiseF12.x;
		}
		_uv_cnfbm = _r0t * _uv_cnfbm * _lac_cnfbm + _shift_cnfbm;
		_a *= _persist_cnfbm;
	}
	return _v;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:13
	float n_out13p0 = 6.000000;

// Vector:12
	vec3 n_out12p0 = vec3(2.000000, 2.000000, 0.000000);

// Scalar:11
	float n_out11p0 = 2.000000;

// Scalar:10
	float n_out10p0 = 0.800000;

// Scalar:9
	float n_out9p0 = 0.500000;

// Scalar:8
	float n_out8p0 = 0.300000;

// Vector:7
	vec3 n_out7p0 = vec3(0.500000, 0.500000, 0.000000);

// Scalar:6
	float n_out6p0 = 1.000000;

// Boolean:5
	bool n_out5p0 = false;

// Input:4
	float n_out4p0 = TIME;

// FractalWorleyNoise3D:2
	float n_out2p0;
	{
		n_out2p0 = cellularNoise3DFBM(n_out3p0.xy, int(n_out13p0), n_out12p0.xy, n_out11p0, n_out10p0, n_out9p0, n_out8p0, n_out7p0.xy, n_out6p0, n_out5p0, n_out4p0);
	}

// Output:0
	COLOR.rgb = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -136.248, -43.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 200 )
nodes/fragment/2/node = SubResource( 514 )
nodes/fragment/2/position = Vector2( 340, 200 )
nodes/fragment/3/node = SubResource( 515 )
nodes/fragment/3/position = Vector2( 120, -20 )
nodes/fragment/4/node = SubResource( 516 )
nodes/fragment/4/position = Vector2( 100, 620 )
nodes/fragment/5/node = SubResource( 517 )
nodes/fragment/5/position = Vector2( 120, 560 )
nodes/fragment/6/node = SubResource( 518 )
nodes/fragment/6/position = Vector2( 80, 500 )
nodes/fragment/7/node = SubResource( 519 )
nodes/fragment/7/position = Vector2( -60, 420 )
nodes/fragment/8/node = SubResource( 520 )
nodes/fragment/8/position = Vector2( 80, 360 )
nodes/fragment/9/node = SubResource( 521 )
nodes/fragment/9/position = Vector2( 80, 300 )
nodes/fragment/10/node = SubResource( 510 )
nodes/fragment/10/position = Vector2( 80, 240 )
nodes/fragment/11/node = SubResource( 511 )
nodes/fragment/11/position = Vector2( 80, 180 )
nodes/fragment/12/node = SubResource( 512 )
nodes/fragment/12/position = Vector2( -60, 100 )
nodes/fragment/13/node = SubResource( 513 )
nodes/fragment/13/position = Vector2( 80, 40 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 10, 5, 0, 2, 9, 6, 0, 2, 8, 7, 0, 2, 7, 8, 0, 2, 6, 9, 0, 2, 5, 10, 0, 2, 4, 11, 0, 2, 3, 12, 0, 2, 2, 13, 0, 2, 1 )

[sub_resource type="ShaderMaterial" id=523]
shader = SubResource( 522 )

[sub_resource type="VisualShaderNodeScalarConstant" id=524]
constant = 0.6

[sub_resource type="VisualShaderNodeVec3Constant" id=525]
constant = Vector3( 2, 2, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=526]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeInput" id=527]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id=528]
default_input_values = [ 1, 6, 2, Vector3( 2, 2, 0 ), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3( 0.5, 0.5, 0 ), 8, 0 ]
script = ExtResource( 84 )

[sub_resource type="VisualShaderNodeInput" id=529]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=530]
constant = 6.0

[sub_resource type="VisualShaderNodeScalarConstant" id=531]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=532]
constant = 0.8

[sub_resource type="VisualShaderNodeScalarConstant" id=533]
constant = 0.5

[sub_resource type="VisualShader" id=534]
code = "shader_type canvas_item;


// FractalPerlinNoise3D

float perlin3dNoiseFractalFunc(vec3 P) {
	vec3 Pi0 = floor(P);
	vec3 Pi1 = Pi0 + vec3(1.0);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	vec4 ixy = (((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy))-
		floor(((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*(1.0/289.0))*289.0;
	vec4 ixy0 = ((((ixy + iz0)*34.0)+1.0)*(ixy + iz0))-floor((((ixy + iz0)*34.0)+1.0)*(ixy + iz0)*(1.0/289.0))*289.0;
	vec4 ixy1 = ((((ixy + iz1)*34.0)+1.0)*(ixy + iz1))-floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1)*(1.0/289.0))*289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}
float perlinNoise3DFBM(vec2 _uv_pn3fbm, int _oct_pn3fbm, vec2 _per_pn3fbm, float _lac_pn3fbm,
		float _persist_pn3fbm, float _rot_pn3fbm, float _ampl_pn3fbm, vec2 _shift_pn3fbm, float _time_pn3fbm) {
	float _v = 0.0;
	float _a = _ampl_pn3fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_pn3fbm), sin(_rot_pn3fbm)), vec2(-sin(_rot_pn3fbm), cos(_rot_pn3fbm)));
	for (int i = 0; i < _oct_pn3fbm; ++i) {
		_v += _a * perlin3dNoiseFractalFunc(vec3(_uv_pn3fbm * _per_pn3fbm, _time_pn3fbm));
		_uv_pn3fbm = _r0t * _uv_pn3fbm * _lac_pn3fbm + _shift_pn3fbm;
		_a *= _persist_pn3fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:6
	float n_out6p0 = 6.000000;

// Vector:11
	vec3 n_out11p0 = vec3(2.000000, 2.000000, 0.000000);

// Scalar:7
	float n_out7p0 = 2.000000;

// Scalar:8
	float n_out8p0 = 0.800000;

// Scalar:9
	float n_out9p0 = 0.500000;

// Scalar:10
	float n_out10p0 = 0.600000;

// Vector:12
	vec3 n_out12p0 = vec3(0.500000, 0.500000, 0.000000);

// Input:5
	float n_out5p0 = TIME;

// FractalPerlinNoise3D:4
	float n_out4p0;
	{
		n_out4p0 = perlinNoise3DFBM(n_out3p0.xy, int(n_out6p0), n_out11p0.xy, n_out7p0, n_out8p0, n_out9p0, n_out10p0, n_out12p0.xy, n_out5p0);
	}

// Output:0
	COLOR.rgb = vec3(n_out4p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -379, 201 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 200 )
nodes/fragment/3/node = SubResource( 527 )
nodes/fragment/3/position = Vector2( -80, 0 )
nodes/fragment/4/node = SubResource( 528 )
nodes/fragment/4/position = Vector2( 160, 200 )
nodes/fragment/5/node = SubResource( 529 )
nodes/fragment/5/position = Vector2( -100, 520 )
nodes/fragment/6/node = SubResource( 530 )
nodes/fragment/6/position = Vector2( -120, 60 )
nodes/fragment/7/node = SubResource( 531 )
nodes/fragment/7/position = Vector2( -120, 200 )
nodes/fragment/8/node = SubResource( 532 )
nodes/fragment/8/position = Vector2( -120, 260 )
nodes/fragment/9/node = SubResource( 533 )
nodes/fragment/9/position = Vector2( -120, 320 )
nodes/fragment/10/node = SubResource( 524 )
nodes/fragment/10/position = Vector2( -120, 380 )
nodes/fragment/11/node = SubResource( 525 )
nodes/fragment/11/position = Vector2( -260, 120 )
nodes/fragment/12/node = SubResource( 526 )
nodes/fragment/12/position = Vector2( -260, 440 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 6, 0, 4, 1, 7, 0, 4, 3, 8, 0, 4, 4, 9, 0, 4, 5, 10, 0, 4, 6, 11, 0, 4, 2, 12, 0, 4, 7, 4, 0, 0, 0, 5, 0, 4, 8 )

[sub_resource type="ShaderMaterial" id=535]
shader = SubResource( 534 )

[sub_resource type="VisualShaderNodeScalarConstant" id=536]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=537]
constant = 0.6

[sub_resource type="VisualShaderNodeCustom" id=538]
default_input_values = [ 1, 6, 2, Vector3( 2, 2, 0 ), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3( 0.5, 0.5, 0 ), 8, 0 ]
script = ExtResource( 85 )

[sub_resource type="VisualShaderNodeInput" id=539]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=540]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=541]
constant = 6.0

[sub_resource type="VisualShaderNodeVec3Constant" id=542]
constant = Vector3( 2, 2, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=543]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=544]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=545]
constant = 0.8

[sub_resource type="VisualShader" id=546]
code = "shader_type canvas_item;


// FractalSimplexNoise3D

vec4 _permute_simplex3_n0ise_fractal(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float simplex3dN0iseFractalFunc(vec3 v) { 
	vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
	vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
	
	vec3 i  = floor(v + dot(v, vec3(C.y)));
	vec3 x0 = v - i + dot(i, vec3(C.x)) ;
	
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min( g.xyz, l.zxy );
	vec3 i2 = max( g.xyz, l.zxy );
	
	vec3 x1 = x0 - i1 + vec3(C.x);
	vec3 x2 = x0 - i2 + vec3(C.y);
	vec3 x3 = x0 - D.yyy;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec4 p = _permute_simplex3_n0ise_fractal(_permute_simplex3_n0ise_fractal(_permute_simplex3_n0ise_fractal(
	 		i.z + vec4(0.0, i1.z, i2.z, 1.0))
		+   i.y + vec4(0.0, i1.y, i2.y, 1.0))
		+   i.x + vec4(0.0, i1.x, i2.x, 1.0));
	
	float n_ = 0.142857142857;
	vec3  ns = n_ * D.wyz - D.xzx;
	
	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
	
	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_ );
	
	vec4 x = x_ *ns.x + vec4(ns.y);
	vec4 y = y_ *ns.x + vec4(ns.y);
	vec4 h = 1.0 - abs(x) - abs(y);
	
	vec4 b0 = vec4( x.xy, y.xy );
	vec4 b1 = vec4( x.zw, y.zw );
	
	vec4 s0 = floor(b0)*2.0 + 1.0;
	vec4 s1 = floor(b1)*2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));
	
	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
	
	vec3 p0 = vec3(a0.xy,h.x);
	vec3 p1 = vec3(a0.zw,h.y);
	vec3 p2 = vec3(a1.xy,h.z);
	vec3 p3 = vec3(a1.zw,h.w);
	
	vec4 norm = 2.79284291400159 - 0.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	
	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
	m = m * m;
	return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}
float simplexNoise3DFBM(vec2 _uv_sn3fbm, int _oct_sn3fbm, vec2 _per_sn3fbm, float _lac_sn3fbm,
		float _persist_sn3fbm, float _rot_sn3fbm, float _ampl_sn3fbm, vec2 _shift_sn3fbm, float _time_sn3fbm) {
	float _v = 0.0;
	float _a = _ampl_sn3fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_sn3fbm), sin(_rot_sn3fbm)), vec2(-sin(_rot_sn3fbm), cos(_rot_sn3fbm)));
	for (int i = 0; i < _oct_sn3fbm; ++i) {
		_v += _a * simplex3dN0iseFractalFunc(vec3(_uv_sn3fbm * _per_sn3fbm, _time_sn3fbm));
		_uv_sn3fbm = _r0t * _uv_sn3fbm * _lac_sn3fbm + _shift_sn3fbm;
		_a *= _persist_sn3fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:5
	float n_out5p0 = 6.000000;

// Vector:6
	vec3 n_out6p0 = vec3(2.000000, 2.000000, 0.000000);

// Scalar:8
	float n_out8p0 = 2.000000;

// Scalar:9
	float n_out9p0 = 0.800000;

// Scalar:10
	float n_out10p0 = 0.500000;

// Scalar:11
	float n_out11p0 = 0.600000;

// Vector:7
	vec3 n_out7p0 = vec3(0.500000, 0.500000, 0.000000);

// Input:4
	float n_out4p0 = TIME;

// FractalSimplexNoise3D:2
	float n_out2p0;
	{
		n_out2p0 = simplexNoise3DFBM(n_out3p0.xy, int(n_out5p0), n_out6p0.xy, n_out8p0, n_out9p0, n_out10p0, n_out11p0, n_out7p0.xy, n_out4p0);
	}

// Output:0
	COLOR.rgb = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -379, 201 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/2/node = SubResource( 538 )
nodes/fragment/2/position = Vector2( 140, 200 )
nodes/fragment/3/node = SubResource( 539 )
nodes/fragment/3/position = Vector2( -100, 0 )
nodes/fragment/4/node = SubResource( 540 )
nodes/fragment/4/position = Vector2( -100, 520 )
nodes/fragment/5/node = SubResource( 541 )
nodes/fragment/5/position = Vector2( -120, 60 )
nodes/fragment/6/node = SubResource( 542 )
nodes/fragment/6/position = Vector2( -260, 120 )
nodes/fragment/7/node = SubResource( 543 )
nodes/fragment/7/position = Vector2( -260, 440 )
nodes/fragment/8/node = SubResource( 544 )
nodes/fragment/8/position = Vector2( -120, 200 )
nodes/fragment/9/node = SubResource( 545 )
nodes/fragment/9/position = Vector2( -120, 260 )
nodes/fragment/10/node = SubResource( 536 )
nodes/fragment/10/position = Vector2( -120, 320 )
nodes/fragment/11/node = SubResource( 537 )
nodes/fragment/11/position = Vector2( -120, 380 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 2, 0, 5, 0, 2, 1, 6, 0, 2, 2, 4, 0, 2, 8, 7, 0, 2, 7, 8, 0, 2, 3, 9, 0, 2, 4, 10, 0, 2, 5, 11, 0, 2, 6 )

[sub_resource type="ShaderMaterial" id=547]
shader = SubResource( 546 )

[sub_resource type="VisualShaderNodeScalarConstant" id=548]
constant = 0.6

[sub_resource type="VisualShaderNodeVec3Constant" id=549]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=550]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id=551]
default_input_values = [ 1, 6, 2, Vector3( 2, 2, 0 ), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3( 0.5, 0.5, 0 ), 8, 0, 9, 0 ]
script = ExtResource( 86 )

[sub_resource type="VisualShaderNodeInput" id=552]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=553]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=554]
constant = 6.0

[sub_resource type="VisualShaderNodeScalarConstant" id=555]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=556]
constant = 0.8

[sub_resource type="VisualShaderNodeScalarConstant" id=557]
constant = 0.5

[sub_resource type="VisualShaderNodeVec3Constant" id=558]
constant = Vector3( 2, 2, 0 )

[sub_resource type="VisualShader" id=559]
code = "shader_type canvas_item;


// FractalPerlinNoise4D

vec4 _permute_perlin4d_n0ise_fractal_func(vec4 x) {
	return ((x*34.0)+1.0)*x - floor(((x*34.0)+1.0)*x * (1.0 / 289.0)) * 289.0;
}
float perlin4dNoiseFractalFunc(vec4 P) {
	vec4 Pi0 = floor(P);
	vec4 Pi1 = Pi0 + 1.0;
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec4 Pf0 = fract(P);
	vec4 Pf1 = Pf0 - 1.0;
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.zzzz);
	vec4 iz1 = vec4(Pi1.zzzz);
	vec4 iw0 = vec4(Pi0.wwww);
	vec4 iw1 = vec4(Pi1.wwww);
	
	vec4 ixy = _permute_perlin4d_n0ise_fractal_func(_permute_perlin4d_n0ise_fractal_func(ix) + iy);
	vec4 ixy0 = _permute_perlin4d_n0ise_fractal_func(ixy + iz0);
	vec4 ixy1 = _permute_perlin4d_n0ise_fractal_func(ixy + iz1);
	vec4 ixy00 = _permute_perlin4d_n0ise_fractal_func(ixy0 + iw0);
	vec4 ixy01 = _permute_perlin4d_n0ise_fractal_func(ixy0 + iw1);
	vec4 ixy10 = _permute_perlin4d_n0ise_fractal_func(ixy1 + iw0);
	vec4 ixy11 = _permute_perlin4d_n0ise_fractal_func(ixy1 + iw1);
	
	vec4 gx00 = ixy00 * (1.0 / 7.0);
	vec4 gy00 = floor(gx00) * (1.0 / 7.0);
	vec4 gz00 = floor(gy00) * (1.0 / 6.0);
	gx00 = fract(gx00) - 0.5;
	gy00 = fract(gy00) - 0.5;
	gz00 = fract(gz00) - 0.5;
	vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);
	vec4 sw00 = step(gw00, vec4(0.0));
	gx00 -= sw00 * (step(0.0, gx00) - 0.5);
	gy00 -= sw00 * (step(0.0, gy00) - 0.5);
	
	vec4 gx01 = ixy01 * (1.0 / 7.0);
	vec4 gy01 = floor(gx01) * (1.0 / 7.0);
	vec4 gz01 = floor(gy01) * (1.0 / 6.0);
	gx01 = fract(gx01) - 0.5;
	gy01 = fract(gy01) - 0.5;
	gz01 = fract(gz01) - 0.5;
	vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);
	vec4 sw01 = step(gw01, vec4(0.0));
	gx01 -= sw01 * (step(0.0, gx01) - 0.5);
	gy01 -= sw01 * (step(0.0, gy01) - 0.5);
	
	vec4 gx10 = ixy10 * (1.0 / 7.0);
	vec4 gy10 = floor(gx10) * (1.0 / 7.0);
	vec4 gz10 = floor(gy10) * (1.0 / 6.0);
	gx10 = fract(gx10) - 0.5;
	gy10 = fract(gy10) - 0.5;
	gz10 = fract(gz10) - 0.5;
	vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);
	vec4 sw10 = step(gw10, vec4(0.0));
	gx10 -= sw10 * (step(0.0, gx10) - 0.5);
	gy10 -= sw10 * (step(0.0, gy10) - 0.5);
	
	vec4 gx11 = ixy11 * (1.0 / 7.0);
	vec4 gy11 = floor(gx11) * (1.0 / 7.0);
	vec4 gz11 = floor(gy11) * (1.0 / 6.0);
	gx11 = fract(gx11) - 0.5;
	gy11 = fract(gy11) - 0.5;
	gz11 = fract(gz11) - 0.5;
	vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);
	vec4 sw11 = step(gw11, vec4(0.0));
	gx11 -= sw11 * (step(0.0, gx11) - 0.5);
	gy11 -= sw11 * (step(0.0, gy11) - 0.5);
	
	vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);
	vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);
	vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);
	vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);
	vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);
	vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);
	vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);
	vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);
	vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);
	vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);
	vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);
	vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);
	vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);
	vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);
	vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);
	vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);
	
	vec4 norm00 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100));
	g0000 *= norm00.x;
	g0100 *= norm00.y;
	g1000 *= norm00.z;
	g1100 *= norm00.w;
	
	vec4 norm01 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101));
	g0001 *= norm01.x;
	g0101 *= norm01.y;
	g1001 *= norm01.z;
	g1101 *= norm01.w;
	
	vec4 norm10 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110));
	g0010 *= norm10.x;
	g0110 *= norm10.y;
	g1010 *= norm10.z;
	g1110 *= norm10.w;
	
	vec4 norm11 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111));
	g0011 *= norm11.x;
	g0111 *= norm11.y;
	g1011 *= norm11.z;
	g1111 *= norm11.w;
	
	float n0000 = dot(g0000, Pf0);
	float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));
	float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));
	float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));
	float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));
	float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
	float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));
	float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));
	float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));
	float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));
	float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
	float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));
	float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));
	float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));
	float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));
	float n1111 = dot(g1111, Pf1);
	
	vec4 fade_xyzw = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);
	vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);
	vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);
	vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);
	float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);
	return 2.2 * n_xyzw;
}
float perlinNoise4DFBM(vec2 _uv_pn4fbm, int _oct_pn4fbm, vec2 _per_pn4fbm, float _lac_pn4fbm, float _persist_pn4fbm,
				float _rot_pn4fbm, float _ampl_pn4fbm, vec2 _shift_pn4fbm, float _time_pn4fbm, float _z_pn4fbm) {
	float _v = 0.0;
	float _a = _ampl_pn4fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_pn4fbm), sin(_rot_pn4fbm)), vec2(-sin(_rot_pn4fbm), cos(_rot_pn4fbm)));
	for (int i = 0; i < _oct_pn4fbm; ++i) {
		_v += _a * perlin4dNoiseFractalFunc(vec4(_uv_pn4fbm * _per_pn4fbm, _time_pn4fbm, _z_pn4fbm));
		_uv_pn4fbm = _r0t * _uv_pn4fbm * _lac_pn4fbm + _shift_pn4fbm;
		_a *= _persist_pn4fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:5
	float n_out5p0 = 6.000000;

// Vector:9
	vec3 n_out9p0 = vec3(2.000000, 2.000000, 0.000000);

// Scalar:6
	float n_out6p0 = 2.000000;

// Scalar:7
	float n_out7p0 = 0.800000;

// Scalar:8
	float n_out8p0 = 0.500000;

// Scalar:10
	float n_out10p0 = 0.600000;

// Vector:11
	vec3 n_out11p0 = vec3(0.500000, 0.500000, 0.000000);

// Scalar:12
	float n_out12p0 = 1.000000;

// Input:4
	float n_out4p0 = TIME;

// FractalPerlinNoise4D:2
	float n_out2p0;
	{
		n_out2p0 = perlinNoise4DFBM(n_out3p0.xy, int(n_out5p0), n_out9p0.xy, n_out6p0, n_out7p0, n_out8p0, n_out10p0, n_out11p0.xy, n_out4p0, n_out12p0);
	}

// Output:0
	COLOR.rgb = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -399, 115 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 460, 200 )
nodes/fragment/2/node = SubResource( 551 )
nodes/fragment/2/position = Vector2( 200, 200 )
nodes/fragment/3/node = SubResource( 552 )
nodes/fragment/3/position = Vector2( -20, 0 )
nodes/fragment/4/node = SubResource( 553 )
nodes/fragment/4/position = Vector2( -40, 580 )
nodes/fragment/5/node = SubResource( 554 )
nodes/fragment/5/position = Vector2( -60, 60 )
nodes/fragment/6/node = SubResource( 555 )
nodes/fragment/6/position = Vector2( -60, 200 )
nodes/fragment/7/node = SubResource( 556 )
nodes/fragment/7/position = Vector2( -60, 260 )
nodes/fragment/8/node = SubResource( 557 )
nodes/fragment/8/position = Vector2( -60, 320 )
nodes/fragment/9/node = SubResource( 558 )
nodes/fragment/9/position = Vector2( -200, 120 )
nodes/fragment/10/node = SubResource( 548 )
nodes/fragment/10/position = Vector2( -60, 380 )
nodes/fragment/11/node = SubResource( 549 )
nodes/fragment/11/position = Vector2( -200, 440 )
nodes/fragment/12/node = SubResource( 550 )
nodes/fragment/12/position = Vector2( -60, 520 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 0, 0, 4, 0, 2, 9, 5, 0, 2, 1, 9, 0, 2, 2, 6, 0, 2, 3, 7, 0, 2, 4, 8, 0, 2, 5, 10, 0, 2, 6, 11, 0, 2, 7, 12, 0, 2, 8 )

[sub_resource type="ShaderMaterial" id=560]
shader = SubResource( 559 )

[sub_resource type="VisualShaderNodeScalarConstant" id=561]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=562]
constant = 0.6

[sub_resource type="VisualShaderNodeScalarConstant" id=563]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id=564]
default_input_values = [ 1, 6, 2, Vector3( 2, 2, 0 ), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3( 0.5, 0.5, 0 ), 8, 0, 9, 0 ]
script = ExtResource( 87 )

[sub_resource type="VisualShaderNodeInput" id=565]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=566]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=567]
constant = 6.0

[sub_resource type="VisualShaderNodeVec3Constant" id=568]
constant = Vector3( 2, 2, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=569]
constant = 2.0

[sub_resource type="VisualShaderNodeScalarConstant" id=570]
constant = 0.8

[sub_resource type="VisualShaderNodeVec3Constant" id=571]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShader" id=572]
code = "shader_type canvas_item;


// FractalSimplexNoise4D

vec4 _permute_4_s4_n0ise_fractal(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float _permute_s4_n0ise_fractal(float x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
vec4 _grad4_s4_n0ise_fractal(float j, vec4 ip) {
	vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);
	vec4 p, s;
	p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;
	p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
	s = vec4(lessThan(p, vec4(0.0)));
	p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; 
	return p;
}
float simplex4dN0iseFractalFunc(vec4 v) {
	vec4 C = vec4( 0.138196601125011,
				0.276393202250021,
				0.414589803375032,
				-0.447213595499958);
	
	vec4 i  = floor(v + dot(v, vec4(0.309016994374947451)) );
	vec4 x0 = v -   i + dot(i, C.xxxx);
	
	vec4 i0;
	vec3 isX = step( x0.yzw, x0.xxx );
	vec3 isYZ = step( x0.zww, x0.yyz );
	i0.x = isX.x + isX.y + isX.z;
	i0.yzw = 1.0 - isX;
	i0.y += isYZ.x + isYZ.y;
	i0.zw += 1.0 - isYZ.xy;
	i0.z += isYZ.z;
	i0.w += 1.0 - isYZ.z;
	
	vec4 i3 = clamp( i0, 0.0, 1.0 );
	vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );
	vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );
	
	vec4 x1 = x0 - i1 + C.xxxx;
	vec4 x2 = x0 - i2 + C.yyyy;
	vec4 x3 = x0 - i3 + C.zzzz;
	vec4 x4 = x0 + C.wwww;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	float j0 = _permute_s4_n0ise_fractal( _permute_s4_n0ise_fractal( _permute_s4_n0ise_fractal( _permute_s4_n0ise_fractal(i.w) + i.z) + i.y) + i.x);
	vec4 j1 = _permute_4_s4_n0ise_fractal( _permute_4_s4_n0ise_fractal( _permute_4_s4_n0ise_fractal( _permute_4_s4_n0ise_fractal (
				i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))
				+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))
				+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))
				+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));
	
	vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;
	
	vec4 p0 = _grad4_s4_n0ise_fractal(j0,   ip);
	vec4 p1 = _grad4_s4_n0ise_fractal(j1.x, ip);
	vec4 p2 = _grad4_s4_n0ise_fractal(j1.y, ip);
	vec4 p3 = _grad4_s4_n0ise_fractal(j1.z, ip);
	vec4 p4 = _grad4_s4_n0ise_fractal(j1.w, ip);
	
	vec4 norm = 2.79284291400159 - 1.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	p4 *= 2.79284291400159 - 1.85373472095314 * dot(p4,p4);
	
	vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), vec3(0.0));
	vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)), vec2(0.0));
	m0 = m0 * m0;
	m1 = m1 * m1;
	return 33.0 *(dot(m0*m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)))
				+ dot(m1*m1, vec2(dot(p3, x3), dot(p4, x4))));
}
float simplexNoise4DFBM(vec2 _uv_sn4fbm, int _oct_sn4fbm, vec2 _per_sn4fbm, float _lac_sn4fbm, float _persist_sn4fbm,
				float _rot_sn4fbm, float _ampl_sn4fbm, vec2 _shift_sn4fbm, float _time_sn4fbm, float _z_sn4fbm) {
	float _v = 0.0;
	float _a = _ampl_sn4fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_sn4fbm), sin(_rot_sn4fbm)), vec2(-sin(_rot_sn4fbm), cos(_rot_sn4fbm)));
	for (int i = 0; i < _oct_sn4fbm; ++i) {
		_v += _a * simplex4dN0iseFractalFunc(vec4(_uv_sn4fbm * _per_sn4fbm, _time_sn4fbm, _z_sn4fbm));
		_uv_sn4fbm = _r0t * _uv_sn4fbm * _lac_sn4fbm + _shift_sn4fbm;
		_a *= _persist_sn4fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:5
	float n_out5p0 = 6.000000;

// Vector:6
	vec3 n_out6p0 = vec3(2.000000, 2.000000, 0.000000);

// Scalar:7
	float n_out7p0 = 2.000000;

// Scalar:8
	float n_out8p0 = 0.800000;

// Scalar:10
	float n_out10p0 = 0.500000;

// Scalar:11
	float n_out11p0 = 0.600000;

// Vector:9
	vec3 n_out9p0 = vec3(0.500000, 0.500000, 0.000000);

// Scalar:12
	float n_out12p0 = 1.000000;

// Input:4
	float n_out4p0 = TIME;

// FractalSimplexNoise4D:2
	float n_out2p0;
	{
		n_out2p0 = simplexNoise4DFBM(n_out3p0.xy, int(n_out5p0), n_out6p0.xy, n_out7p0, n_out8p0, n_out10p0, n_out11p0, n_out9p0.xy, n_out4p0, n_out12p0);
	}

// Output:0
	COLOR.rgb = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -543, 191 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 480, 200 )
nodes/fragment/2/node = SubResource( 564 )
nodes/fragment/2/position = Vector2( 200, 200 )
nodes/fragment/3/node = SubResource( 565 )
nodes/fragment/3/position = Vector2( 0, 0 )
nodes/fragment/4/node = SubResource( 566 )
nodes/fragment/4/position = Vector2( -20, 580 )
nodes/fragment/5/node = SubResource( 567 )
nodes/fragment/5/position = Vector2( -40, 60 )
nodes/fragment/6/node = SubResource( 568 )
nodes/fragment/6/position = Vector2( -180, 120 )
nodes/fragment/7/node = SubResource( 569 )
nodes/fragment/7/position = Vector2( -40, 200 )
nodes/fragment/8/node = SubResource( 570 )
nodes/fragment/8/position = Vector2( -40, 260 )
nodes/fragment/9/node = SubResource( 571 )
nodes/fragment/9/position = Vector2( -180, 440 )
nodes/fragment/10/node = SubResource( 561 )
nodes/fragment/10/position = Vector2( -40, 320 )
nodes/fragment/11/node = SubResource( 562 )
nodes/fragment/11/position = Vector2( -40, 380 )
nodes/fragment/12/node = SubResource( 563 )
nodes/fragment/12/position = Vector2( -40, 520 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 0, 0, 4, 0, 2, 9, 7, 0, 2, 3, 5, 0, 2, 1, 6, 0, 2, 2, 8, 0, 2, 4, 10, 0, 2, 5, 11, 0, 2, 6, 9, 0, 2, 7, 12, 0, 2, 8 )

[sub_resource type="ShaderMaterial" id=573]
shader = SubResource( 572 )

[sub_resource type="VisualShaderNodeCustom" id=574]
default_input_values = [ 2, Vector3( 64, 64, 0 ), 3, 10, 4, false, 5, false, 6, false ]
script = ExtResource( 88 )

[sub_resource type="VisualShaderNodeInput" id=575]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id=576]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id=577]
constant = Vector3( 68, 68, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=578]
constant = 10.0

[sub_resource type="VisualShaderNodeBooleanConstant" id=579]

[sub_resource type="VisualShaderNodeBooleanConstant" id=580]

[sub_resource type="VisualShaderNodeBooleanConstant" id=581]

[sub_resource type="VisualShader" id=582]
code = "shader_type canvas_item;


// NormalFromHeightmap

vec3 normalFromHeightmapFunc(vec2 _hm_uv, sampler2D _hm_tex, vec2 _hm_size, float _norm_hm_strgth, bool _conv_hm_gray, bool _inv_x_norm, bool _inv_y_norm){
	vec3 _hm_down = textureLod(_hm_tex, _hm_uv + vec2(0.0, 1.0 / _hm_size.y), 0.0).rgb;
	vec3 _hm_up = textureLod(_hm_tex, _hm_uv - vec2(0.0, 1.0 / _hm_size.y), 0.0).rgb;
	vec3 _hm_right = textureLod(_hm_tex, _hm_uv + vec2(1.0 / _hm_size.x, 0.0), 0.0).rgb;
	vec3 _hm_left = textureLod(_hm_tex, _hm_uv - vec2(1.0 / _hm_size.x, 0.0), 0.0).rgb;
	
	if (_conv_hm_gray) {
		_hm_down.r = 0.2126 * _hm_down.r + 0.7152 * _hm_down.g + 0.0722 * _hm_down.b;
		_hm_up.r = 0.2126 * _hm_up.r + 0.7152 * _hm_up.g + 0.0722 * _hm_up.b;
		_hm_right.r = 0.2126 * _hm_right.r + 0.7152 * _hm_right.g + 0.0722 * _hm_right.b;
		_hm_left.r = 0.2126 * _hm_left.r + 0.7152 * _hm_left.g + 0.0722 * _hm_left.b;
	}
	
	float dx = (1.0 - float(_inv_x_norm)) * (_hm_left.r - _hm_right.r) + 
				(float(_inv_x_norm)) * (-_hm_left.r + _hm_right.r);
	float dy = (1.0 - float(_inv_y_norm)) * (_hm_up.r - _hm_down.r) + 
				(float(_inv_y_norm)) * (-_hm_up.r + _hm_down.r);
	
	return normalize(vec3(dx, dy, 1.0 / _norm_hm_strgth));
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Vector:5
	vec3 n_out5p0 = vec3(68.000000, 68.000000, 0.000000);

// Scalar:6
	float n_out6p0 = 10.000000;

// Boolean:7
	bool n_out7p0 = false;

// Boolean:8
	bool n_out8p0 = false;

// Boolean:9
	bool n_out9p0 = false;

// NormalFromHeightmap:2
	vec3 n_out2p0;
	{
		n_out2p0 = normalFromHeightmapFunc(n_out4p0.xy, TEXTURE, n_out5p0.xy, n_out6p0, n_out7p0, n_out8p0, n_out9p0);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -549, 103 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 200 )
nodes/fragment/2/node = SubResource( 574 )
nodes/fragment/2/position = Vector2( 80, 200 )
nodes/fragment/3/node = SubResource( 575 )
nodes/fragment/3/position = Vector2( -120, 60 )
nodes/fragment/4/node = SubResource( 576 )
nodes/fragment/4/position = Vector2( -120, 120 )
nodes/fragment/5/node = SubResource( 577 )
nodes/fragment/5/position = Vector2( -300, 180 )
nodes/fragment/6/node = SubResource( 578 )
nodes/fragment/6/position = Vector2( -140, 260 )
nodes/fragment/7/node = SubResource( 579 )
nodes/fragment/7/position = Vector2( -120, 320 )
nodes/fragment/8/node = SubResource( 580 )
nodes/fragment/8/position = Vector2( -120, 380 )
nodes/fragment/9/node = SubResource( 581 )
nodes/fragment/9/position = Vector2( -120, 440 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 2, 2, 6, 0, 2, 3, 7, 0, 2, 4, 8, 0, 2, 5, 9, 0, 2, 6 )

[sub_resource type="ShaderMaterial" id=583]
shader = SubResource( 582 )

[sub_resource type="VisualShaderNodeCustom" id=584]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 1, 1, 0 ) ]
script = ExtResource( 89 )

[sub_resource type="VisualShaderNodeCustom" id=585]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 1, 1, 1 ) ]
script = ExtResource( 91 )

[sub_resource type="VisualShaderNodeCustom" id=586]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 1, 1, 0 ) ]
script = ExtResource( 92 )

[sub_resource type="VisualShaderNodeCustom" id=587]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 1, 1, 1 ) ]
script = ExtResource( 90 )

[sub_resource type="VisualShaderNodeInput" id=588]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShader" id=589]
code = "shader_type canvas_item;


// CartesianToSpherical

vec3 cartesianToSphericalFunc(vec3 _cartesian_vec3){
//	(x, y, z) -> (r, theta, phi)
	return vec3(length(_cartesian_vec3),
				atan(_cartesian_vec3.y / _cartesian_vec3.x),
				atan(length(_cartesian_vec3.xy)/ _cartesian_vec3.z));
}


void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// CartesianToSpherical:3
	vec3 n_out3p0;
	{
		n_out3p0 = cartesianToSphericalFunc(n_out6p0);
	}

// Output:0
	COLOR.rgb = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -480, -206 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 480, 20 )
nodes/fragment/2/node = SubResource( 584 )
nodes/fragment/2/position = Vector2( 0, -160 )
nodes/fragment/3/node = SubResource( 585 )
nodes/fragment/3/position = Vector2( 0, 20 )
nodes/fragment/4/node = SubResource( 586 )
nodes/fragment/4/position = Vector2( 240, -160 )
nodes/fragment/5/node = SubResource( 587 )
nodes/fragment/5/position = Vector2( 240, 120 )
nodes/fragment/6/node = SubResource( 588 )
nodes/fragment/6/position = Vector2( -260, 0 )
nodes/fragment/connections = PoolIntArray( 6, 0, 2, 0, 2, 0, 4, 0, 6, 0, 3, 0, 3, 0, 0, 0, 3, 0, 5, 0 )

[sub_resource type="ShaderMaterial" id=590]
shader = SubResource( 589 )

[sub_resource type="VisualShaderNodeCustom" id=591]
default_input_values = [ 1, Vector3( 8, 8, 0 ), 2, Vector3( 0.2, 0.2, 0 ), 3, Vector3( 0.01, 0.01, 0 ), 4, Vector3( 1, 1, 1 ), 5, 1.0, 6, Vector3( 0, 0, 0 ), 7, 0.0 ]
script = ExtResource( 93 )

[sub_resource type="VisualShaderNodeColorConstant" id=592]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=593]
constant = Color( 1, 1, 0, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=594]
constant = Vector3( 0.05, 0.05, 0 )

[sub_resource type="VisualShaderNodeInput" id=595]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id=596]
constant = Vector3( 0.2, 0.2, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=597]
constant = Vector3( 8, 8, 0 )

[sub_resource type="VisualShader" id=598]
code = "shader_type canvas_item;


// GridShape

vec4 gridFunc(vec2 _grid_uv, vec2 _gridline_thickness, vec2 _gridline_smooth, vec2 _gridcell_count, vec4 _grid_col, vec4 _grid_bg_col){
	vec2 _grid_vec = fract(_grid_uv * _gridcell_count);
	_grid_vec = min(_grid_vec, vec2(1.0) - _grid_vec);
	_grid_vec = smoothstep(_grid_vec - _gridline_smooth, _grid_vec + _gridline_smooth, _gridline_thickness / vec2(2.0));
	return mix(_grid_bg_col, _grid_col, clamp(_grid_vec.x + _grid_vec.y, 0.0, 1.0));
}


void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Vector:8
	vec3 n_out8p0 = vec3(8.000000, 8.000000, 0.000000);

// Vector:7
	vec3 n_out7p0 = vec3(0.200000, 0.200000, 0.000000);

// Vector:5
	vec3 n_out5p0 = vec3(0.050000, 0.050000, 0.000000);

// Color:3
	vec3 n_out3p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out3p1 = 1.000000;

// Color:4
	vec3 n_out4p0 = vec3(1.000000, 1.000000, 0.000000);
	float n_out4p1 = 0.000000;

// GridShape:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_out2p0n_out2p1 = gridFunc(n_out6p0.xy, n_out7p0.xy, n_out5p0.xy, n_out8p0.xy, vec4(n_out3p0, n_out3p1), vec4(n_out4p0, n_out4p1));
		n_out2p0 = n_out2p0n_out2p1.rgb;
		n_out2p1 = n_out2p0n_out2p1.a;
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -440, 64.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/2/node = SubResource( 591 )
nodes/fragment/2/position = Vector2( 100, 200 )
nodes/fragment/3/node = SubResource( 592 )
nodes/fragment/3/position = Vector2( -160, 400 )
nodes/fragment/4/node = SubResource( 593 )
nodes/fragment/4/position = Vector2( -160, 500 )
nodes/fragment/5/node = SubResource( 594 )
nodes/fragment/5/position = Vector2( -320, 300 )
nodes/fragment/6/node = SubResource( 595 )
nodes/fragment/6/position = Vector2( -180, 60 )
nodes/fragment/7/node = SubResource( 596 )
nodes/fragment/7/position = Vector2( -320, 220 )
nodes/fragment/8/node = SubResource( 597 )
nodes/fragment/8/position = Vector2( -320, 140 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 2, 1, 0, 1, 3, 0, 2, 4, 3, 1, 2, 5, 4, 0, 2, 6, 4, 1, 2, 7, 5, 0, 2, 3, 6, 0, 2, 0, 7, 0, 2, 2, 8, 0, 2, 1 )

[sub_resource type="ShaderMaterial" id=599]
shader = SubResource( 598 )

[sub_resource type="VisualShaderNodeCustom" id=600]
default_input_values = [ 2, -1.0, 3, 0.001, 4, false, 5, false ]
script = ExtResource( 94 )

[sub_resource type="VisualShaderNodeInput" id=601]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id=602]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=603]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=604]
constant = 0.005

[sub_resource type="VisualShaderNodeBooleanConstant" id=605]

[sub_resource type="VisualShaderNodeBooleanConstant" id=606]

[sub_resource type="VisualShader" id=607]
code = "shader_type canvas_item;


// SobelEdge

float sobelEngeFunc(sampler2D _tex_sobel, vec2 _uv_sobel, float _lod_sobel, float _ofst_sobel, bool _preconv_grayscale_sobel, bool _use_scharr){
	vec3 s00 = vec3(0.0);
	vec3 s01 = vec3(0.0);
	vec3 s02 = vec3(0.0);
	vec3 s10 = vec3(0.0);
	vec3 s12 = vec3(0.0);
	vec3 s20 = vec3(0.0);
	vec3 s21 = vec3(0.0);
	vec3 s22 = vec3(0.0);
	if (_lod_sobel < 0.0){
		s00 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0, -1.0)).rgb;
		s01 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 0.0, -1.0)).rgb;
		s02 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0, -1.0)).rgb;
		s10 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0,  0.0)).rgb;
		s12 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0,  0.0)).rgb;
		s20 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0,  1.0)).rgb;
		s21 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 0.0,  1.0)).rgb;
		s22 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0,  1.0)).rgb;
	}else{
		s00 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0, -1.0), _lod_sobel).rgb;
		s01 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 0.0, -1.0), _lod_sobel).rgb;
		s02 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0, -1.0), _lod_sobel).rgb;
		s10 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0,  0.0), _lod_sobel).rgb;
		s12 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0,  0.0), _lod_sobel).rgb;
		s20 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0,  1.0), _lod_sobel).rgb;
		s21 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 0.0,  1.0), _lod_sobel).rgb;
		s22 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0,  1.0), _lod_sobel).rgb;
	}
	if (_preconv_grayscale_sobel){
		s00.x = 0.2126 * s00.r + 0.7152 * s00.g + 0.0722 * s00.b;
		s01.x = 0.2126 * s01.r + 0.7152 * s01.g + 0.0722 * s01.b;
		s02.x = 0.2126 * s02.r + 0.7152 * s02.g + 0.0722 * s02.b;
		s10.x = 0.2126 * s10.r + 0.7152 * s10.g + 0.0722 * s10.b;
		s12.x = 0.2126 * s12.r + 0.7152 * s12.g + 0.0722 * s12.b;
		s20.x = 0.2126 * s20.r + 0.7152 * s20.g + 0.0722 * s20.b;
		s21.x = 0.2126 * s21.r + 0.7152 * s21.g + 0.0722 * s21.b;
		s22.x = 0.2126 * s22.r + 0.7152 * s22.g + 0.0722 * s22.b;
	}
	float edgeSqr = 0.0;
	if (!_use_scharr) {
		float sobelX = s00.x + 2.0 * s10.x + s20.x - s02.x - 2.0 * s12.x - s22.x;
		float sobelY = s00.x + 2.0 * s01.x + s02.x - s20.x - 2.0 * s21.x - s22.x;
		edgeSqr = (sobelX * sobelX + sobelY * sobelY);
	}else{
		float scharrX = 3.0 * s00.x + 10.0 * s10.x + 3.0 * s20.x - 3.0 * s02.x - 10.0 * s12.x - 3.0 * s22.x;
		float scharrY = 3.0 * s00.x + 10.0 * s01.x + 3.0 * s02.x - 3.0 * s20.x - 10.0 * s21.x - 3.0 * s22.x;
		edgeSqr = (scharrX * scharrX + scharrY * scharrY);
	}
	return edgeSqr;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Scalar:5
	float n_out5p0 = -1.000000;

// Scalar:6
	float n_out6p0 = 0.005000;

// Boolean:7
	bool n_out7p0 = false;

// Boolean:8
	bool n_out8p0 = false;

// SobelEdge:2
	float n_out2p0;
	{
		n_out2p0 = sobelEngeFunc(TEXTURE, n_out4p0.xy, n_out5p0, n_out6p0, n_out7p0, n_out8p0);
	}

// Output:0
	COLOR.a = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -245, 12 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/2/node = SubResource( 600 )
nodes/fragment/2/position = Vector2( 100, 200 )
nodes/fragment/3/node = SubResource( 601 )
nodes/fragment/3/position = Vector2( -100, 80 )
nodes/fragment/4/node = SubResource( 602 )
nodes/fragment/4/position = Vector2( -100, 140 )
nodes/fragment/5/node = SubResource( 603 )
nodes/fragment/5/position = Vector2( -120, 200 )
nodes/fragment/6/node = SubResource( 604 )
nodes/fragment/6/position = Vector2( -120, 260 )
nodes/fragment/7/node = SubResource( 605 )
nodes/fragment/7/position = Vector2( -100, 320 )
nodes/fragment/8/node = SubResource( 606 )
nodes/fragment/8/position = Vector2( -100, 380 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 1, 3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 2, 2, 6, 0, 2, 3, 7, 0, 2, 4, 8, 0, 2, 5 )

[sub_resource type="ShaderMaterial" id=608]
shader = SubResource( 607 )

[node name="root" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="container" type="GridContainer" parent="."]
margin_right = 1450.0
margin_bottom = 1080.0
custom_constants/vseparation = 2
custom_constants/hseparation = -11
columns = 11
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item1" type="VBoxContainer" parent="container"]
margin_right = 120.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item1"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Distortion UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item1"]
material = SubResource( 8 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item2" type="VBoxContainer" parent="container"]
margin_left = 109.0
margin_right = 229.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item2"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Flip UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item2"]
material = SubResource( 15 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item3" type="VBoxContainer" parent="container"]
margin_left = 218.0
margin_right = 338.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item3"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Lens Distortion"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item3"]
material = SubResource( 19 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item4" type="VBoxContainer" parent="container"]
margin_left = 327.0
margin_right = 447.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item4"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Pixelate UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item4"]
material = SubResource( 24 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item5" type="VBoxContainer" parent="container"]
margin_left = 436.0
margin_right = 556.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item5"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Rotate UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item5"]
material = SubResource( 29 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item6" type="VBoxContainer" parent="container"]
margin_left = 545.0
margin_right = 665.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item6"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Scale UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item6"]
material = SubResource( 34 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item7" type="VBoxContainer" parent="container"]
margin_left = 654.0
margin_right = 801.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item7"]
margin_top = 11.0
margin_right = 147.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Spherical UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item7"]
material = SubResource( 41 )
margin_top = 23.0
margin_right = 147.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item8" type="VBoxContainer" parent="container"]
margin_left = 790.0
margin_right = 910.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item8"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Tile UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item8"]
material = SubResource( 47 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item9" type="VBoxContainer" parent="container"]
margin_left = 899.0
margin_right = 1019.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item9"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Tiling & Offset UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item9"]
material = SubResource( 51 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item10" type="VBoxContainer" parent="container"]
margin_left = 1008.0
margin_right = 1128.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item10"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Transform UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item10"]
material = SubResource( 59 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item11" type="VBoxContainer" parent="container"]
margin_left = 1117.0
margin_right = 1237.0
margin_bottom = 95.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item11"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Twirl UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item11"]
material = SubResource( 64 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item12" type="VBoxContainer" parent="container"]
margin_top = 97.0
margin_right = 120.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item12"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Distortion UV
Animated"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item12"]
material = SubResource( 73 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item13" type="VBoxContainer" parent="container"]
margin_left = 109.0
margin_top = 97.0
margin_right = 229.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item13"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Doodle UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item13"]
material = SubResource( 81 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item14" type="VBoxContainer" parent="container"]
margin_left = 218.0
margin_top = 97.0
margin_right = 338.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item14"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Rotate UV
Animated"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item14"]
material = SubResource( 86 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item15" type="VBoxContainer" parent="container"]
margin_left = 327.0
margin_top = 97.0
margin_right = 447.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item15"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Swirl UV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item15"]
material = SubResource( 93 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item16" type="VBoxContainer" parent="container"]
margin_left = 436.0
margin_top = 97.0
margin_right = 556.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item16"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Tiling & Offset UV
Animated"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item16"]
material = SubResource( 98 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item17" type="VBoxContainer" parent="container"]
margin_left = 545.0
margin_top = 97.0
margin_right = 665.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item17"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Hash 1D
Random"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item17"]
material = SubResource( 101 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item18" type="VBoxContainer" parent="container"]
margin_left = 654.0
margin_top = 97.0
margin_right = 801.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item18"]
margin_top = 3.0
margin_right = 147.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Hash 2D
Random"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item18"]
material = SubResource( 104 )
margin_top = 32.0
margin_right = 147.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item19" type="VBoxContainer" parent="container"]
margin_left = 790.0
margin_top = 97.0
margin_right = 910.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item19"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Hash Random 
Vector 2D"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item19"]
material = SubResource( 107 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item20" type="VBoxContainer" parent="container"]
margin_left = 899.0
margin_top = 97.0
margin_right = 1019.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item20"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Random Float"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item20"]
material = SubResource( 110 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item22" type="VBoxContainer" parent="container"]
margin_left = 1008.0
margin_top = 97.0
margin_right = 1128.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item22"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Random Float
(Gold Noise)"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item22"]
material = SubResource( 119 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item23" type="VBoxContainer" parent="container"]
margin_left = 1117.0
margin_top = 97.0
margin_right = 1237.0
margin_bottom = 192.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item23"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Remap Vector"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item23"]
material = SubResource( 127 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item24" type="VBoxContainer" parent="container"]
margin_top = 194.0
margin_right = 120.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item24"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "SinTIME"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item24"]
material = SubResource( 132 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item25" type="VBoxContainer" parent="container"]
margin_left = 109.0
margin_top = 194.0
margin_right = 229.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item25"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Vector2 Compose"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item25"]
material = SubResource( 137 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item26" type="VBoxContainer" parent="container"]
margin_left = 218.0
margin_top = 194.0
margin_right = 338.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item26"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Basic Blur"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item26"]
material = SubResource( 144 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item27" type="VBoxContainer" parent="container"]
margin_left = 327.0
margin_top = 194.0
margin_right = 447.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item27"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Blur Custom"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item27"]
material = SubResource( 150 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item28" type="VBoxContainer" parent="container"]
margin_left = 436.0
margin_top = 194.0
margin_right = 556.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item28"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Zoom Blur"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item28"]
material = SubResource( 158 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item29" type="VBoxContainer" parent="container"]
margin_left = 545.0
margin_top = 194.0
margin_right = 665.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item29"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Glow Empty"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item29"]
material = SubResource( 166 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item30" type="VBoxContainer" parent="container"]
margin_left = 654.0
margin_top = 194.0
margin_right = 801.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item30"]
margin_top = 11.0
margin_right = 147.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Inner Glow"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item30"]
material = SubResource( 172 )
margin_top = 23.0
margin_right = 147.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item31" type="VBoxContainer" parent="container"]
margin_left = 790.0
margin_top = 194.0
margin_right = 910.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item31"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Inner Glow
Empty"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item31"]
material = SubResource( 181 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item32" type="VBoxContainer" parent="container"]
margin_left = 899.0
margin_top = 194.0
margin_right = 1019.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item32"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Outer Glow"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item32"]
material = SubResource( 188 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item33" type="VBoxContainer" parent="container"]
margin_left = 1008.0
margin_top = 194.0
margin_right = 1128.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item33"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Outer Glow
Empty"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item33"]
material = SubResource( 195 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item34" type="VBoxContainer" parent="container"]
margin_left = 1117.0
margin_top = 194.0
margin_right = 1237.0
margin_bottom = 289.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item34"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Chekerboard
Shape"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item34"]
material = SubResource( 200 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item35" type="VBoxContainer" parent="container"]
margin_top = 291.0
margin_right = 120.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item35"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Circle Shape"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item35"]
material = SubResource( 209 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item36" type="VBoxContainer" parent="container"]
margin_left = 109.0
margin_top = 291.0
margin_right = 229.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item36"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Circle Shape 2"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item36"]
material = SubResource( 218 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item38" type="VBoxContainer" parent="container"]
margin_left = 218.0
margin_top = 291.0
margin_right = 338.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item38"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Regular Ngon
Shape"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item38"]
material = SubResource( 233 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item39" type="VBoxContainer" parent="container"]
margin_left = 327.0
margin_top = 291.0
margin_right = 447.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item39"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Spiral Shape"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item39"]
material = SubResource( 243 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item40" type="VBoxContainer" parent="container"]
margin_left = 436.0
margin_top = 291.0
margin_right = 556.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item40"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Scanlines
Sharp Shape"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item40"]
material = SubResource( 252 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item41" type="VBoxContainer" parent="container"]
margin_left = 545.0
margin_top = 291.0
margin_right = 665.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item41"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Random
Stripes Shape"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item41"]
material = SubResource( 258 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item42" type="VBoxContainer" parent="container"]
margin_left = 654.0
margin_top = 291.0
margin_right = 801.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item42"]
margin_top = 3.0
margin_right = 147.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Generic 2D
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item42"]
material = SubResource( 263 )
margin_top = 32.0
margin_right = 147.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item43" type="VBoxContainer" parent="container"]
margin_left = 790.0
margin_top = 291.0
margin_right = 910.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item43"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Perlin 2D
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item43"]
material = SubResource( 269 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item44" type="VBoxContainer" parent="container"]
margin_left = 899.0
margin_top = 291.0
margin_right = 1019.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item44"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Perlin 3D
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item44"]
material = SubResource( 275 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item45" type="VBoxContainer" parent="container"]
margin_left = 1008.0
margin_top = 291.0
margin_right = 1128.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item45"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Perlin 3D
Periodic Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item45"]
material = SubResource( 281 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item46" type="VBoxContainer" parent="container"]
margin_left = 1117.0
margin_top = 291.0
margin_right = 1237.0
margin_bottom = 386.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item46"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Perlin 4D
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item46"]
material = SubResource( 287 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item47" type="VBoxContainer" parent="container"]
margin_top = 388.0
margin_right = 120.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item47"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Simplex 2D
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item47"]
material = SubResource( 293 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item48" type="VBoxContainer" parent="container"]
margin_left = 109.0
margin_top = 388.0
margin_right = 229.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item48"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Simplex 3D
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item48"]
material = SubResource( 299 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item49" type="VBoxContainer" parent="container"]
margin_left = 218.0
margin_top = 388.0
margin_right = 338.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item49"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Simplex 4D
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item49"]
material = SubResource( 305 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item50" type="VBoxContainer" parent="container"]
margin_left = 327.0
margin_top = 388.0
margin_right = 447.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item50"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Worley 2D
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item50"]
material = SubResource( 311 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item51" type="VBoxContainer" parent="container"]
margin_left = 436.0
margin_top = 388.0
margin_right = 556.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item51"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Worley 2x2
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item51"]
material = SubResource( 317 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item52" type="VBoxContainer" parent="container"]
margin_left = 545.0
margin_top = 388.0
margin_right = 665.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item52"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Worley 2x2x2
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item52"]
material = SubResource( 324 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item53" type="VBoxContainer" parent="container"]
margin_left = 654.0
margin_top = 388.0
margin_right = 801.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item53"]
margin_top = 3.0
margin_right = 147.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Worley 3D
Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item53"]
material = SubResource( 330 )
margin_top = 32.0
margin_right = 147.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item54" type="VBoxContainer" parent="container"]
margin_left = 790.0
margin_top = 388.0
margin_right = 910.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item54"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "BCS Adjustment"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item54"]
material = SubResource( 337 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item55" type="VBoxContainer" parent="container"]
margin_left = 899.0
margin_top = 388.0
margin_right = 1019.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item55"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Black & White"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item55"]
material = SubResource( 341 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item56" type="VBoxContainer" parent="container"]
margin_left = 1008.0
margin_top = 388.0
margin_right = 1128.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item56"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Blend A with B"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item56"]
material = SubResource( 346 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item57" type="VBoxContainer" parent="container"]
margin_left = 1117.0
margin_top = 388.0
margin_right = 1237.0
margin_bottom = 483.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item57"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Bloom"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item57"]
material = SubResource( 350 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item58" type="VBoxContainer" parent="container"]
margin_top = 485.0
margin_right = 120.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item58"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Chromatic
Aberration"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item58"]
material = SubResource( 358 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item59" type="VBoxContainer" parent="container"]
margin_left = 109.0
margin_top = 485.0
margin_right = 229.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item59"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Clamp Alpha
Border"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item59"]
material = SubResource( 367 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item60" type="VBoxContainer" parent="container"]
margin_left = 218.0
margin_top = 485.0
margin_right = 338.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item60"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Color Correction
Adjustment"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item60"]
material = SubResource( 372 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item61" type="VBoxContainer" parent="container"]
margin_left = 327.0
margin_top = 485.0
margin_right = 447.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item61"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Emboss"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item61"]
material = SubResource( 379 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item62" type="VBoxContainer" parent="container"]
margin_left = 436.0
margin_top = 485.0
margin_right = 556.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item62"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "FireFX"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item62"]
material = SubResource( 393 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item63" type="VBoxContainer" parent="container"]
margin_left = 545.0
margin_top = 485.0
margin_right = 665.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item63"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Gradient
4-Corners"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item63"]
material = SubResource( 400 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item64" type="VBoxContainer" parent="container"]
margin_left = 654.0
margin_top = 485.0
margin_right = 801.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item64"]
margin_top = 3.0
margin_right = 147.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Gradient Mapping
(+ColorCycling Support)"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item64"]
material = SubResource( 410 )
margin_top = 32.0
margin_right = 147.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item65" type="VBoxContainer" parent="container"]
margin_left = 790.0
margin_top = 485.0
margin_right = 910.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item65"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Grayscale+"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item65"]
material = SubResource( 415 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item66" type="VBoxContainer" parent="container"]
margin_left = 899.0
margin_top = 485.0
margin_right = 1019.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item66"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Hue"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item66"]
material = SubResource( 418 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item67" type="VBoxContainer" parent="container"]
margin_left = 1008.0
margin_top = 485.0
margin_right = 1128.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item67"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Inverse Color"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item67"]
material = SubResource( 422 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item68" type="VBoxContainer" parent="container"]
margin_left = 1117.0
margin_top = 485.0
margin_right = 1237.0
margin_bottom = 580.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item68"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Mask Alpha"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item68"]
material = SubResource( 426 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item69" type="VBoxContainer" parent="container"]
margin_top = 582.0
margin_right = 120.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item69"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Posterize"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item69"]
material = SubResource( 430 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item70" type="VBoxContainer" parent="container"]
margin_left = 109.0
margin_top = 582.0
margin_right = 229.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item70"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Shift HSV"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item70"]
material = SubResource( 436 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item71" type="VBoxContainer" parent="container"]
margin_left = 218.0
margin_top = 582.0
margin_right = 338.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item71"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Shine FX"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item71"]
material = SubResource( 447 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item72" type="VBoxContainer" parent="container"]
margin_left = 327.0
margin_top = 582.0
margin_right = 447.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item72"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Tint RGBA"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item72"]
material = SubResource( 451 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item73" type="VBoxContainer" parent="container"]
margin_left = 436.0
margin_top = 582.0
margin_right = 556.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item73"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "Tonemap"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item73"]
material = SubResource( 456 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item74" type="VBoxContainer" parent="container"]
margin_left = 545.0
margin_top = 582.0
margin_right = 665.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item74"]
margin_top = 11.0
margin_right = 120.0
margin_bottom = 25.0
rect_min_size = Vector2( 70, 0 )
text = "CGA4 Pallete"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item74"]
material = SubResource( 460 )
margin_top = 23.0
margin_right = 120.0
margin_bottom = 83.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item75" type="VBoxContainer" parent="container"]
margin_left = 654.0
margin_top = 582.0
margin_right = 801.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item75"]
margin_top = 3.0
margin_right = 147.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "GameBoy
Pallete"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item75"]
material = SubResource( 464 )
margin_top = 32.0
margin_right = 147.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item76" type="VBoxContainer" parent="container"]
margin_left = 790.0
margin_top = 582.0
margin_right = 910.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item76"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Fractal
Generic2D Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item76"]
material = SubResource( 475 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item77" type="VBoxContainer" parent="container"]
margin_left = 899.0
margin_top = 582.0
margin_right = 1019.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item77"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Fractal
Perlin2D Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item77"]
material = SubResource( 485 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item78" type="VBoxContainer" parent="container"]
margin_left = 1008.0
margin_top = 582.0
margin_right = 1128.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item78"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Fractal
Worley2D Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item78"]
material = SubResource( 498 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item79" type="VBoxContainer" parent="container"]
margin_left = 1117.0
margin_top = 582.0
margin_right = 1237.0
margin_bottom = 677.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item79"]
margin_top = 3.0
margin_right = 120.0
margin_bottom = 34.0
rect_min_size = Vector2( 70, 0 )
text = "Fractal
Simplex2D Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item79"]
material = SubResource( 509 )
margin_top = 32.0
margin_right = 120.0
margin_bottom = 92.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item80" type="VBoxContainer" parent="container"]
margin_top = 679.0
margin_right = 120.0
margin_bottom = 785.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item80"]
margin_top = 8.0
margin_right = 120.0
margin_bottom = 39.0
rect_min_size = Vector2( 70, 0 )
text = "Fractal
Worley3D Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item80"]
material = SubResource( 523 )
margin_top = 37.0
margin_right = 120.0
margin_bottom = 97.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item81" type="VBoxContainer" parent="container"]
margin_left = 109.0
margin_top = 679.0
margin_right = 229.0
margin_bottom = 785.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item81"]
margin_top = 8.0
margin_right = 120.0
margin_bottom = 39.0
rect_min_size = Vector2( 70, 0 )
text = "Fractal
Perlin3D Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item81"]
material = SubResource( 535 )
margin_top = 37.0
margin_right = 120.0
margin_bottom = 97.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item82" type="VBoxContainer" parent="container"]
margin_left = 218.0
margin_top = 679.0
margin_right = 338.0
margin_bottom = 785.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item82"]
margin_top = 8.0
margin_right = 120.0
margin_bottom = 39.0
rect_min_size = Vector2( 70, 0 )
text = "Fractal
Simplex3D Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item82"]
material = SubResource( 547 )
margin_top = 37.0
margin_right = 120.0
margin_bottom = 97.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item83" type="VBoxContainer" parent="container"]
margin_left = 327.0
margin_top = 679.0
margin_right = 447.0
margin_bottom = 785.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item83"]
margin_top = 8.0
margin_right = 120.0
margin_bottom = 39.0
rect_min_size = Vector2( 70, 0 )
text = "Fractal
Perlin4D Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item83"]
material = SubResource( 560 )
margin_top = 37.0
margin_right = 120.0
margin_bottom = 97.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item84" type="VBoxContainer" parent="container"]
margin_left = 436.0
margin_top = 679.0
margin_right = 556.0
margin_bottom = 785.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item84"]
margin_top = 8.0
margin_right = 120.0
margin_bottom = 39.0
rect_min_size = Vector2( 70, 0 )
text = "Fractal
Simplex4D Noise"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item84"]
material = SubResource( 573 )
margin_top = 37.0
margin_right = 120.0
margin_bottom = 97.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item85" type="VBoxContainer" parent="container"]
margin_left = 545.0
margin_top = 679.0
margin_right = 665.0
margin_bottom = 785.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item85"]
margin_top = 8.0
margin_right = 120.0
margin_bottom = 39.0
rect_min_size = Vector2( 70, 0 )
text = "Normal From
Heightmap"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item85"]
material = SubResource( 583 )
margin_top = 37.0
margin_right = 120.0
margin_bottom = 97.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item86" type="VBoxContainer" parent="container"]
margin_left = 654.0
margin_top = 679.0
margin_right = 801.0
margin_bottom = 785.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item86"]
margin_right = 147.0
margin_bottom = 48.0
rect_min_size = Vector2( 70, 0 )
text = "Cartesian Coords To
Polar/Spherical
and back to Cartesian"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item86"]
material = SubResource( 590 )
margin_top = 46.0
margin_right = 147.0
margin_bottom = 106.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item87" type="VBoxContainer" parent="container"]
margin_left = 790.0
margin_top = 679.0
margin_right = 910.0
margin_bottom = 785.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item87"]
margin_top = 17.0
margin_right = 120.0
margin_bottom = 31.0
rect_min_size = Vector2( 70, 0 )
text = "Grid Shape"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item87"]
material = SubResource( 599 )
margin_top = 29.0
margin_right = 120.0
margin_bottom = 89.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="item88" type="VBoxContainer" parent="container"]
margin_left = 899.0
margin_top = 679.0
margin_right = 1019.0
margin_bottom = 785.0
rect_min_size = Vector2( 120, 95 )
custom_constants/separation = -2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="title" type="Label" parent="container/item88"]
margin_top = 17.0
margin_right = 120.0
margin_bottom = 31.0
rect_min_size = Vector2( 70, 0 )
text = "Sobel Edge"
align = 1
__meta__ = {
"_editor_description_": ""
}

[node name="preview" type="TextureRect" parent="container/item88"]
material = SubResource( 608 )
margin_top = 29.0
margin_right = 120.0
margin_bottom = 89.0
rect_min_size = Vector2( 70, 60 )
size_flags_horizontal = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}
