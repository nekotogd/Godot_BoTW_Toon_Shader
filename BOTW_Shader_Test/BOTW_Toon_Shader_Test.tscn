[gd_scene load_steps=127 format=2]

[ext_resource path="res://BOTW_Shader_Test/source/linkPosed001.fbx" type="PackedScene" id=1]
[ext_resource path="res://BOTW_Shader_Test/BOTW_Toon_VisualShader.tres" type="Shader" id=2]
[ext_resource path="res://BOTW_Shader_Test/textures/linkHair_diff.png" type="Texture" id=3]
[ext_resource path="res://BOTW_Shader_Test/textures/eyesLink_diff.png" type="Texture" id=4]
[ext_resource path="res://BOTW_Shader_Test/BOTW_Toon_Shader.material" type="Material" id=5]
[ext_resource path="res://BOTW_Shader_Test/textures/linkArm_diff.png" type="Texture" id=6]
[ext_resource path="res://BOTW_Shader_Test/CameraRoot.gd" type="Script" id=8]
[ext_resource path="res://1-21. Talus Battle.ogg" type="AudioStream" id=9]
[ext_resource path="res://BOTW_Shader_Test/textures/setCave_diff.png" type="Texture" id=10]
[ext_resource path="res://BOTW_Shader_Test/textures/melee_diff.png" type="Texture" id=11]
[ext_resource path="res://BOTW_Shader_Test/Link_Reference1.png" type="Texture" id=12]
[ext_resource path="res://BOTW_Shader_Test/Link_Reference2.jpg" type="Texture" id=13]
[ext_resource path="res://BOTW_Shader_Test/godot_botw_grass-main/Scene.tscn" type="PackedScene" id=14]
[ext_resource path="res://BOTW_Shader_Test/godot_botw_grass-main/sha_grass.shader" type="Shader" id=15]
[ext_resource path="res://BOTW_Shader_Test/BOTW_Toon_Shader_Test.gd" type="Script" id=17]
[ext_resource path="res://addons/shaderV/rgba/posterize.gd" type="Script" id=18]
[ext_resource path="res://BOTW_Shader_Test/BOTW_Toon2_Shader.material" type="Material" id=19]
[ext_resource path="res://Calamity-Bold.otf" type="DynamicFontData" id=20]
[ext_resource path="res://BOTW_Shader_Test/textures/link_diff.png" type="Texture" id=21]
[ext_resource path="res://BOTW_Shader_Test/BOTW_Toon2.shader" type="Shader" id=22]

[sub_resource type="Animation" id=1]
resource_name = "flicker"
length = 0.6
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:omni_attenuation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.307787, 0.133972, 0.574351, 0.129408 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:omni_range")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.311542 ]
}

[sub_resource type="Animation" id=2]
resource_name = "move"
length = 3.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0.313903, 1.37535, 0.194402 ), Vector3( -0.618606, 1.37535, 0.194402 ), Vector3( -0.032769, 1.17261, -0.396425 ) ]
}

[sub_resource type="Shader" id=5]
code = "shader_type spatial;
render_mode diffuse_toon, specular_toon, unshaded;

uniform vec4 tint : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform sampler2D main_texture;
uniform vec4 light_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float shadow_size = 5.117;
uniform float shadow_blend = 1.972;
uniform vec3 light_direction = vec3(-12.59, -1.8, 19.57);
uniform sampler2D normal_map;
uniform vec4 shadow_color : hint_color = vec4(0.64, 0.64, 0.64, 1.0);
uniform vec4 rimlight_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float rimlight_blend = 0.577;
uniform float rimlight_size = 0.05;
uniform float metallic = 0.0;
uniform float roughness = 0.0;


// ReadNormalMap

// Pulled straight from Godot's scene.glsl file
vec3 read_normalmap(in vec3 normalmap, in vec3 normal, in vec3 tangent, in vec3 binormal, in float normaldepth) {
	normalmap.xy = normalmap.xy * 2.0 - 1.0;
	normalmap.z = sqrt(max(0.0, 1.0 - dot(normalmap.xy, normalmap.xy))); //always ignore Z, as it can be RG packed, Z may be pos/neg, etc.
	
	return normalize(mix(normal, tangent * normalmap.x + binormal * normalmap.y + normal * normalmap.z, normaldepth));
}
// GlobalExpression:0
	varying vec3 normal;

void vertex() {
// Output:0
normal = NORMAL;
}

void fragment() {
// ColorUniform:8
	vec3 n_out8p0 = tint.rgb;
	float n_out8p1 = tint.a;

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 main_texture_tex_read = texture(main_texture, n_out4p0.xy);
		n_out3p0 = main_texture_tex_read.rgb;
		n_out3p1 = main_texture_tex_read.a;
	}

// VectorOp:7
	vec3 n_out7p0 = n_out8p0 * n_out3p0;

// ColorUniform:11
	vec3 n_out11p0 = light_color.rgb;
	float n_out11p1 = light_color.a;

// ScalarUniform:15
	float n_out15p0 = shadow_size;

// ScalarUniform:16
	float n_out16p0 = shadow_blend;

// ScalarOp:38
	float n_out38p0 = n_out15p0 + n_out16p0;

// VectorUniform:10
	vec3 n_out10p0 = light_direction;

// Texture:46
	vec3 n_out46p0;
	float n_out46p1;
	{
		vec4 normal_map_tex_read = texture(normal_map, UV.xy);
		n_out46p0 = normal_map_tex_read.rgb;
		n_out46p1 = normal_map_tex_read.a;
	}

// ReadNormalMap:37
	vec3 n_out37p0;
	{
		n_out37p0 = read_normalmap(n_out46p0, normal, TANGENT, BINORMAL, NORMALMAP_DEPTH);
	}

// VectorFunc:47
	vec3 n_out47p0 = round(n_out37p0);

// DotProduct:13
	float n_out13p0 = dot(n_out10p0, n_out47p0);

// ScalarSmoothStep:14
	float n_out14p0 = smoothstep(n_out15p0, n_out38p0, n_out13p0);

// VectorOp:18
	vec3 n_out18p0 = n_out11p0 * vec3(n_out14p0);

// ScalarFunc:17
	float n_out17p0 = 1.0 - n_out14p0;

// Scalar:22
	float n_out22p0 = 1.400000;

// ColorUniform:39
	vec3 n_out39p0 = shadow_color.rgb;
	float n_out39p1 = shadow_color.a;

// VectorOp:24
	vec3 n_out24p0 = vec3(n_out22p0) * n_out39p0;

// VectorOp:25
	vec3 n_out25p0 = vec3(n_out17p0) * n_out24p0;

// VectorOp:23
	vec3 n_out23p0 = n_out18p0 + n_out25p0;

// ColorUniform:33
	vec3 n_out33p0 = rimlight_color.rgb;
	float n_out33p1 = rimlight_color.a;

// ScalarUniform:31
	float n_out31p0 = rimlight_blend;

// ScalarUniform:30
	float n_out30p0 = rimlight_size;

// ScalarOp:29
	float n_out29p0 = n_out30p0 + n_out31p0;

// Fresnel:27
	float n_in27p3 = 1.00000;
	float n_out27p0 = pow(1.0 - clamp(dot(normal, VIEW), 0.0, 1.0), n_in27p3);

// ScalarSmoothStep:28
	float n_out28p0 = smoothstep(n_out31p0, n_out29p0, n_out27p0);

// VectorOp:32
	vec3 n_out32p0 = n_out33p0 * vec3(n_out28p0);

// VectorOp:26
	vec3 n_out26p0 = n_out23p0 + n_out32p0;

// VectorOp:9
	vec3 n_out9p0 = n_out7p0 * n_out26p0;

// Texture:44
	vec3 n_out44p0;
	float n_out44p1;
	{
		vec4 main_texture_tex_read = texture(main_texture, UV.xy);
		n_out44p0 = main_texture_tex_read.rgb;
		n_out44p1 = main_texture_tex_read.a;
	}

// VectorOp:42
	vec3 n_out42p0 = n_out9p0 * n_out44p0;

// ScalarUniform:48
	float n_out48p0 = metallic;

// ScalarUniform:49
	float n_out49p0 = roughness;

// Output:0
	ALBEDO = n_out42p0;
	METALLIC = n_out48p0;
	ROUGHNESS = n_out49p0;

}

void light() {
// Output:0

}
"

[sub_resource type="OpenSimplexNoise" id=6]

[sub_resource type="NoiseTexture" id=7]
width = 1024
height = 1024
seamless = true
as_normalmap = true
bump_strength = 6.2
noise = SubResource( 6 )

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 5 )
shader_param/tint = Color( 1, 1, 1, 1 )
shader_param/light_color = Color( 1, 1, 1, 1 )
shader_param/shadow_size = 5.117
shader_param/shadow_blend = 1.972
shader_param/light_direction = Vector3( -12.59, -1.8, 19.57 )
shader_param/shadow_color = Color( 0.64, 0.64, 0.64, 1 )
shader_param/rimlight_color = Color( 1, 1, 1, 1 )
shader_param/rimlight_blend = 0.577
shader_param/rimlight_size = 0.05
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/main_texture = ExtResource( 10 )
shader_param/normal_map = SubResource( 7 )

[sub_resource type="Shader" id=9]
code = "// BoTW Toon Shader by NekotoArts
// wrote this at 2AM
//
//
//
// England is my city
// Smoke trees
// Two to the One from the One to the Three
shader_type spatial;
render_mode diffuse_toon, specular_toon;

uniform vec4 tint : hint_color;
uniform sampler2D albedo_texture : hint_albedo;
uniform float metallic : hint_range(0.0, 1.0) = 0.0;
uniform sampler2D normal_map : hint_albedo;
uniform float shadow_size = 0.045;
uniform float shadow_blend = 0.001;
uniform float shadow_extra_intensity = 0.0;
uniform vec4 shadow_color : hint_color;
uniform vec4 light_tint : hint_color;
uniform float rimlight_size = 0.921;
uniform float rimlight_blend = 0.01;
uniform vec4 rimlight_color : hint_color;
uniform bool use_normalmap = true;
uniform bool animated = true;
uniform float time_scale = 0.02;
uniform vec3 normal_bias = vec3(0.0);
uniform vec3 light_bias = vec3(0.0);
uniform bool use_view = true;
uniform vec4 view_bias : hint_color = vec4(1.0, 0.0, 1.0, 1.0);
uniform float view_multiplier : hint_range(-1.0, 1.0) = -1.0;

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}

varying vec3 vertex_normal;
varying vec3 vertex_tangent;

void vertex(){
	vertex_normal = NORMAL;
	vertex_normal = TANGENT;
}

void fragment(){
	ALBEDO = texture(albedo_texture, UV).rgb * tint.rgb;
	METALLIC = metallic;
}

void light(){
	vec3 normal;
	if (use_normalmap){
		vec3 normal_from_texture;
		if (animated){
			normal_from_texture = texture(normal_map, UV + TIME * time_scale).rgb;
		}else{
			normal_from_texture = texture(normal_map, UV).rgb;
		}
		normal = vec3(normal_from_texture.x * NORMAL.x,
		normal_from_texture.y * NORMAL.y, normal_from_texture.z);
		
		normal = NORMAL - normal_from_texture;
	}else{
		normal = NORMAL;
	}
	
	if (use_view){
		normal -= VIEW * view_bias.rgb * view_multiplier;
	}
	
	float NdotL = dot(normal + normal_bias, LIGHT + light_bias);
	
	float rounded = smoothstep(shadow_size, shadow_blend + shadow_size, NdotL);
	float one_minus = 1.0 - rounded;
	vec3 mult1 = LIGHT_COLOR * rounded * light_tint.rgb * ATTENUATION;
	vec3 mult2 = (one_minus * 1.4 * shadow_color.rgb) - shadow_extra_intensity;
	vec3 add1 = mult1 + mult2;
	
	float add3  = rimlight_blend + rimlight_size;
	float basic_fresnel = fresnel(1.0, NORMAL, VIEW);
	float smoothed = smoothstep(rimlight_size, add3, basic_fresnel);
	
	vec3 add2 = add1 + smoothed * rimlight_color.rgb;
	DIFFUSE_LIGHT += ALBEDO * add2;
}
"

[sub_resource type="OpenSimplexNoise" id=10]
octaves = 6

[sub_resource type="NoiseTexture" id=11]
seamless = true
as_normalmap = true
bump_strength = 3.7
noise = SubResource( 10 )

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 9 )
shader_param/tint = Color( 1, 1, 1, 1 )
shader_param/metallic = 0.0
shader_param/shadow_size = 0.045
shader_param/shadow_blend = 0.001
shader_param/shadow_extra_intensity = 0.0
shader_param/shadow_color = Color( 0, 0, 0, 1 )
shader_param/light_tint = Color( 0.505882, 0.505882, 0.505882, 1 )
shader_param/rimlight_size = 0.647
shader_param/rimlight_blend = 0.0
shader_param/rimlight_color = Color( 1, 1, 1, 1 )
shader_param/use_normalmap = true
shader_param/animated = true
shader_param/time_scale = 0.02
shader_param/normal_bias = Vector3( 0, 0, 0 )
shader_param/light_bias = Vector3( 0, 0, 0 )
shader_param/use_view = true
shader_param/view_bias = Color( 1, 0, 1, 1 )
shader_param/view_multiplier = -1.0
shader_param/albedo_texture = ExtResource( 6 )
shader_param/normal_map = SubResource( 11 )

[sub_resource type="OpenSimplexNoise" id=13]
octaves = 6

[sub_resource type="NoiseTexture" id=14]
seamless = true
as_normalmap = true
bump_strength = 3.7
noise = SubResource( 13 )

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 9 )
shader_param/tint = Color( 1, 1, 1, 1 )
shader_param/metallic = 0.0
shader_param/shadow_size = 0.045
shader_param/shadow_blend = 0.001
shader_param/shadow_extra_intensity = 0.0
shader_param/shadow_color = Color( 0, 0, 0, 1 )
shader_param/light_tint = Color( 1, 1, 1, 1 )
shader_param/rimlight_size = 0.921
shader_param/rimlight_blend = 0.0
shader_param/rimlight_color = Color( 1, 1, 1, 1 )
shader_param/use_normalmap = true
shader_param/animated = true
shader_param/time_scale = 0.02
shader_param/normal_bias = Vector3( 0, 0, 0 )
shader_param/light_bias = Vector3( 0, 0, 0 )
shader_param/use_view = true
shader_param/view_bias = Color( 1, 0, 1, 1 )
shader_param/view_multiplier = -1.0
shader_param/albedo_texture = ExtResource( 21 )
shader_param/normal_map = SubResource( 14 )

[sub_resource type="ShaderMaterial" id=16]
shader = ExtResource( 2 )
shader_param/tint = Color( 0.486275, 0.486275, 0.486275, 1 )
shader_param/light_color = Color( 0.776471, 0.776471, 0.776471, 1 )
shader_param/shadow_size = 3.785
shader_param/shadow_blend = 1.972
shader_param/light_direction = Vector3( -11.502, -1.8, 19.57 )
shader_param/shadow_color = Color( 1, 1, 1, 1 )
shader_param/rimlight_color = Color( 1, 1, 1, 1 )
shader_param/rimlight_blend = 1.619
shader_param/rimlight_size = 0.05
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/main_texture = ExtResource( 4 )

[sub_resource type="OpenSimplexNoise" id=17]
octaves = 6

[sub_resource type="NoiseTexture" id=18]
seamless = true
as_normalmap = true
bump_strength = 3.7
noise = SubResource( 17 )

[sub_resource type="ShaderMaterial" id=19]
shader = ExtResource( 22 )
shader_param/tint = Color( 0.615686, 0.615686, 0.615686, 1 )
shader_param/metallic = 0.0
shader_param/shadow_size = 0.045
shader_param/shadow_blend = 0.001
shader_param/shadow_extra_intensity = 0.0
shader_param/shadow_color = Color( 1, 1, 1, 1 )
shader_param/light_tint = Color( 1, 1, 1, 1 )
shader_param/rimlight_size = 0.68
shader_param/rimlight_blend = 0.0
shader_param/rimlight_color = Color( 2, 2, 2, 1 )
shader_param/use_normalmap = true
shader_param/animated = false
shader_param/time_scale = 0.02
shader_param/normal_bias = Vector3( 0, 0, 0 )
shader_param/light_bias = Vector3( 0, 0, 0 )
shader_param/use_view = true
shader_param/view_bias = Color( 1, 0, 1, 1 )
shader_param/view_multiplier = -1.0
shader_param/albedo_texture = ExtResource( 3 )
shader_param/normal_map = SubResource( 18 )

[sub_resource type="ShaderMaterial" id=20]
shader = ExtResource( 22 )
shader_param/tint = Color( 1, 1, 1, 1 )
shader_param/metallic = 0.0
shader_param/shadow_size = 0.045
shader_param/shadow_blend = 0.001
shader_param/shadow_extra_intensity = 0.1
shader_param/shadow_color = Color( 0, 0, 0, 1 )
shader_param/light_tint = Color( 0.670588, 0.670588, 0.670588, 1 )
shader_param/rimlight_size = 0.749
shader_param/rimlight_blend = 0.0
shader_param/rimlight_color = Color( 1, 1, 1, 1 )
shader_param/use_normalmap = true
shader_param/animated = true
shader_param/time_scale = 0.02
shader_param/normal_bias = Vector3( 0, 0, 0 )
shader_param/light_bias = Vector3( 0, 0, 0 )
shader_param/use_view = true
shader_param/view_bias = Color( 1, 0, 1, 1 )
shader_param/view_multiplier = -1.0
shader_param/albedo_texture = ExtResource( 3 )
shader_param/normal_map = SubResource( 11 )

[sub_resource type="ShaderMaterial" id=21]
shader = SubResource( 5 )
shader_param/tint = Color( 1, 1, 1, 1 )
shader_param/light_color = Color( 1, 1, 1, 1 )
shader_param/shadow_size = 5.117
shader_param/shadow_blend = 1.972
shader_param/light_direction = Vector3( -12.59, -1.8, 19.57 )
shader_param/shadow_color = Color( 0.64, 0.64, 0.64, 1 )
shader_param/rimlight_color = Color( 1, 1, 1, 1 )
shader_param/rimlight_blend = 0.577
shader_param/rimlight_size = 0.05
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/main_texture = ExtResource( 11 )
shader_param/normal_map = SubResource( 7 )

[sub_resource type="ShaderMaterial" id=22]
shader = ExtResource( 22 )
shader_param/tint = null
shader_param/metallic = 0.0
shader_param/shadow_size = 0.045
shader_param/shadow_blend = 0.001
shader_param/shadow_extra_intensity = 0.0
shader_param/shadow_color = null
shader_param/light_tint = null
shader_param/rimlight_size = 0.921
shader_param/rimlight_blend = 0.01
shader_param/rimlight_color = null
shader_param/use_normalmap = true
shader_param/animated = true
shader_param/time_scale = 0.02
shader_param/normal_bias = Vector3( 0, 0, 0 )
shader_param/light_bias = Vector3( 0, 0, 0 )
shader_param/use_view = true
shader_param/view_bias = Color( 1, 0, 1, 1 )
shader_param/view_multiplier = -1.0

[sub_resource type="ShaderMaterial" id=23]
shader = ExtResource( 15 )
shader_param/color_top = Color( 0.392157, 0.592157, 0.243137, 1 )
shader_param/color_bottom = Color( 0.0784314, 0.14902, 0.0117647, 1 )
shader_param/deg_sway_pitch = 80.0
shader_param/deg_sway_yaw = 45.0
shader_param/wind_scale = 4.0
shader_param/wind_speed = 1.0
shader_param/wind_direction = Vector3( 0, 0, -1 )

[sub_resource type="ProceduralSky" id=24]

[sub_resource type="Environment" id=25]
background_mode = 2
background_sky = SubResource( 24 )
ambient_light_color = Color( 0.443137, 0.443137, 0.443137, 1 )
ambient_light_sky_contribution = 0.0
tonemap_mode = 2
tonemap_white = 5.5
glow_enabled = true
glow_strength = 0.94
adjustment_enabled = true
adjustment_saturation = 2.6

[sub_resource type="VisualShaderNodeScalarOp" id=26]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=27]
constant = 0.072

[sub_resource type="VisualShaderNodeScalarOp" id=28]

[sub_resource type="VisualShaderNodeScalarOp" id=29]

[sub_resource type="VisualShaderNodeIf" id=30]

[sub_resource type="VisualShaderNodeScalarUniform" id=31]
uniform_name = "white_threshold"

[sub_resource type="VisualShaderNodeScalarConstant" id=32]
constant = 5.0

[sub_resource type="VisualShaderNodeVectorOp" id=33]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=34]
uniform_name = "white_tint"

[sub_resource type="VisualShaderNodeInput" id=35]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=36]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=37]
source = 5

[sub_resource type="VisualShaderNodeInput" id=38]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeIf" id=39]

[sub_resource type="VisualShaderNodeScalarUniform" id=40]
uniform_name = "highlight_threshold"

[sub_resource type="VisualShaderNodeVectorOp" id=41]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=42]
uniform_name = "highlight_tint"

[sub_resource type="VisualShaderNodeTexture" id=43]
source = 5

[sub_resource type="VisualShaderNodeTexture" id=44]
source = 5

[sub_resource type="VisualShaderNodeInput" id=45]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=46]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeIf" id=47]

[sub_resource type="VisualShaderNodeScalarUniform" id=48]
uniform_name = "neutral_threshold"

[sub_resource type="VisualShaderNodeVectorOp" id=49]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=50]
uniform_name = "neutral_tint"

[sub_resource type="VisualShaderNodeTexture" id=51]
source = 5

[sub_resource type="VisualShaderNodeInput" id=52]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=53]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=54]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=55]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=56]
uniform_name = "shadow_tint"

[sub_resource type="VisualShaderNodeTexture" id=57]
source = 5

[sub_resource type="VisualShaderNodeInput" id=58]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=59]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeIf" id=60]

[sub_resource type="VisualShaderNodeScalarUniform" id=61]
uniform_name = "shadow_threshold"

[sub_resource type="VisualShaderNodeVectorDecompose" id=62]

[sub_resource type="VisualShaderNodeVectorOp" id=63]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=64]
uniform_name = "deepshadow_tint"

[sub_resource type="VisualShaderNodeTexture" id=65]
source = 5

[sub_resource type="VisualShaderNodeInput" id=66]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=67]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeIf" id=68]

[sub_resource type="VisualShaderNodeScalarUniform" id=69]
uniform_name = "deepshadow_threshold"

[sub_resource type="VisualShaderNodeVectorOp" id=70]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=71]
uniform_name = "deepershadow_tint"

[sub_resource type="VisualShaderNodeScalarOp" id=72]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=73]
source = 5

[sub_resource type="VisualShaderNodeInput" id=74]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=75]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeIf" id=76]

[sub_resource type="VisualShaderNodeScalarUniform" id=77]
uniform_name = "deepershadow_threshold"

[sub_resource type="VisualShaderNodeVectorOp" id=78]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=79]
uniform_name = "deepestshadow_tint"

[sub_resource type="VisualShaderNodeTexture" id=80]
source = 5

[sub_resource type="VisualShaderNodeScalarConstant" id=81]
constant = 0.213

[sub_resource type="VisualShaderNodeInput" id=82]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=83]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeIf" id=84]

[sub_resource type="VisualShaderNodeScalarUniform" id=85]
uniform_name = "deepestshadow_threshold"

[sub_resource type="VisualShaderNodeVectorOp" id=86]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=87]
uniform_name = "black_tint"

[sub_resource type="VisualShaderNodeTexture" id=88]
source = 5

[sub_resource type="VisualShaderNodeInput" id=89]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=90]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeScalarOp" id=91]
operator = 2

[sub_resource type="VisualShaderNodeIf" id=92]

[sub_resource type="VisualShaderNodeScalarUniform" id=93]
uniform_name = "black_threshold"

[sub_resource type="VisualShaderNodeCustom" id=94]
default_input_values = [ 1, 50.0 ]
initialized = true
script = ExtResource( 18 )

[sub_resource type="VisualShaderNodeCustom" id=95]
default_input_values = [ 1, 8.0 ]
initialized = true
script = ExtResource( 18 )

[sub_resource type="VisualShaderNodeCustom" id=96]
default_input_values = [ 1, 8.0 ]
initialized = true
script = ExtResource( 18 )

[sub_resource type="VisualShaderNodeCustom" id=97]
default_input_values = [ 1, 8.0 ]
initialized = true
script = ExtResource( 18 )

[sub_resource type="VisualShaderNodeCustom" id=98]
default_input_values = [ 1, 8.0 ]
initialized = true
script = ExtResource( 18 )

[sub_resource type="VisualShaderNodeCustom" id=99]
default_input_values = [ 1, 8.0 ]
initialized = true
script = ExtResource( 18 )

[sub_resource type="VisualShaderNodeCustom" id=100]
default_input_values = [ 1, 8.0 ]
initialized = true
script = ExtResource( 18 )

[sub_resource type="VisualShaderNodeScalarConstant" id=101]
constant = 0.715

[sub_resource type="VisualShaderNodeCustom" id=102]
default_input_values = [ 1, 8.0 ]
initialized = true
script = ExtResource( 18 )

[sub_resource type="VisualShader" id=103]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;

uniform float black_threshold;
uniform float deepestshadow_threshold;
uniform float deepershadow_threshold;
uniform float deepshadow_threshold;
uniform float shadow_threshold;
uniform float neutral_threshold;
uniform float highlight_threshold;
uniform float white_threshold;
uniform vec4 white_tint : hint_color;
uniform vec4 highlight_tint : hint_color;
uniform vec4 neutral_tint : hint_color;
uniform vec4 shadow_tint : hint_color;
uniform vec4 deepshadow_tint : hint_color;
uniform vec4 deepershadow_tint : hint_color;
uniform vec4 deepestshadow_tint : hint_color;
uniform vec4 black_tint : hint_color;


// Posterize

vec3 p0ster1zeFunc(vec3 _col_p0sr1ze, float _steps_p0sterize){
	return floor(_col_p0sr1ze * _steps_p0sterize) / (_steps_p0sterize - 1.0);
}


void vertex() {
// Output:0

}

void fragment() {
// Scalar:7
	float n_out7p0 = 0.213000;

// Input:4
	vec3 n_out4p0 = vec3(SCREEN_UV, 0.0);

// Input:2

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out4p0.xy);
		n_out3p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out3p1 = SCREEN_TEXTURE_tex_read.a;
	}

// VectorDecompose:5
	float n_out5p0 = n_out3p0.x;
	float n_out5p1 = n_out3p0.y;
	float n_out5p2 = n_out3p0.z;

// ScalarOp:6
	float n_out6p0 = n_out7p0 * n_out5p0;

// Scalar:9
	float n_out9p0 = 0.715000;

// ScalarOp:8
	float n_out8p0 = n_out5p1 * n_out9p0;

// ScalarOp:12
	float n_out12p0 = n_out6p0 + n_out8p0;

// Scalar:11
	float n_out11p0 = 0.072000;

// ScalarOp:10
	float n_out10p0 = n_out5p2 * n_out11p0;

// ScalarOp:13
	float n_out13p0 = n_out12p0 + n_out10p0;

// ScalarUniform:81
	float n_out81p0 = black_threshold;

// ScalarUniform:73
	float n_out73p0 = deepestshadow_threshold;

// ScalarUniform:65
	float n_out65p0 = deepershadow_threshold;

// ScalarUniform:57
	float n_out57p0 = deepshadow_threshold;

// ScalarUniform:49
	float n_out49p0 = shadow_threshold;

// ScalarUniform:35
	float n_out35p0 = neutral_threshold;

// ScalarUniform:24
	float n_out24p0 = highlight_threshold;

// ScalarUniform:15
	float n_out15p0 = white_threshold;

// Scalar:16
	float n_out16p0 = 5.000000;

// ColorUniform:18
	vec3 n_out18p0 = white_tint.rgb;
	float n_out18p1 = white_tint.a;

// Input:21
	vec3 n_out21p0 = vec3(SCREEN_UV, 0.0);

// Input:19

// Texture:20
	vec3 n_out20p0;
	float n_out20p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out21p0.xy);
		n_out20p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out20p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Posterize:84
	float n_in84p1 = 8.00000;
	vec3 n_out84p0;
	{
		n_out84p0 = p0ster1zeFunc(n_out20p0, n_in84p1);
	}

// VectorOp:17
	vec3 n_out17p0 = n_out18p0 * n_out84p0;

// If:14
	float n_in14p2 = 0.00001;
	vec3 n_in14p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out14p0;
	if(abs(n_out13p0 - n_out15p0) < n_in14p2)
	{
		n_out14p0 = n_in14p3;
	}
	else if(n_out13p0 < n_out15p0)
	{
		n_out14p0 = n_out17p0;
	}
	else
	{
		n_out14p0 = vec3(n_out16p0);
	}

// ColorUniform:26
	vec3 n_out26p0 = highlight_tint.rgb;
	float n_out26p1 = highlight_tint.a;

// Input:31
	vec3 n_out31p0 = vec3(SCREEN_UV, 0.0);

// Input:30

// Texture:28
	vec3 n_out28p0;
	float n_out28p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out31p0.xy);
		n_out28p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out28p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Posterize:85
	float n_in85p1 = 8.00000;
	vec3 n_out85p0;
	{
		n_out85p0 = p0ster1zeFunc(n_out28p0, n_in85p1);
	}

// VectorOp:25
	vec3 n_out25p0 = n_out26p0 * n_out85p0;

// If:23
	float n_in23p2 = 0.00001;
	vec3 n_in23p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out23p0;
	if(abs(n_out13p0 - n_out24p0) < n_in23p2)
	{
		n_out23p0 = n_in23p3;
	}
	else if(n_out13p0 < n_out24p0)
	{
		n_out23p0 = n_out25p0;
	}
	else
	{
		n_out23p0 = n_out14p0;
	}

// ColorUniform:37
	vec3 n_out37p0 = neutral_tint.rgb;
	float n_out37p1 = neutral_tint.a;

// Input:41
	vec3 n_out41p0 = vec3(SCREEN_UV, 0.0);

// Input:40

// Texture:38
	vec3 n_out38p0;
	float n_out38p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out41p0.xy);
		n_out38p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out38p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Posterize:86
	float n_in86p1 = 8.00000;
	vec3 n_out86p0;
	{
		n_out86p0 = p0ster1zeFunc(n_out38p0, n_in86p1);
	}

// VectorOp:36
	vec3 n_out36p0 = n_out37p0 * n_out86p0;

// If:34
	float n_in34p2 = 0.00001;
	vec3 n_in34p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out34p0;
	if(abs(n_out13p0 - n_out35p0) < n_in34p2)
	{
		n_out34p0 = n_in34p3;
	}
	else if(n_out13p0 < n_out35p0)
	{
		n_out34p0 = n_out36p0;
	}
	else
	{
		n_out34p0 = n_out23p0;
	}

// ColorUniform:43
	vec3 n_out43p0 = shadow_tint.rgb;
	float n_out43p1 = shadow_tint.a;

// Input:47
	vec3 n_out47p0 = vec3(SCREEN_UV, 0.0);

// Input:46

// Texture:44
	vec3 n_out44p0;
	float n_out44p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out47p0.xy);
		n_out44p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out44p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Posterize:83
	float n_in83p1 = 50.00000;
	vec3 n_out83p0;
	{
		n_out83p0 = p0ster1zeFunc(n_out44p0, n_in83p1);
	}

// VectorOp:42
	vec3 n_out42p0 = n_out43p0 * n_out83p0;

// If:48
	float n_in48p2 = 0.00001;
	vec3 n_in48p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out48p0;
	if(abs(n_out13p0 - n_out49p0) < n_in48p2)
	{
		n_out48p0 = n_in48p3;
	}
	else if(n_out13p0 < n_out49p0)
	{
		n_out48p0 = n_out42p0;
	}
	else
	{
		n_out48p0 = n_out34p0;
	}

// ColorUniform:51
	vec3 n_out51p0 = deepshadow_tint.rgb;
	float n_out51p1 = deepshadow_tint.a;

// Input:55
	vec3 n_out55p0 = vec3(SCREEN_UV, 0.0);

// Input:54

// Texture:52
	vec3 n_out52p0;
	float n_out52p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out55p0.xy);
		n_out52p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out52p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Posterize:87
	float n_in87p1 = 8.00000;
	vec3 n_out87p0;
	{
		n_out87p0 = p0ster1zeFunc(n_out52p0, n_in87p1);
	}

// VectorOp:50
	vec3 n_out50p0 = n_out51p0 * n_out87p0;

// If:56
	float n_in56p2 = 0.00001;
	vec3 n_in56p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out56p0;
	if(abs(n_out13p0 - n_out57p0) < n_in56p2)
	{
		n_out56p0 = n_in56p3;
	}
	else if(n_out13p0 < n_out57p0)
	{
		n_out56p0 = n_out50p0;
	}
	else
	{
		n_out56p0 = n_out48p0;
	}

// ColorUniform:59
	vec3 n_out59p0 = deepershadow_tint.rgb;
	float n_out59p1 = deepershadow_tint.a;

// Input:63
	vec3 n_out63p0 = vec3(SCREEN_UV, 0.0);

// Input:62

// Texture:60
	vec3 n_out60p0;
	float n_out60p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out63p0.xy);
		n_out60p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out60p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Posterize:88
	float n_in88p1 = 8.00000;
	vec3 n_out88p0;
	{
		n_out88p0 = p0ster1zeFunc(n_out60p0, n_in88p1);
	}

// VectorOp:58
	vec3 n_out58p0 = n_out59p0 * n_out88p0;

// If:64
	float n_in64p2 = 0.00001;
	vec3 n_in64p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out64p0;
	if(abs(n_out13p0 - n_out65p0) < n_in64p2)
	{
		n_out64p0 = n_in64p3;
	}
	else if(n_out13p0 < n_out65p0)
	{
		n_out64p0 = n_out58p0;
	}
	else
	{
		n_out64p0 = n_out56p0;
	}

// ColorUniform:67
	vec3 n_out67p0 = deepestshadow_tint.rgb;
	float n_out67p1 = deepestshadow_tint.a;

// Input:71
	vec3 n_out71p0 = vec3(SCREEN_UV, 0.0);

// Input:70

// Texture:68
	vec3 n_out68p0;
	float n_out68p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out71p0.xy);
		n_out68p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out68p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Posterize:89
	float n_in89p1 = 8.00000;
	vec3 n_out89p0;
	{
		n_out89p0 = p0ster1zeFunc(n_out68p0, n_in89p1);
	}

// VectorOp:66
	vec3 n_out66p0 = n_out67p0 * n_out89p0;

// If:72
	float n_in72p2 = 0.00001;
	vec3 n_in72p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out72p0;
	if(abs(n_out13p0 - n_out73p0) < n_in72p2)
	{
		n_out72p0 = n_in72p3;
	}
	else if(n_out13p0 < n_out73p0)
	{
		n_out72p0 = n_out66p0;
	}
	else
	{
		n_out72p0 = n_out64p0;
	}

// ColorUniform:75
	vec3 n_out75p0 = black_tint.rgb;
	float n_out75p1 = black_tint.a;

// Input:79
	vec3 n_out79p0 = vec3(SCREEN_UV, 0.0);

// Input:78

// Texture:76
	vec3 n_out76p0;
	float n_out76p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out79p0.xy);
		n_out76p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out76p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Posterize:90
	float n_in90p1 = 8.00000;
	vec3 n_out90p0;
	{
		n_out90p0 = p0ster1zeFunc(n_out76p0, n_in90p1);
	}

// VectorOp:74
	vec3 n_out74p0 = n_out75p0 * n_out90p0;

// If:80
	float n_in80p2 = 0.00001;
	vec3 n_in80p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out80p0;
	if(abs(n_out13p0 - n_out81p0) < n_in80p2)
	{
		n_out80p0 = n_in80p3;
	}
	else if(n_out13p0 < n_out81p0)
	{
		n_out80p0 = n_out74p0;
	}
	else
	{
		n_out80p0 = n_out72p0;
	}

// Output:0
	ALBEDO = n_out80p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 2020.82, 1010.37 )
flags/unshaded = true
nodes/fragment/0/position = Vector2( 4100, 3320 )
nodes/fragment/2/node = SubResource( 36 )
nodes/fragment/2/position = Vector2( -300, 220 )
nodes/fragment/3/node = SubResource( 44 )
nodes/fragment/3/position = Vector2( -20, 80 )
nodes/fragment/4/node = SubResource( 52 )
nodes/fragment/4/position = Vector2( -300, 140 )
nodes/fragment/5/node = SubResource( 62 )
nodes/fragment/5/position = Vector2( 259, 89 )
nodes/fragment/6/node = SubResource( 72 )
nodes/fragment/6/position = Vector2( 680, -180 )
nodes/fragment/7/node = SubResource( 81 )
nodes/fragment/7/position = Vector2( 260, -40 )
nodes/fragment/8/node = SubResource( 91 )
nodes/fragment/8/position = Vector2( 760, 20 )
nodes/fragment/9/node = SubResource( 101 )
nodes/fragment/9/position = Vector2( 520, 160 )
nodes/fragment/10/node = SubResource( 26 )
nodes/fragment/10/position = Vector2( 617, 275 )
nodes/fragment/11/node = SubResource( 27 )
nodes/fragment/11/position = Vector2( 420, 400 )
nodes/fragment/12/node = SubResource( 28 )
nodes/fragment/12/position = Vector2( 940, -80 )
nodes/fragment/13/node = SubResource( 29 )
nodes/fragment/13/position = Vector2( 1000, 80 )
nodes/fragment/14/node = SubResource( 30 )
nodes/fragment/14/position = Vector2( 1900, -120 )
nodes/fragment/15/node = SubResource( 31 )
nodes/fragment/15/position = Vector2( 1660, -120 )
nodes/fragment/16/node = SubResource( 32 )
nodes/fragment/16/position = Vector2( 1680, 20 )
nodes/fragment/17/node = SubResource( 33 )
nodes/fragment/17/position = Vector2( 1700, 140 )
nodes/fragment/18/node = SubResource( 34 )
nodes/fragment/18/position = Vector2( 1500, 80 )
nodes/fragment/19/node = SubResource( 35 )
nodes/fragment/19/position = Vector2( 1160, 400 )
nodes/fragment/20/node = SubResource( 37 )
nodes/fragment/20/position = Vector2( 1460, 240 )
nodes/fragment/21/node = SubResource( 38 )
nodes/fragment/21/position = Vector2( 1160, 320 )
nodes/fragment/23/node = SubResource( 39 )
nodes/fragment/23/position = Vector2( 2400, 100 )
nodes/fragment/24/node = SubResource( 40 )
nodes/fragment/24/position = Vector2( 2160, 100 )
nodes/fragment/25/node = SubResource( 41 )
nodes/fragment/25/position = Vector2( 2200, 360 )
nodes/fragment/26/node = SubResource( 42 )
nodes/fragment/26/position = Vector2( 2000, 300 )
nodes/fragment/28/node = SubResource( 43 )
nodes/fragment/28/position = Vector2( 1960, 460 )
nodes/fragment/30/node = SubResource( 45 )
nodes/fragment/30/position = Vector2( 1620, 500 )
nodes/fragment/31/node = SubResource( 46 )
nodes/fragment/31/position = Vector2( 1620, 420 )
nodes/fragment/34/node = SubResource( 47 )
nodes/fragment/34/position = Vector2( 2660, 380 )
nodes/fragment/35/node = SubResource( 48 )
nodes/fragment/35/position = Vector2( 2420, 380 )
nodes/fragment/36/node = SubResource( 49 )
nodes/fragment/36/position = Vector2( 2640, 700 )
nodes/fragment/37/node = SubResource( 50 )
nodes/fragment/37/position = Vector2( 2440, 640 )
nodes/fragment/38/node = SubResource( 51 )
nodes/fragment/38/position = Vector2( 2020, 900 )
nodes/fragment/40/node = SubResource( 53 )
nodes/fragment/40/position = Vector2( 1680, 940 )
nodes/fragment/41/node = SubResource( 54 )
nodes/fragment/41/position = Vector2( 1740, 820 )
nodes/fragment/42/node = SubResource( 55 )
nodes/fragment/42/position = Vector2( 2840, 1200 )
nodes/fragment/43/node = SubResource( 56 )
nodes/fragment/43/position = Vector2( 2640, 1140 )
nodes/fragment/44/node = SubResource( 57 )
nodes/fragment/44/position = Vector2( 2600, 1300 )
nodes/fragment/46/node = SubResource( 58 )
nodes/fragment/46/position = Vector2( 2260, 1340 )
nodes/fragment/47/node = SubResource( 59 )
nodes/fragment/47/position = Vector2( 2260, 1260 )
nodes/fragment/48/node = SubResource( 60 )
nodes/fragment/48/position = Vector2( 2860, 880 )
nodes/fragment/49/node = SubResource( 61 )
nodes/fragment/49/position = Vector2( 2620, 880 )
nodes/fragment/50/node = SubResource( 63 )
nodes/fragment/50/position = Vector2( 3160, 1800 )
nodes/fragment/51/node = SubResource( 64 )
nodes/fragment/51/position = Vector2( 2960, 1740 )
nodes/fragment/52/node = SubResource( 65 )
nodes/fragment/52/position = Vector2( 2920, 1900 )
nodes/fragment/54/node = SubResource( 66 )
nodes/fragment/54/position = Vector2( 2580, 1940 )
nodes/fragment/55/node = SubResource( 67 )
nodes/fragment/55/position = Vector2( 2580, 1860 )
nodes/fragment/56/node = SubResource( 68 )
nodes/fragment/56/position = Vector2( 3180, 1480 )
nodes/fragment/57/node = SubResource( 69 )
nodes/fragment/57/position = Vector2( 2940, 1480 )
nodes/fragment/58/node = SubResource( 70 )
nodes/fragment/58/position = Vector2( 3380, 2440 )
nodes/fragment/59/node = SubResource( 71 )
nodes/fragment/59/position = Vector2( 3180, 2380 )
nodes/fragment/60/node = SubResource( 73 )
nodes/fragment/60/position = Vector2( 3140, 2540 )
nodes/fragment/62/node = SubResource( 74 )
nodes/fragment/62/position = Vector2( 2800, 2580 )
nodes/fragment/63/node = SubResource( 75 )
nodes/fragment/63/position = Vector2( 2800, 2500 )
nodes/fragment/64/node = SubResource( 76 )
nodes/fragment/64/position = Vector2( 3400, 2120 )
nodes/fragment/65/node = SubResource( 77 )
nodes/fragment/65/position = Vector2( 3160, 2120 )
nodes/fragment/66/node = SubResource( 78 )
nodes/fragment/66/position = Vector2( 3600, 3100 )
nodes/fragment/67/node = SubResource( 79 )
nodes/fragment/67/position = Vector2( 3400, 3040 )
nodes/fragment/68/node = SubResource( 80 )
nodes/fragment/68/position = Vector2( 3360, 3200 )
nodes/fragment/70/node = SubResource( 82 )
nodes/fragment/70/position = Vector2( 3020, 3240 )
nodes/fragment/71/node = SubResource( 83 )
nodes/fragment/71/position = Vector2( 3020, 3160 )
nodes/fragment/72/node = SubResource( 84 )
nodes/fragment/72/position = Vector2( 3620, 2780 )
nodes/fragment/73/node = SubResource( 85 )
nodes/fragment/73/position = Vector2( 3380, 2780 )
nodes/fragment/74/node = SubResource( 86 )
nodes/fragment/74/position = Vector2( 3800, 3740 )
nodes/fragment/75/node = SubResource( 87 )
nodes/fragment/75/position = Vector2( 3600, 3680 )
nodes/fragment/76/node = SubResource( 88 )
nodes/fragment/76/position = Vector2( 3560, 3840 )
nodes/fragment/78/node = SubResource( 89 )
nodes/fragment/78/position = Vector2( 3220, 3880 )
nodes/fragment/79/node = SubResource( 90 )
nodes/fragment/79/position = Vector2( 3220, 3800 )
nodes/fragment/80/node = SubResource( 92 )
nodes/fragment/80/position = Vector2( 3820, 3420 )
nodes/fragment/81/node = SubResource( 93 )
nodes/fragment/81/position = Vector2( 3580, 3420 )
nodes/fragment/83/node = SubResource( 94 )
nodes/fragment/83/position = Vector2( 2820, 1380 )
nodes/fragment/84/node = SubResource( 95 )
nodes/fragment/84/position = Vector2( 1680, 300 )
nodes/fragment/85/node = SubResource( 96 )
nodes/fragment/85/position = Vector2( 2208.82, 571.368 )
nodes/fragment/86/node = SubResource( 97 )
nodes/fragment/86/position = Vector2( 2280, 980 )
nodes/fragment/87/node = SubResource( 98 )
nodes/fragment/87/position = Vector2( 3140, 2000 )
nodes/fragment/88/node = SubResource( 99 )
nodes/fragment/88/position = Vector2( 3385.82, 2636.37 )
nodes/fragment/89/node = SubResource( 100 )
nodes/fragment/89/position = Vector2( 3580, 3280 )
nodes/fragment/90/node = SubResource( 102 )
nodes/fragment/90/position = Vector2( 3792.82, 3932.37 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 0, 2, 0, 3, 2, 3, 0, 5, 0, 5, 0, 6, 1, 7, 0, 6, 0, 5, 1, 8, 0, 9, 0, 8, 1, 5, 2, 10, 0, 11, 0, 10, 1, 6, 0, 12, 0, 8, 0, 12, 1, 10, 0, 13, 1, 12, 0, 13, 0, 13, 0, 14, 0, 15, 0, 14, 1, 16, 0, 14, 4, 17, 0, 14, 5, 18, 0, 17, 0, 21, 0, 20, 0, 19, 0, 20, 2, 24, 0, 23, 1, 25, 0, 23, 5, 26, 0, 25, 0, 31, 0, 28, 0, 30, 0, 28, 2, 14, 0, 23, 4, 13, 0, 23, 0, 35, 0, 34, 1, 36, 0, 34, 5, 37, 0, 36, 0, 41, 0, 38, 0, 40, 0, 38, 2, 23, 0, 34, 4, 13, 0, 34, 0, 49, 0, 48, 1, 43, 0, 42, 0, 47, 0, 44, 0, 46, 0, 44, 2, 13, 0, 48, 0, 34, 0, 48, 4, 57, 0, 56, 1, 50, 0, 56, 5, 51, 0, 50, 0, 55, 0, 52, 0, 54, 0, 52, 2, 48, 0, 56, 4, 13, 0, 56, 0, 65, 0, 64, 1, 59, 0, 58, 0, 63, 0, 60, 0, 62, 0, 60, 2, 56, 0, 64, 4, 13, 0, 64, 0, 58, 0, 64, 5, 73, 0, 72, 1, 67, 0, 66, 0, 71, 0, 68, 0, 70, 0, 68, 2, 66, 0, 72, 5, 64, 0, 72, 4, 13, 0, 72, 0, 81, 0, 80, 1, 75, 0, 74, 0, 79, 0, 76, 0, 78, 0, 76, 2, 74, 0, 80, 5, 72, 0, 80, 4, 13, 0, 80, 0, 80, 0, 0, 0, 42, 0, 48, 5, 44, 0, 83, 0, 83, 0, 42, 1, 20, 0, 84, 0, 84, 0, 17, 1, 28, 0, 85, 0, 85, 0, 25, 1, 38, 0, 86, 0, 86, 0, 36, 1, 52, 0, 87, 0, 87, 0, 50, 1, 60, 0, 88, 0, 88, 0, 58, 1, 68, 0, 89, 0, 89, 0, 66, 1, 76, 0, 90, 0, 90, 0, 74, 1 )

[sub_resource type="ShaderMaterial" id=104]
resource_local_to_scene = true
shader = SubResource( 103 )
shader_param/black_threshold = 0.141
shader_param/deepestshadow_threshold = 0.151
shader_param/deepershadow_threshold = 0.203
shader_param/deepshadow_threshold = 0.242
shader_param/shadow_threshold = 0.328
shader_param/neutral_threshold = 0.7
shader_param/highlight_threshold = 0.8
shader_param/white_threshold = 0.9
shader_param/white_tint = Color( 1, 1, 1, 1 )
shader_param/highlight_tint = Color( 0.886275, 0.886275, 0.886275, 1 )
shader_param/neutral_tint = Color( 0.827451, 0.827451, 0.827451, 1 )
shader_param/shadow_tint = Color( 0.611765, 0.611765, 0.611765, 1 )
shader_param/deepshadow_tint = Color( 0.419608, 0.419608, 0.419608, 1 )
shader_param/deepershadow_tint = Color( 0.34902, 0.34902, 0.34902, 1 )
shader_param/deepestshadow_tint = Color( 0.262745, 0.262745, 0.262745, 1 )
shader_param/black_tint = Color( 0.172549, 0.172549, 0.172549, 1 )

[sub_resource type="QuadMesh" id=105]

[sub_resource type="DynamicFont" id=106]
size = 37
use_filter = true
font_data = ExtResource( 20 )

[sub_resource type="DynamicFont" id=107]
size = 37
outline_size = 5
outline_color = Color( 0, 0, 0, 1 )
use_mipmaps = true
use_filter = true
font_data = ExtResource( 20 )

[sub_resource type="Theme" id=108]
default_font = SubResource( 107 )

[node name="BOTW_Toon_Shader_Test" type="Spatial"]
script = ExtResource( 17 )

[node name="Reference1" type="Sprite3D" parent="."]
transform = Transform( 0.0769221, 0, 0.0638983, 0, 0.1, 0, -0.0638983, 0, 0.0769221, -0.352723, 1.48165, 0 )
transparent = false
texture = ExtResource( 12 )

[node name="Reference2" type="Sprite3D" parent="."]
transform = Transform( 0.084702, 0, -0.0531561, 0, 0.1, 0, 0.0531561, 0, 0.084702, 0.587635, 1.4875, 0 )
transparent = false
texture = ExtResource( 13 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.34092, 1.55404, 0.243173 )
light_color = Color( 0.231373, 1, 1, 1 )
light_energy = 8.0
omni_range = 0.306143
omni_attenuation = 0.0236844

[node name="AnimationPlayer" type="AnimationPlayer" parent="OmniLight"]
autoplay = "flicker"
anims/flicker = SubResource( 1 )

[node name="OmniLight2" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.24286, 0.973925, 0.0402768 )
light_color = Color( 0.00784314, 1, 0, 1 )
light_energy = 2.64
omni_range = 0.521678
omni_attenuation = 0.31864

[node name="AnimationPlayer" type="AnimationPlayer" parent="OmniLight2"]
autoplay = "move"
anims/move = SubResource( 2 )

[node name="linkPosed001" parent="." instance=ExtResource( 1 )]

[node name="mesh_terrain" parent="linkPosed001/RootNode" index="0"]
visible = false
material_override = SubResource( 8 )

[node name="mesh_link" parent="linkPosed001/RootNode/gr_link1" index="0" groups=[
"ToonMaterial",
]]
material_override = ExtResource( 19 )

[node name="mesh_linkShoulderpad" parent="linkPosed001/RootNode/gr_link1" index="1"]
material_override = ExtResource( 19 )

[node name="mesh_linkPouch" parent="linkPosed001/RootNode/gr_link1" index="2"]
material_override = ExtResource( 5 )

[node name="mesh_link_arm_L" parent="linkPosed001/RootNode/gr_link1" index="3"]
material_override = ExtResource( 19 )

[node name="mesh_link_armInfected_R" parent="linkPosed001/RootNode/gr_link1" index="4" groups=[
"ToonMaterial",
]]
material_override = SubResource( 12 )

[node name="mesh_linkCape" parent="linkPosed001/RootNode/gr_link1" index="5"]
material_override = SubResource( 15 )

[node name="mesh_linkEyes" parent="linkPosed001/RootNode/gr_link1" index="6"]
material_override = SubResource( 16 )

[node name="mesh_linkHair" parent="linkPosed001/RootNode/gr_link1" index="7" groups=[
"ToonMaterial",
]]
material_override = SubResource( 19 )

[node name="mesh_linkHairBackface" parent="linkPosed001/RootNode/gr_link1" index="8" groups=[
"ToonMaterial",
]]
material_override = SubResource( 20 )

[node name="mesh_masterSword" parent="linkPosed001/RootNode" index="2"]
material_override = SubResource( 21 )

[node name="mesh_glow" parent="linkPosed001/RootNode" index="3"]
visible = false
material_override = SubResource( 22 )

[node name="link_nonshaded" parent="." instance=ExtResource( 1 )]
visible = false

[node name="mesh_terrain" parent="link_nonshaded/RootNode" index="0"]
visible = false

[node name="GrassRoot" type="Spatial" parent="."]

[node name="Scene" parent="GrassRoot" instance=ExtResource( 14 )]
transform = Transform( 2, 0, 0, 0, 2, 0, 0, 0, 2, -0.0158744, 0.0725678, -0.107072 )

[node name="Grass" parent="GrassRoot/Scene" index="1"]
material_override = SubResource( 23 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.551457, 0.630888, -0.54578, 0, 0.654253, 0.756276, 0.834204, -0.417053, 0.360792, -3.39149, 0, 0 )
light_energy = 2.0
shadow_enabled = true

[node name="Position3D" type="Position3D" parent="DirectionalLight"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1.86758 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 25 )

[node name="HeadAnchor" type="Position3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0337928, 1.51268, 0 )

[node name="CameraRoot" type="Position3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.26816, 0 )
script = ExtResource( 8 )
time_scale = 10.0

[node name="Camera" type="Camera" parent="CameraRoot"]
transform = Transform( 1, 0, 0, 0, 0.963649, 0.267171, 0, -0.267171, 0.963649, 0, 0.25, 0.825 )
current = true

[node name="GlobalCelShader" type="MeshInstance" parent="CameraRoot/Camera"]
transform = Transform( 1, 0, 0, 0, 0.963649, -0.267171, 0, 0.267171, 0.963649, 0, 0.197458, -1.45192 )
visible = false
material_override = SubResource( 104 )
cast_shadow = 0
mesh = SubResource( 105 )
material/0 = null

[node name="ToggleButton" type="Button" parent="CameraRoot/Camera"]
margin_left = 1487.43
margin_top = 46.3292
margin_right = 1904.43
margin_bottom = 109.329
custom_fonts/font = SubResource( 106 )
toggle_mode = true
pressed = true
text = "Enable Toon Shading"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="CameraRoot/Camera"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
theme = SubResource( 108 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="CameraRoot/Camera/Control"]
anchor_bottom = 1.0
margin_left = 12.0
margin_top = 12.0
margin_right = 817.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="CameraRoot/Camera/Control/VBoxContainer"]
margin_right = 817.0
margin_bottom = 38.0
text = "NEW Features:"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label2" type="Label" parent="CameraRoot/Camera/Control/VBoxContainer"]
margin_top = 42.0
margin_right = 817.0
margin_bottom = 80.0
text = "-Animated Shadow Warble"

[node name="Label3" type="Label" parent="CameraRoot/Camera/Control/VBoxContainer"]
margin_top = 84.0
margin_right = 817.0
margin_bottom = 122.0
text = "-Coloured Light Support"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label4" type="Label" parent="CameraRoot/Camera/Control/VBoxContainer"]
margin_top = 126.0
margin_right = 817.0
margin_bottom = 164.0
text = "-Multiple Light Sources"

[node name="Label5" type="Label" parent="CameraRoot/Camera/Control/VBoxContainer"]
margin_top = 168.0
margin_right = 817.0
margin_bottom = 206.0
text = "-Normal Bias"

[node name="Label6" type="Label" parent="CameraRoot/Camera/Control/VBoxContainer"]
margin_top = 210.0
margin_right = 817.0
margin_bottom = 289.0
text = "-Always have some part shaded
(with bias and multiplier)"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label7" type="Label" parent="CameraRoot/Camera/Control/VBoxContainer"]
margin_top = 293.0
margin_right = 817.0
margin_bottom = 372.0
text = "-Darken Shadows more than light source's
shadows"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label8" type="Label" parent="CameraRoot/Camera/Control/VBoxContainer"]
margin_top = 376.0
margin_right = 817.0
margin_bottom = 414.0
text = "-SSAO now works"

[node name="Label9" type="Label" parent="CameraRoot/Camera/Control/VBoxContainer"]
margin_top = 418.0
margin_right = 817.0
margin_bottom = 497.0
text = "-NO MORE NEED TO SEND LIGHT
DIRECTION THROUGH UNIFORM!!!"

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 9 )
volume_db = -10.0
autoplay = true

[connection signal="toggled" from="CameraRoot/Camera/ToggleButton" to="." method="_on_ToggleButton_toggled"]

[editable path="linkPosed001"]
[editable path="link_nonshaded"]
[editable path="GrassRoot/Scene"]
